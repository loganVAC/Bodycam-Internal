#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Zombie

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ALS_MovementAction_structs.hpp"
#include "E_Team_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MovementSettings_structs.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "AIModule_structs.hpp"
#include "ALS_MovementState_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "ALS_RotationMode_structs.hpp"
#include "ALS_Stance_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "GameMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Zombie.Zombie_C
// 0x0120 (0x0750 - 0x0630)
class AZombie_C final : public ACharacter
{
public:
	uint8                                         Pad_628[0x8];                                      // 0x0628(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0630(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          BoxSound;                                          // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWW_SurvivorStatus_C*                   WW_SurvivorStatus;                                 // 0x0648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWW_RagdollSystem_C*                    WW_RagdollSystem;                                  // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SmoothNewLocation_NewTrack_0_D9FBD1A5420B8C61010AF681039CE288; // 0x0658(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SmoothNewLocation__Direction_D9FBD1A5420B8C61010AF681039CE288; // 0x065C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65D[0x3];                                      // 0x065D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SmoothNewLocation;                                 // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastRagdollVelocity;                               // 0x0668(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RagdollLocation;                                   // 0x0680(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ServerRagdollPull;                                 // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          MainAnimInstance;                                  // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetToGo;                                        // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Mantle;                                            // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B1[0x7];                                      // 0x06B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             PlayerKilled;                                      // 0x06B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x06C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FMovementSettings                      CurrentMovementSettings;                           // 0x06D8(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeDestroyable_;                                 // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F9[0x7];                                      // 0x06F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 WeaponsHandle;                                     // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ScreamSound;                                       // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Jumped_;                                           // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSprinter_;                                       // 0x0711(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_712[0x6];                                      // 0x0712(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          New_Mesh;                                          // 0x0718(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0720(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	bool                                          Hit;                                               // 0x0730(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_731[0x3];                                      // 0x0731(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ZombieSkin;                                        // 0x0734(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73C[0x4];                                      // 0x073C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGM_Zombie_C*                           As_GM_Zombie;                                      // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        NormalSound;                                       // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyPointDamage(double Damage, double RagdollForce, class FName BoneName, const struct FVector& Location, const struct FVector& ShotFromDirection, class APlayerController* KillerPC, bool DisableHeadShot);
	void BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit_0);
	void BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BoneDamage(class FName bone, double Damage, double* DamageFinal);
	void BPI_Death();
	void BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* MovementState, EALS_MovementState* PrevMovementState, EALS_MovementAction* MovementAction, EALS_RotationMode* RotationMode, EALS_Gait* ActualGait, EALS_Stance* ActualStance, EALS_ViewMode* ViewMode, EALS_OverlayState* OverlayState, EALS_OverlayState* OverlayState__Client_);
	void BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Acceleration, struct FVector* MovementInput, bool* IsMoving, bool* HasMovementInput, double* Speed, double* MovementInputAmount, struct FRotator* AimingRotation, double* AimYawRate);
	void BPI_Set_Gait(EALS_Gait NewGait);
	void BPI_Set_MovementAction(EALS_MovementAction NewMovementAction);
	void BPI_Set_MovementState(EALS_MovementState NewMovementState);
	void BPI_Set_OverlayState(EALS_OverlayState NewOverlayState);
	void BPI_Set_RotationMode(EALS_RotationMode NewRotationMode);
	void BPI_Set_ViewMode(EALS_ViewMode NewViewMode);
	void BreakTimer();
	void CanCreateKickVote(bool* CanCreateKickVote_);
	void CanKickThisPlayer_(const class FString& PlayerID, bool* True_);
	bool CanReachDestination(const struct FVector& PathStart, const struct FVector& PathEnd, double* PathLenght);
	void ClearMap();
	void Died__Server_();
	void Event_Ragdoll_End();
	void EventRagdollStart();
	void ExecuteUbergraph_Zombie(int32 EntryPoint);
	void Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component);
	void Get_Stamina(double* Stamina);
	void GetBlured(double* Blured);
	void GetBurnedRef(class USceneComponent** BurnedMesh);
	void GetFlashBangEffect(double* FlashEffect);
	void GetGameMode(struct FSTR_GamemodeWinInfo* GameMode);
	void GetHealth(double* Health);
	void GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote);
	double GetMappedSpeed();
	void GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController);
	void GetMutePlayer(TArray<class FString>* MutePlayer);
	void GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected);
	void GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer);
	void GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_);
	void GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System);
	void GetRandomSpeed();
	void GetReady_(bool* IsReady_);
	void GetServerSteamID(class FString* SteamID);
	double GetSpeed();
	void GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons);
	void GetSteamID(class FString* SteamID);
	void GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant);
	void GetTeam(E_Team* Team);
	void GetTeamList(E_Team Team, TArray<struct FSTR_PCInfo>* Info);
	void GetTopScore(TArray<struct FSTR_PCInfo>* TopScore);
	void InitScoreBoard();
	void IsDead(bool* Dead_);
	void IsDestroyabe_(bool* Destroyable_);
	void IsReady_(bool IsReady__0);
	void IsStress(bool* Yes_);
	void IsTalking_(bool* IsTalking__0);
	void JumpAttack();
	void Kick_(const struct FSTR_PCInfo& Target);
	void KickPlayer(const struct FSTR_KickVote& PlayerInfo);
	void MuteID(const class FString& SteamID);
	void NewKickVote(const struct FSTR_PCInfo& Target);
	void OnBlendOut_51E0283846B84EF1D5A1089E527759EB(class FName NotifyName);
	void OnBlendOut_588418C1439E8F322E510C896D6B1D47(class FName NotifyName);
	void OnCompleted_51E0283846B84EF1D5A1089E527759EB(class FName NotifyName);
	void OnCompleted_588418C1439E8F322E510C896D6B1D47(class FName NotifyName);
	void OnFail_1E20234A4E4A5354DF248D943913FED2(EPathFollowingResult MovementResult);
	void OnInterrupted_51E0283846B84EF1D5A1089E527759EB(class FName NotifyName);
	void OnInterrupted_588418C1439E8F322E510C896D6B1D47(class FName NotifyName);
	void OnNotifyBegin_51E0283846B84EF1D5A1089E527759EB(class FName NotifyName);
	void OnNotifyBegin_588418C1439E8F322E510C896D6B1D47(class FName NotifyName);
	void OnNotifyEnd_51E0283846B84EF1D5A1089E527759EB(class FName NotifyName);
	void OnNotifyEnd_588418C1439E8F322E510C896D6B1D47(class FName NotifyName);
	void OnPlayerDeath(class APlayerController* PC);
	void OnRep_ZombieSkin();
	void OnSuccess_1E20234A4E4A5354DF248D943913FED2(EPathFollowingResult MovementResult);
	void OnTrySelectTeam(E_Team Team);
	void PassTroughtWindows(const struct FVector& DestLocation, class AActor* Actor);
	void Play_Anim_Montage__Multicast_(class UAnimMontage* MontageToPlay, float PlayRate);
	void PlayMontage__Multicast_();
	void RagdollUpdate();
	void RagdollUpdateLocation();
	void RandomSkin__Multicast_(class USkeletalMesh* NewMesh, TArray<class UMaterialInterface*>& Materials_0);
	void RandomSkin__Server_();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveRadialDamage(float DamageReceived, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveTick(float DeltaSeconds);
	void ServerTravel(double Delay);
	void Slomo(double Slomo_0);
	void SmoothCharacterRotation(const struct FRotator& Target, double TargetInterpSpeed_Const_, double ActorInterpSpeed_Smooth_);
	void SmoothNewLocation__FinishedFunc();
	void SmoothNewLocation__UpdateFunc();
	void Talk(bool IsTalking);
	void Target_Distance();
	void TryGrab();
	void UpdateGamemode(EGameMode GameMode);
	void UpdateGroudedRotation();
	void UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_);
	void UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0);
	void UpdateModeInfo();
	void UpdateScore(const struct FSTR_Score& Score);
	void UpdateTarget();
	void UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamXP(bool Win_);
	void UpdateTimer(double TimeCount, const class FText& NewParam);
	void UpdateTransitionMap();
	void UpdateWarning(const class FString& String);
	void ZombieScream();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Zombie_C">();
	}
	static class AZombie_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AZombie_C>();
	}
};
static_assert(alignof(AZombie_C) == 0x000010, "Wrong alignment on AZombie_C");
static_assert(sizeof(AZombie_C) == 0x000750, "Wrong size on AZombie_C");
static_assert(offsetof(AZombie_C, UberGraphFrame) == 0x000630, "Member 'AZombie_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AZombie_C, BoxSound) == 0x000638, "Member 'AZombie_C::BoxSound' has a wrong offset!");
static_assert(offsetof(AZombie_C, Box) == 0x000640, "Member 'AZombie_C::Box' has a wrong offset!");
static_assert(offsetof(AZombie_C, WW_SurvivorStatus) == 0x000648, "Member 'AZombie_C::WW_SurvivorStatus' has a wrong offset!");
static_assert(offsetof(AZombie_C, WW_RagdollSystem) == 0x000650, "Member 'AZombie_C::WW_RagdollSystem' has a wrong offset!");
static_assert(offsetof(AZombie_C, SmoothNewLocation_NewTrack_0_D9FBD1A5420B8C61010AF681039CE288) == 0x000658, "Member 'AZombie_C::SmoothNewLocation_NewTrack_0_D9FBD1A5420B8C61010AF681039CE288' has a wrong offset!");
static_assert(offsetof(AZombie_C, SmoothNewLocation__Direction_D9FBD1A5420B8C61010AF681039CE288) == 0x00065C, "Member 'AZombie_C::SmoothNewLocation__Direction_D9FBD1A5420B8C61010AF681039CE288' has a wrong offset!");
static_assert(offsetof(AZombie_C, SmoothNewLocation) == 0x000660, "Member 'AZombie_C::SmoothNewLocation' has a wrong offset!");
static_assert(offsetof(AZombie_C, LastRagdollVelocity) == 0x000668, "Member 'AZombie_C::LastRagdollVelocity' has a wrong offset!");
static_assert(offsetof(AZombie_C, RagdollLocation) == 0x000680, "Member 'AZombie_C::RagdollLocation' has a wrong offset!");
static_assert(offsetof(AZombie_C, ServerRagdollPull) == 0x000698, "Member 'AZombie_C::ServerRagdollPull' has a wrong offset!");
static_assert(offsetof(AZombie_C, MainAnimInstance) == 0x0006A0, "Member 'AZombie_C::MainAnimInstance' has a wrong offset!");
static_assert(offsetof(AZombie_C, TargetToGo) == 0x0006A8, "Member 'AZombie_C::TargetToGo' has a wrong offset!");
static_assert(offsetof(AZombie_C, Mantle) == 0x0006B0, "Member 'AZombie_C::Mantle' has a wrong offset!");
static_assert(offsetof(AZombie_C, PlayerKilled) == 0x0006B8, "Member 'AZombie_C::PlayerKilled' has a wrong offset!");
static_assert(offsetof(AZombie_C, TargetRotation) == 0x0006C0, "Member 'AZombie_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(AZombie_C, CurrentMovementSettings) == 0x0006D8, "Member 'AZombie_C::CurrentMovementSettings' has a wrong offset!");
static_assert(offsetof(AZombie_C, CanBeDestroyable_) == 0x0006F8, "Member 'AZombie_C::CanBeDestroyable_' has a wrong offset!");
static_assert(offsetof(AZombie_C, WeaponsHandle) == 0x000700, "Member 'AZombie_C::WeaponsHandle' has a wrong offset!");
static_assert(offsetof(AZombie_C, ScreamSound) == 0x000708, "Member 'AZombie_C::ScreamSound' has a wrong offset!");
static_assert(offsetof(AZombie_C, Jumped_) == 0x000710, "Member 'AZombie_C::Jumped_' has a wrong offset!");
static_assert(offsetof(AZombie_C, IsSprinter_) == 0x000711, "Member 'AZombie_C::IsSprinter_' has a wrong offset!");
static_assert(offsetof(AZombie_C, New_Mesh) == 0x000718, "Member 'AZombie_C::New_Mesh' has a wrong offset!");
static_assert(offsetof(AZombie_C, Materials) == 0x000720, "Member 'AZombie_C::Materials' has a wrong offset!");
static_assert(offsetof(AZombie_C, Hit) == 0x000730, "Member 'AZombie_C::Hit' has a wrong offset!");
static_assert(offsetof(AZombie_C, ZombieSkin) == 0x000734, "Member 'AZombie_C::ZombieSkin' has a wrong offset!");
static_assert(offsetof(AZombie_C, As_GM_Zombie) == 0x000740, "Member 'AZombie_C::As_GM_Zombie' has a wrong offset!");
static_assert(offsetof(AZombie_C, NormalSound) == 0x000748, "Member 'AZombie_C::NormalSound' has a wrong offset!");

}

