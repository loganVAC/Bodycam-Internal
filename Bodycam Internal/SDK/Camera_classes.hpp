#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Camera

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Camera.Camera_C
// 0x00A0 (0x03B8 - 0x0318)
class ACamera_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   LightSphere;                                       // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_HUD_Parallax_Component_C*           BP_HUD_Parallax_Component;                         // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_SecurityCamera_Body;                            // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SphereConnection;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_SecurityCamera_01a;                             // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  VisionPP;                                          // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ACameraControlTable_C*                  ControlTable;                                      // 0x0368(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OrginalRotation;                                   // 0x0370(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Flashlight_ON_;                                    // 0x0388(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetFOV;                                         // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SmoothControlRotation;                             // 0x0398(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCamera_HUD_C*                          Camera_HUD;                                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Camera_HUD_0();
	void ElectricalAction__Server_(const struct FHitResult& Hit);
	void ElectricalEvent__client_();
	void ExecuteUbergraph_Camera(int32 EntryPoint);
	void FlashLight__Multicast_(bool Flashlight_ON__0);
	void FlashLightToggle__Server_();
	void InpActEvt_Escape_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_IA_Fire_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Look_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Take_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_ToggleFlashLight_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void OnRep_Flashlight_ON_();
	void ReceiveBeginPlay();
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveUnpossessed(class AController* OldController);
	void RemoveCameraHUD__Multicast_();
	void SmoothControlRotation__Server_(const struct FRotator& SmoothControlRotation_0);
	void SmoothFOVChanger();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Camera_C">();
	}
	static class ACamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACamera_C>();
	}
};
static_assert(alignof(ACamera_C) == 0x000008, "Wrong alignment on ACamera_C");
static_assert(sizeof(ACamera_C) == 0x0003B8, "Wrong size on ACamera_C");
static_assert(offsetof(ACamera_C, UberGraphFrame) == 0x000318, "Member 'ACamera_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACamera_C, LightSphere) == 0x000320, "Member 'ACamera_C::LightSphere' has a wrong offset!");
static_assert(offsetof(ACamera_C, SpotLight) == 0x000328, "Member 'ACamera_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ACamera_C, BP_HUD_Parallax_Component) == 0x000330, "Member 'ACamera_C::BP_HUD_Parallax_Component' has a wrong offset!");
static_assert(offsetof(ACamera_C, SM_SecurityCamera_Body) == 0x000338, "Member 'ACamera_C::SM_SecurityCamera_Body' has a wrong offset!");
static_assert(offsetof(ACamera_C, SphereConnection) == 0x000340, "Member 'ACamera_C::SphereConnection' has a wrong offset!");
static_assert(offsetof(ACamera_C, Camera) == 0x000348, "Member 'ACamera_C::Camera' has a wrong offset!");
static_assert(offsetof(ACamera_C, SM_SecurityCamera_01a) == 0x000350, "Member 'ACamera_C::SM_SecurityCamera_01a' has a wrong offset!");
static_assert(offsetof(ACamera_C, VisionPP) == 0x000358, "Member 'ACamera_C::VisionPP' has a wrong offset!");
static_assert(offsetof(ACamera_C, DefaultSceneRoot) == 0x000360, "Member 'ACamera_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ACamera_C, ControlTable) == 0x000368, "Member 'ACamera_C::ControlTable' has a wrong offset!");
static_assert(offsetof(ACamera_C, OrginalRotation) == 0x000370, "Member 'ACamera_C::OrginalRotation' has a wrong offset!");
static_assert(offsetof(ACamera_C, Flashlight_ON_) == 0x000388, "Member 'ACamera_C::Flashlight_ON_' has a wrong offset!");
static_assert(offsetof(ACamera_C, TargetFOV) == 0x000390, "Member 'ACamera_C::TargetFOV' has a wrong offset!");
static_assert(offsetof(ACamera_C, SmoothControlRotation) == 0x000398, "Member 'ACamera_C::SmoothControlRotation' has a wrong offset!");
static_assert(offsetof(ACamera_C, Camera_HUD) == 0x0003B0, "Member 'ACamera_C::Camera_HUD' has a wrong offset!");

}

