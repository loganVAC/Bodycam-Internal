#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Bombe

#include "Basic.hpp"

#include "Bombe_classes.hpp"
#include "Bombe_parameters.hpp"


namespace SDK
{

// Function Bombe.Bombe_C.BreakDefuse
// (BlueprintCallable, BlueprintEvent)

void ABombe_C::BreakDefuse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "BreakDefuse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.Calc FuseTime
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABombe_C::Calc_FuseTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Calc FuseTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.CanInterract
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Interract_                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::CanInterract(bool* Interract_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "CanInterract");

	Params::Bombe_C_CanInterract Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Interract_ != nullptr)
		*Interract_ = Parms.Interract_;
}


// Function Bombe.Bombe_C.CanPickup
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AALS_AnimMan_CharacterBP_C*       Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Pickup_                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::CanPickup(class AALS_AnimMan_CharacterBP_C* Player, bool* Pickup_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "CanPickup");

	Params::Bombe_C_CanPickup Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (Pickup_ != nullptr)
		*Pickup_ = Parms.Pickup_;
}


// Function Bombe.Bombe_C.CanSwap?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsItemSwap_                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::CanSwap_(bool* IsItemSwap_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "CanSwap?");

	Params::Bombe_C_CanSwap_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsItemSwap_ != nullptr)
		*IsItemSwap_ = Parms.IsItemSwap_;
}


// Function Bombe.Bombe_C.Defuse
// (BlueprintCallable, BlueprintEvent)

void ABombe_C::Defuse_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Defuse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.DefuseSoundWarning (Multicast)
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABombe_C::DefuseSoundWarning__Multicast_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "DefuseSoundWarning (Multicast)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.Drop
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::Drop(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Drop");

	Params::Bombe_C_Drop Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bombe.Bombe_C.Drop (Server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABombe_C::Drop__Server_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Drop (Server)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.ExecuteUbergraph_Bombe
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::ExecuteUbergraph_Bombe(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "ExecuteUbergraph_Bombe");

	Params::Bombe_C_ExecuteUbergraph_Bombe Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bombe.Bombe_C.Explode (mutlicast)
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABombe_C::Explode__mutlicast_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Explode (mutlicast)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.Explode (Server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABombe_C::Explode__Server_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Explode (Server)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.FusingEffect (Multicast)
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABombe_C::FusingEffect__Multicast_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "FusingEffect (Multicast)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.Get attach Taser Point
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Attach_Point1                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Attach_Point2                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::Get_attach_Taser_Point(class FName* Attach_Point1, class FName* Attach_Point2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Get attach Taser Point");

	Params::Bombe_C_Get_attach_Taser_Point Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Attach_Point1 != nullptr)
		*Attach_Point1 = Parms.Attach_Point1;

	if (Attach_Point2 != nullptr)
		*Attach_Point2 = Parms.Attach_Point2;
}


// Function Bombe.Bombe_C.GetItemPriority
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Priority                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::GetItemPriority(int32* Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "GetItemPriority");

	Params::Bombe_C_GetItemPriority Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Priority != nullptr)
		*Priority = Parms.Priority;
}


// Function Bombe.Bombe_C.GetOffset
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Offset                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::GetOffset(struct FTransform* Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "GetOffset");

	Params::Bombe_C_GetOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Offset != nullptr)
		*Offset = std::move(Parms.Offset);
}


// Function Bombe.Bombe_C.GetOverlay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       Overlay                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::GetOverlay(EALS_OverlayState* Overlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "GetOverlay");

	Params::Bombe_C_GetOverlay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Overlay != nullptr)
		*Overlay = Parms.Overlay;
}


// Function Bombe.Bombe_C.GetSocketToAttach
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketToAttach                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::GetSocketToAttach(class FName* SocketToAttach)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "GetSocketToAttach");

	Params::Bombe_C_GetSocketToAttach Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SocketToAttach != nullptr)
		*SocketToAttach = Parms.SocketToAttach;
}


// Function Bombe.Bombe_C.Defuse
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::Defuse(float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Defuse");

	Params::Bombe_C_Defuse Parms{};

	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bombe.Bombe_C.Interract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABombe_C::Interract(class APawn* Owner_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Interract");

	Params::Bombe_C_Interract Parms{};

	Parms.Owner_0 = Owner_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bombe.Bombe_C.InterractDoor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Z_Angle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ResetDoor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::InterractDoor(double Z_Angle, bool ResetDoor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "InterractDoor");

	Params::Bombe_C_InterractDoor Parms{};

	Parms.Z_Angle = Z_Angle;
	Parms.ResetDoor = ResetDoor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bombe.Bombe_C.Is Stickable?
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Stickable_                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::Is_Stickable_(bool* Stickable_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Is Stickable?");

	Params::Bombe_C_Is_Stickable_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Stickable_ != nullptr)
		*Stickable_ = Parms.Stickable_;
}


// Function Bombe.Bombe_C.IsDefaultHandle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDefaultHandle_                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::IsDefaultHandle(bool* IsDefaultHandle_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "IsDefaultHandle");

	Params::Bombe_C_IsDefaultHandle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDefaultHandle_ != nullptr)
		*IsDefaultHandle_ = Parms.IsDefaultHandle_;
}


// Function Bombe.Bombe_C.Item Focus
// (Public, BlueprintCallable, BlueprintEvent)

void ABombe_C::Item_Focus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Item Focus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.Left Click Release (Client)
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABombe_C::Left_Click_Release__Client_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Left Click Release (Client)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.Left Client event (Client)
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABombe_C::Left_Client_event__Client_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Left Client event (Client)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.LeftClickEvent
// (Public, BlueprintCallable, BlueprintEvent)

void ABombe_C::LeftClickEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "LeftClickEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.LeftClickReleaseEvent
// (Public, BlueprintCallable, BlueprintEvent)

void ABombe_C::LeftClickReleaseEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "LeftClickReleaseEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.Loop Im Here
// (BlueprintCallable, BlueprintEvent)

void ABombe_C::Loop_Im_Here()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Loop Im Here");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.OnRep_BombeActive
// (BlueprintCallable, BlueprintEvent)

void ABombe_C::OnRep_BombeActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "OnRep_BombeActive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.Pickup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AALS_AnimMan_CharacterBP_C*       Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABombe_C::Pickup(class AALS_AnimMan_CharacterBP_C* Owner_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Pickup");

	Params::Bombe_C_Pickup Parms{};

	Parms.Owner_0 = Owner_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bombe.Bombe_C.Pickup (Server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AALS_AnimMan_CharacterBP_C*       PlayerAttached_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABombe_C::Pickup__Server_(class AALS_AnimMan_CharacterBP_C* PlayerAttached_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Pickup (Server)");

	Params::Bombe_C_Pickup__Server_ Parms{};

	Parms.PlayerAttached_0 = PlayerAttached_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bombe.Bombe_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABombe_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.ReceivePointDamage
// (BlueprintAuthorityOnly, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ShotFromDirection                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitInfo                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABombe_C::ReceivePointDamage(float Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "ReceivePointDamage");

	Params::Bombe_C_ReceivePointDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.HitComponent = HitComponent;
	Parms.BoneName = BoneName;
	Parms.ShotFromDirection = std::move(ShotFromDirection);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitInfo = std::move(HitInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bombe.Bombe_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "ReceiveTick");

	Params::Bombe_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bombe.Bombe_C.Set Simulate Physics (Multicast)
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSimulate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::Set_Simulate_Physics__Multicast_(bool bSimulate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Set Simulate Physics (Multicast)");

	Params::Bombe_C_Set_Simulate_Physics__Multicast_ Parms{};

	Parms.bSimulate = bSimulate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bombe.Bombe_C.Start Fuse
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABombe_C::Start_Fuse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Start Fuse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bombe.Bombe_C.SwitchAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     In                                                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Out                                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USoundCue*                        InSound                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USoundCue*                        OutSound                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABombe_C::SwitchAnimation(class UAnimMontage** In, class UAnimMontage** Out, class USoundCue** InSound, class USoundCue** OutSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "SwitchAnimation");

	Params::Bombe_C_SwitchAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (In != nullptr)
		*In = Parms.In;

	if (Out != nullptr)
		*Out = Parms.Out;

	if (InSound != nullptr)
		*InSound = Parms.InSound;

	if (OutSound != nullptr)
		*OutSound = Parms.OutSound;
}


// Function Bombe.Bombe_C.Throw (Multicast)
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InVector                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::Throw__Multicast_(const struct FVector& InVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Throw (Multicast)");

	Params::Bombe_C_Throw__Multicast_ Parms{};

	Parms.InVector = std::move(InVector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bombe.Bombe_C.Throw (Server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InVector                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABombe_C::Throw__Server_(const struct FVector& InVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "Throw (Server)");

	Params::Bombe_C_Throw__Server_ Parms{};

	Parms.InVector = std::move(InVector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bombe.Bombe_C.TryDefuse
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATaserCable_C*                    Cable_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABombe_C::TryDefuse(class ATaserCable_C* Cable_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bombe_C", "TryDefuse");

	Params::Bombe_C_TryDefuse Parms{};

	Parms.Cable_0 = Cable_0;

	UObject::ProcessEvent(Func, &Parms);
}

}

