#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: C3_KickstartBlueprintLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum C3_KickstartBlueprintLibrary.EC3_KBP_SnapDirection
// NumValues: 0x0006
enum class EC3_KBP_SnapDirection : uint8
{
	None                                     = 0,
	LocalForward                             = 1,
	LocalBackward                            = 2,
	LocalLeftSide                            = 3,
	LocalRightSide                           = 4,
	EC3_KBP_MAX                              = 5,
};

// Enum C3_KickstartBlueprintLibrary.EC3_KBP_PrintColor
// NumValues: 0x0006
enum class EC3_KBP_PrintColor : uint8
{
	None                                     = 0,
	Blue                                     = 1,
	Yellow                                   = 2,
	Green                                    = 3,
	Red                                      = 4,
	EC3_KBP_MAX                              = 5,
};

// ScriptStruct C3_KickstartBlueprintLibrary.AllGenericType
// 0x00E0 (0x00E0 - 0x0000)
struct FAllGenericType final
{
public:
	bool                                          A_Bool;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A_Byte;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         A_Int;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A_Float;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   A_Name;                                            // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 A_String;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   A_Text;                                            // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                A_Vector;                                          // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               A_Rotator;                                         // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             A_Transform;                                       // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                A_Object;                                          // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAllGenericType) == 0x000010, "Wrong alignment on FAllGenericType");
static_assert(sizeof(FAllGenericType) == 0x0000E0, "Wrong size on FAllGenericType");
static_assert(offsetof(FAllGenericType, A_Bool) == 0x000000, "Member 'FAllGenericType::A_Bool' has a wrong offset!");
static_assert(offsetof(FAllGenericType, A_Byte) == 0x000001, "Member 'FAllGenericType::A_Byte' has a wrong offset!");
static_assert(offsetof(FAllGenericType, A_Int) == 0x000004, "Member 'FAllGenericType::A_Int' has a wrong offset!");
static_assert(offsetof(FAllGenericType, A_Float) == 0x000008, "Member 'FAllGenericType::A_Float' has a wrong offset!");
static_assert(offsetof(FAllGenericType, A_Name) == 0x00000C, "Member 'FAllGenericType::A_Name' has a wrong offset!");
static_assert(offsetof(FAllGenericType, A_String) == 0x000018, "Member 'FAllGenericType::A_String' has a wrong offset!");
static_assert(offsetof(FAllGenericType, A_Text) == 0x000028, "Member 'FAllGenericType::A_Text' has a wrong offset!");
static_assert(offsetof(FAllGenericType, A_Vector) == 0x000040, "Member 'FAllGenericType::A_Vector' has a wrong offset!");
static_assert(offsetof(FAllGenericType, A_Rotator) == 0x000058, "Member 'FAllGenericType::A_Rotator' has a wrong offset!");
static_assert(offsetof(FAllGenericType, A_Transform) == 0x000070, "Member 'FAllGenericType::A_Transform' has a wrong offset!");
static_assert(offsetof(FAllGenericType, A_Object) == 0x0000D0, "Member 'FAllGenericType::A_Object' has a wrong offset!");

// ScriptStruct C3_KickstartBlueprintLibrary.AllGenericTypeArray
// 0x00B0 (0x00B0 - 0x0000)
struct FAllGenericTypeArray final
{
public:
	TArray<bool>                                  A_Bool;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 A_Byte;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 A_Int;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 A_Float;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           A_Name;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         A_String;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           A_Text;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        A_Vector;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       A_Rotator;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     A_Transform;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        A_Object;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAllGenericTypeArray) == 0x000008, "Wrong alignment on FAllGenericTypeArray");
static_assert(sizeof(FAllGenericTypeArray) == 0x0000B0, "Wrong size on FAllGenericTypeArray");
static_assert(offsetof(FAllGenericTypeArray, A_Bool) == 0x000000, "Member 'FAllGenericTypeArray::A_Bool' has a wrong offset!");
static_assert(offsetof(FAllGenericTypeArray, A_Byte) == 0x000010, "Member 'FAllGenericTypeArray::A_Byte' has a wrong offset!");
static_assert(offsetof(FAllGenericTypeArray, A_Int) == 0x000020, "Member 'FAllGenericTypeArray::A_Int' has a wrong offset!");
static_assert(offsetof(FAllGenericTypeArray, A_Float) == 0x000030, "Member 'FAllGenericTypeArray::A_Float' has a wrong offset!");
static_assert(offsetof(FAllGenericTypeArray, A_Name) == 0x000040, "Member 'FAllGenericTypeArray::A_Name' has a wrong offset!");
static_assert(offsetof(FAllGenericTypeArray, A_String) == 0x000050, "Member 'FAllGenericTypeArray::A_String' has a wrong offset!");
static_assert(offsetof(FAllGenericTypeArray, A_Text) == 0x000060, "Member 'FAllGenericTypeArray::A_Text' has a wrong offset!");
static_assert(offsetof(FAllGenericTypeArray, A_Vector) == 0x000070, "Member 'FAllGenericTypeArray::A_Vector' has a wrong offset!");
static_assert(offsetof(FAllGenericTypeArray, A_Rotator) == 0x000080, "Member 'FAllGenericTypeArray::A_Rotator' has a wrong offset!");
static_assert(offsetof(FAllGenericTypeArray, A_Transform) == 0x000090, "Member 'FAllGenericTypeArray::A_Transform' has a wrong offset!");
static_assert(offsetof(FAllGenericTypeArray, A_Object) == 0x0000A0, "Member 'FAllGenericTypeArray::A_Object' has a wrong offset!");

}

