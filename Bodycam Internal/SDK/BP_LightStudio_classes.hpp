#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightStudio

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightStudio.BP_LightStudio_C
// 0x01D8 (0x0468 - 0x0290)
class ABP_LightStudio_C final : public AActor
{
public:
	class USkyLightComponent*                     SkyLight;                                          // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         ExponentialHeightFog;                              // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PrevisArrow;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Skybox;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        GlobalBrightness;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_HDRI;                                          // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSunLight;                                       // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C2[0x6];                                      // 0x02C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SunBrightness;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunTint;                                           // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StationaryLightForSun;                             // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDirectionalLightComponent*             SunDirectionalLight;                               // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAtmosphere;                                     // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AtmosphereBrightness;                              // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           AtmosphereTint;                                    // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PrevisArrowMaterial;                               // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      SunColorCurve;                                     // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideSunColor;                                  // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AtmosphereDensityMultiplier;                       // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AtmosphereAltitude;                                // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableSunDisk;                                    // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFog;                                            // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34A[0x6];                                      // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FogBrightness;                                     // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FogTint;                                           // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FogAltitude;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FogMaxOpacity;                                     // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FogHeightFalloff;                                  // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FogDensity;                                        // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FogBrightnessCurve;                                // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FogStartDistance;                                  // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableGroundScattering;                           // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AtmosphereDistanceScale;                           // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SkyboxMaterial;                                    // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        HDRI_Brightness;                                   // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HDRI_Contrast;                                     // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HDRI_Tint;                                         // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               HDRI_Cubemap;                                      // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        HDRI_Rotation;                                     // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AtmosphereOpacityHorizon;                          // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AtmosphereOpacityZenith;                           // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HighDensityAtmosphere;                             // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtmosphericFogComponent*               AtmosphericFog;                                    // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSkylight;                                       // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Shadowdistance;                                    // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LightShaftBloom;                                   // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LightShaftOcclusion;                               // 0x0411(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_412[0x6];                                      // 0x0412(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OcclusionMaskDarkness;                             // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BloomScale;                                        // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BloomThreshold;                                    // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 BloomTint;                                         // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AtmosphereFogMultiplier;                           // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AtmosphereDensityHeight;                           // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AtmosphereMaxScatteringOrder;                      // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AtmosphereAltitudeSampleNumber;                    // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     LightFunctionMaterial;                             // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MIC_Black;                                         // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MIC_HDRI;                                          // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AtmosphereDensity();
	void CalculateSunColor();
	void NormalizedSunAngle(double* Angle);
	void SunMobility();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightStudio_C">();
	}
	static class ABP_LightStudio_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightStudio_C>();
	}
};
static_assert(alignof(ABP_LightStudio_C) == 0x000008, "Wrong alignment on ABP_LightStudio_C");
static_assert(sizeof(ABP_LightStudio_C) == 0x000468, "Wrong size on ABP_LightStudio_C");
static_assert(offsetof(ABP_LightStudio_C, SkyLight) == 0x000290, "Member 'ABP_LightStudio_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, ExponentialHeightFog) == 0x000298, "Member 'ABP_LightStudio_C::ExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, PrevisArrow) == 0x0002A0, "Member 'ABP_LightStudio_C::PrevisArrow' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, Skybox) == 0x0002A8, "Member 'ABP_LightStudio_C::Skybox' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, Scene) == 0x0002B0, "Member 'ABP_LightStudio_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, GlobalBrightness) == 0x0002B8, "Member 'ABP_LightStudio_C::GlobalBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, Use_HDRI) == 0x0002C0, "Member 'ABP_LightStudio_C::Use_HDRI' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, UseSunLight) == 0x0002C1, "Member 'ABP_LightStudio_C::UseSunLight' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, SunBrightness) == 0x0002C8, "Member 'ABP_LightStudio_C::SunBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, SunTint) == 0x0002D0, "Member 'ABP_LightStudio_C::SunTint' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, StationaryLightForSun) == 0x0002E0, "Member 'ABP_LightStudio_C::StationaryLightForSun' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, SunDirectionalLight) == 0x0002E8, "Member 'ABP_LightStudio_C::SunDirectionalLight' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, UseAtmosphere) == 0x0002F0, "Member 'ABP_LightStudio_C::UseAtmosphere' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, AtmosphereBrightness) == 0x0002F8, "Member 'ABP_LightStudio_C::AtmosphereBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, AtmosphereTint) == 0x000300, "Member 'ABP_LightStudio_C::AtmosphereTint' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, PrevisArrowMaterial) == 0x000310, "Member 'ABP_LightStudio_C::PrevisArrowMaterial' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, LightColor) == 0x000318, "Member 'ABP_LightStudio_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, SunColorCurve) == 0x000328, "Member 'ABP_LightStudio_C::SunColorCurve' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, OverrideSunColor) == 0x000330, "Member 'ABP_LightStudio_C::OverrideSunColor' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, AtmosphereDensityMultiplier) == 0x000338, "Member 'ABP_LightStudio_C::AtmosphereDensityMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, AtmosphereAltitude) == 0x000340, "Member 'ABP_LightStudio_C::AtmosphereAltitude' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, DisableSunDisk) == 0x000348, "Member 'ABP_LightStudio_C::DisableSunDisk' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, UseFog) == 0x000349, "Member 'ABP_LightStudio_C::UseFog' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, FogBrightness) == 0x000350, "Member 'ABP_LightStudio_C::FogBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, FogTint) == 0x000358, "Member 'ABP_LightStudio_C::FogTint' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, FogAltitude) == 0x000368, "Member 'ABP_LightStudio_C::FogAltitude' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, FogMaxOpacity) == 0x000370, "Member 'ABP_LightStudio_C::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, FogHeightFalloff) == 0x000378, "Member 'ABP_LightStudio_C::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, FogDensity) == 0x000380, "Member 'ABP_LightStudio_C::FogDensity' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, FogBrightnessCurve) == 0x000388, "Member 'ABP_LightStudio_C::FogBrightnessCurve' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, FogStartDistance) == 0x000390, "Member 'ABP_LightStudio_C::FogStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, DisableGroundScattering) == 0x000398, "Member 'ABP_LightStudio_C::DisableGroundScattering' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, AtmosphereDistanceScale) == 0x0003A0, "Member 'ABP_LightStudio_C::AtmosphereDistanceScale' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, SkyboxMaterial) == 0x0003A8, "Member 'ABP_LightStudio_C::SkyboxMaterial' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, HDRI_Brightness) == 0x0003B0, "Member 'ABP_LightStudio_C::HDRI_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, HDRI_Contrast) == 0x0003B8, "Member 'ABP_LightStudio_C::HDRI_Contrast' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, HDRI_Tint) == 0x0003C0, "Member 'ABP_LightStudio_C::HDRI_Tint' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, HDRI_Cubemap) == 0x0003D0, "Member 'ABP_LightStudio_C::HDRI_Cubemap' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, HDRI_Rotation) == 0x0003D8, "Member 'ABP_LightStudio_C::HDRI_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, AtmosphereOpacityHorizon) == 0x0003E0, "Member 'ABP_LightStudio_C::AtmosphereOpacityHorizon' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, AtmosphereOpacityZenith) == 0x0003E8, "Member 'ABP_LightStudio_C::AtmosphereOpacityZenith' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, HighDensityAtmosphere) == 0x0003F0, "Member 'ABP_LightStudio_C::HighDensityAtmosphere' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, AtmosphericFog) == 0x0003F8, "Member 'ABP_LightStudio_C::AtmosphericFog' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, UseSkylight) == 0x000400, "Member 'ABP_LightStudio_C::UseSkylight' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, Shadowdistance) == 0x000408, "Member 'ABP_LightStudio_C::Shadowdistance' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, LightShaftBloom) == 0x000410, "Member 'ABP_LightStudio_C::LightShaftBloom' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, LightShaftOcclusion) == 0x000411, "Member 'ABP_LightStudio_C::LightShaftOcclusion' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, OcclusionMaskDarkness) == 0x000418, "Member 'ABP_LightStudio_C::OcclusionMaskDarkness' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, BloomScale) == 0x000420, "Member 'ABP_LightStudio_C::BloomScale' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, BloomThreshold) == 0x000428, "Member 'ABP_LightStudio_C::BloomThreshold' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, BloomTint) == 0x000430, "Member 'ABP_LightStudio_C::BloomTint' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, AtmosphereFogMultiplier) == 0x000438, "Member 'ABP_LightStudio_C::AtmosphereFogMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, AtmosphereDensityHeight) == 0x000440, "Member 'ABP_LightStudio_C::AtmosphereDensityHeight' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, AtmosphereMaxScatteringOrder) == 0x000448, "Member 'ABP_LightStudio_C::AtmosphereMaxScatteringOrder' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, AtmosphereAltitudeSampleNumber) == 0x00044C, "Member 'ABP_LightStudio_C::AtmosphereAltitudeSampleNumber' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, LightFunctionMaterial) == 0x000450, "Member 'ABP_LightStudio_C::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, MIC_Black) == 0x000458, "Member 'ABP_LightStudio_C::MIC_Black' has a wrong offset!");
static_assert(offsetof(ABP_LightStudio_C, MIC_HDRI) == 0x000460, "Member 'ABP_LightStudio_C::MIC_HDRI' has a wrong offset!");

}

