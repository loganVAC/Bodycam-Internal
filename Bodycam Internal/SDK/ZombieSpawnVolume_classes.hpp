#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ZombieSpawnVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "EN_WaveClass_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ZombieSpawnVolume.ZombieSpawnVolume_C
// 0x0060 (0x02F0 - 0x0290)
class AZombieSpawnVolume_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                In_Box_Extent;                                     // 0x02A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class AZombieSpawnVolume_C*>           NearestSpawn;                                      // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	class AGM_Zombie_C*                           GM;                                                // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnInZone;                                       // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IndexWaveMin;                                      // 0x02DC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Valid_;                                            // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGT_zombie_C*                           GT_Zombie;                                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	bool CanReachDestination(const struct FVector& PathStart, const struct FVector& PathEnd, double* Lenght);
	void ConnectionInfos(const struct FLinearColor& Color);
	void ElectricalAction();
	void EndWave(int32 Wave, EN_WaveClass EN_WaveClass);
	void ExecuteUbergraph_ZombieSpawnVolume(int32 EntryPoint);
	void Get2CloseOtherSpawn();
	void NewWaves(int32 Wave, EN_WaveClass EN_WaveClass);
	void ReceiveBeginPlay();
	void SpawnAvailable(bool* CanSpawn_);
	void SpawnScreamer(bool Destroy_);
	void SpawnZombieEvent();
	void SpawnZombies__Server_();
	void UpdatePower(bool On_);
	void UserConstructionScript();
	void ZombieSounds__Multicast_();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ZombieSpawnVolume_C">();
	}
	static class AZombieSpawnVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AZombieSpawnVolume_C>();
	}
};
static_assert(alignof(AZombieSpawnVolume_C) == 0x000008, "Wrong alignment on AZombieSpawnVolume_C");
static_assert(sizeof(AZombieSpawnVolume_C) == 0x0002F0, "Wrong size on AZombieSpawnVolume_C");
static_assert(offsetof(AZombieSpawnVolume_C, UberGraphFrame) == 0x000290, "Member 'AZombieSpawnVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AZombieSpawnVolume_C, Box) == 0x000298, "Member 'AZombieSpawnVolume_C::Box' has a wrong offset!");
static_assert(offsetof(AZombieSpawnVolume_C, DefaultSceneRoot) == 0x0002A0, "Member 'AZombieSpawnVolume_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AZombieSpawnVolume_C, In_Box_Extent) == 0x0002A8, "Member 'AZombieSpawnVolume_C::In_Box_Extent' has a wrong offset!");
static_assert(offsetof(AZombieSpawnVolume_C, NearestSpawn) == 0x0002C0, "Member 'AZombieSpawnVolume_C::NearestSpawn' has a wrong offset!");
static_assert(offsetof(AZombieSpawnVolume_C, GM) == 0x0002D0, "Member 'AZombieSpawnVolume_C::GM' has a wrong offset!");
static_assert(offsetof(AZombieSpawnVolume_C, SpawnInZone) == 0x0002D8, "Member 'AZombieSpawnVolume_C::SpawnInZone' has a wrong offset!");
static_assert(offsetof(AZombieSpawnVolume_C, IndexWaveMin) == 0x0002DC, "Member 'AZombieSpawnVolume_C::IndexWaveMin' has a wrong offset!");
static_assert(offsetof(AZombieSpawnVolume_C, Valid_) == 0x0002E0, "Member 'AZombieSpawnVolume_C::Valid_' has a wrong offset!");
static_assert(offsetof(AZombieSpawnVolume_C, Index_0) == 0x0002E4, "Member 'AZombieSpawnVolume_C::Index_0' has a wrong offset!");
static_assert(offsetof(AZombieSpawnVolume_C, GT_Zombie) == 0x0002E8, "Member 'AZombieSpawnVolume_C::GT_Zombie' has a wrong offset!");

}

