#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Zombie

#include "Basic.hpp"

#include "Zombie_classes.hpp"
#include "Zombie_parameters.hpp"


namespace SDK
{

// Function Zombie.Zombie_C.ApplyPointDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RagdollForce                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ShotFromDirection                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerController*                KillerPC                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    DisableHeadShot                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::ApplyPointDamage(double Damage, double RagdollForce, class FName BoneName, const struct FVector& Location, const struct FVector& ShotFromDirection, class APlayerController* KillerPC, bool DisableHeadShot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "ApplyPointDamage");

	Params::Zombie_C_ApplyPointDamage Parms{};

	Parms.Damage = Damage;
	Parms.RagdollForce = RagdollForce;
	Parms.BoneName = BoneName;
	Parms.Location = std::move(Location);
	Parms.ShotFromDirection = std::move(ShotFromDirection);
	Parms.KillerPC = KillerPC;
	Parms.DisableHeadShot = DisableHeadShot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit_0                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AZombie_C::BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");

	Params::Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit_0 = std::move(Hit_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AZombie_C::BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");

	Params::Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AZombie_C::BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");

	Params::Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.BoneDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             bone                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DamageFinal                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::BoneDamage(class FName bone, double Damage, double* DamageFinal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BoneDamage");

	Params::Zombie_C_BoneDamage Parms{};

	Parms.bone = bone;
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);

	if (DamageFinal != nullptr)
		*DamageFinal = Parms.DamageFinal;
}


// Function Zombie.Zombie_C.BPI_Death
// (Public, BlueprintCallable, BlueprintEvent)

void AZombie_C::BPI_Death()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BPI_Death");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.BPI_Get_CurrentStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           PawnMovementMode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementState                      MovementState                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementState                      PrevMovementState                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementAction                     MovementAction                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_RotationMode                       RotationMode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Gait                               ActualGait                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Stance                             ActualStance                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_ViewMode                           ViewMode                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_OverlayState                       OverlayState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_OverlayState                       OverlayState__Client_                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* MovementState, EALS_MovementState* PrevMovementState, EALS_MovementAction* MovementAction, EALS_RotationMode* RotationMode, EALS_Gait* ActualGait, EALS_Stance* ActualStance, EALS_ViewMode* ViewMode, EALS_OverlayState* OverlayState, EALS_OverlayState* OverlayState__Client_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BPI_Get_CurrentStates");

	Params::Zombie_C_BPI_Get_CurrentStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PawnMovementMode != nullptr)
		*PawnMovementMode = Parms.PawnMovementMode;

	if (MovementState != nullptr)
		*MovementState = Parms.MovementState;

	if (PrevMovementState != nullptr)
		*PrevMovementState = Parms.PrevMovementState;

	if (MovementAction != nullptr)
		*MovementAction = Parms.MovementAction;

	if (RotationMode != nullptr)
		*RotationMode = Parms.RotationMode;

	if (ActualGait != nullptr)
		*ActualGait = Parms.ActualGait;

	if (ActualStance != nullptr)
		*ActualStance = Parms.ActualStance;

	if (ViewMode != nullptr)
		*ViewMode = Parms.ViewMode;

	if (OverlayState != nullptr)
		*OverlayState = Parms.OverlayState;

	if (OverlayState__Client_ != nullptr)
		*OverlayState__Client_ = Parms.OverlayState__Client_;
}


// Function Zombie.Zombie_C.BPI_Get_EssentialValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Acceleration                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MovementInput                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMoving                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasMovementInput                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MovementInputAmount                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         AimingRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  AimYawRate                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Acceleration, struct FVector* MovementInput, bool* IsMoving, bool* HasMovementInput, double* Speed, double* MovementInputAmount, struct FRotator* AimingRotation, double* AimYawRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BPI_Get_EssentialValues");

	Params::Zombie_C_BPI_Get_EssentialValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (Acceleration != nullptr)
		*Acceleration = std::move(Parms.Acceleration);

	if (MovementInput != nullptr)
		*MovementInput = std::move(Parms.MovementInput);

	if (IsMoving != nullptr)
		*IsMoving = Parms.IsMoving;

	if (HasMovementInput != nullptr)
		*HasMovementInput = Parms.HasMovementInput;

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (MovementInputAmount != nullptr)
		*MovementInputAmount = Parms.MovementInputAmount;

	if (AimingRotation != nullptr)
		*AimingRotation = std::move(Parms.AimingRotation);

	if (AimYawRate != nullptr)
		*AimYawRate = Parms.AimYawRate;
}


// Function Zombie.Zombie_C.BPI_Set_Gait
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               NewGait                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::BPI_Set_Gait(EALS_Gait NewGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BPI_Set_Gait");

	Params::Zombie_C_BPI_Set_Gait Parms{};

	Parms.NewGait = NewGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.BPI_Set_MovementAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementAction                     NewMovementAction                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::BPI_Set_MovementAction(EALS_MovementAction NewMovementAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BPI_Set_MovementAction");

	Params::Zombie_C_BPI_Set_MovementAction Parms{};

	Parms.NewMovementAction = NewMovementAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.BPI_Set_MovementState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementState                      NewMovementState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::BPI_Set_MovementState(EALS_MovementState NewMovementState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BPI_Set_MovementState");

	Params::Zombie_C_BPI_Set_MovementState Parms{};

	Parms.NewMovementState = NewMovementState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.BPI_Set_OverlayState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       NewOverlayState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::BPI_Set_OverlayState(EALS_OverlayState NewOverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BPI_Set_OverlayState");

	Params::Zombie_C_BPI_Set_OverlayState Parms{};

	Parms.NewOverlayState = NewOverlayState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.BPI_Set_RotationMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_RotationMode                       NewRotationMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::BPI_Set_RotationMode(EALS_RotationMode NewRotationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BPI_Set_RotationMode");

	Params::Zombie_C_BPI_Set_RotationMode Parms{};

	Parms.NewRotationMode = NewRotationMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.BPI_Set_ViewMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_ViewMode                           NewViewMode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::BPI_Set_ViewMode(EALS_ViewMode NewViewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BPI_Set_ViewMode");

	Params::Zombie_C_BPI_Set_ViewMode Parms{};

	Parms.NewViewMode = NewViewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.BreakTimer
// (Public, BlueprintCallable, BlueprintEvent)

void AZombie_C::BreakTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "BreakTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.CanCreateKickVote
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanCreateKickVote_                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::CanCreateKickVote(bool* CanCreateKickVote_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "CanCreateKickVote");

	Params::Zombie_C_CanCreateKickVote Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanCreateKickVote_ != nullptr)
		*CanCreateKickVote_ = Parms.CanCreateKickVote_;
}


// Function Zombie.Zombie_C.CanKickThisPlayer?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    True_                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::CanKickThisPlayer_(const class FString& PlayerID, bool* True_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "CanKickThisPlayer?");

	Params::Zombie_C_CanKickThisPlayer_ Parms{};

	Parms.PlayerID = std::move(PlayerID);

	UObject::ProcessEvent(Func, &Parms);

	if (True_ != nullptr)
		*True_ = Parms.True_;
}


// Function Zombie.Zombie_C.CanReachDestination
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          PathStart                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PathEnd                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PathLenght                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AZombie_C::CanReachDestination(const struct FVector& PathStart, const struct FVector& PathEnd, double* PathLenght)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "CanReachDestination");

	Params::Zombie_C_CanReachDestination Parms{};

	Parms.PathStart = std::move(PathStart);
	Parms.PathEnd = std::move(PathEnd);

	UObject::ProcessEvent(Func, &Parms);

	if (PathLenght != nullptr)
		*PathLenght = Parms.PathLenght;

	return Parms.ReturnValue;
}


// Function Zombie.Zombie_C.ClearMap
// (Public, BlueprintCallable, BlueprintEvent)

void AZombie_C::ClearMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "ClearMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.Died (Server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AZombie_C::Died__Server_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "Died (Server)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.Event Ragdoll End
// (Public, BlueprintCallable, BlueprintEvent)

void AZombie_C::Event_Ragdoll_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "Event Ragdoll End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.EventRagdollStart
// (Public, BlueprintCallable, BlueprintEvent)

void AZombie_C::EventRagdollStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "EventRagdollStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.ExecuteUbergraph_Zombie
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::ExecuteUbergraph_Zombie(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "ExecuteUbergraph_Zombie");

	Params::Zombie_C_ExecuteUbergraph_Zombie Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.Get BP Menu Controller Component
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MenuControllerComponent_C*    BP_Menu_Controller_Component                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AZombie_C::Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "Get BP Menu Controller Component");

	Params::Zombie_C_Get_BP_Menu_Controller_Component Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BP_Menu_Controller_Component != nullptr)
		*BP_Menu_Controller_Component = Parms.BP_Menu_Controller_Component;
}


// Function Zombie.Zombie_C.Get Stamina
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Stamina                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::Get_Stamina(double* Stamina)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "Get Stamina");

	Params::Zombie_C_Get_Stamina Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Stamina != nullptr)
		*Stamina = Parms.Stamina;
}


// Function Zombie.Zombie_C.GetBlured
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Blured                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::GetBlured(double* Blured)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetBlured");

	Params::Zombie_C_GetBlured Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Blured != nullptr)
		*Blured = Parms.Blured;
}


// Function Zombie.Zombie_C.GetBurnedRef
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  BurnedMesh                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AZombie_C::GetBurnedRef(class USceneComponent** BurnedMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetBurnedRef");

	Params::Zombie_C_GetBurnedRef Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BurnedMesh != nullptr)
		*BurnedMesh = Parms.BurnedMesh;
}


// Function Zombie.Zombie_C.GetFlashBangEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  FlashEffect                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::GetFlashBangEffect(double* FlashEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetFlashBangEffect");

	Params::Zombie_C_GetFlashBangEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FlashEffect != nullptr)
		*FlashEffect = Parms.FlashEffect;
}


// Function Zombie.Zombie_C.GetGameMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_GamemodeWinInfo             GameMode                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::GetGameMode(struct FSTR_GamemodeWinInfo* GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetGameMode");

	Params::Zombie_C_GetGameMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GameMode != nullptr)
		*GameMode = std::move(Parms.GameMode);
}


// Function Zombie.Zombie_C.GetHealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Health                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::GetHealth(double* Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetHealth");

	Params::Zombie_C_GetHealth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Health != nullptr)
		*Health = Parms.Health;
}


// Function Zombie.Zombie_C.GetKickedPlayerVoted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   KickplayerAlreadyVote                                  (Parm, OutParm)

void AZombie_C::GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetKickedPlayerVoted");

	Params::Zombie_C_GetKickedPlayerVoted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KickplayerAlreadyVote != nullptr)
		*KickplayerAlreadyVote = std::move(Parms.KickplayerAlreadyVote);
}


// Function Zombie.Zombie_C.GetMappedSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AZombie_C::GetMappedSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetMappedSpeed");

	Params::Zombie_C_GetMappedSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Zombie.Zombie_C.GetMenuSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MenuControllerComponent_C*    Bp_MenuController                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AZombie_C::GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetMenuSettings");

	Params::Zombie_C_GetMenuSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bp_MenuController != nullptr)
		*Bp_MenuController = Parms.Bp_MenuController;
}


// Function Zombie.Zombie_C.GetMutePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   MutePlayer                                             (Parm, OutParm)

void AZombie_C::GetMutePlayer(TArray<class FString>* MutePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetMutePlayer");

	Params::Zombie_C_GetMutePlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MutePlayer != nullptr)
		*MutePlayer = std::move(Parms.MutePlayer);
}


// Function Zombie.Zombie_C.GetPlayerConnected
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_PCInfo>              PlayerConnected                                        (Parm, OutParm)

void AZombie_C::GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetPlayerConnected");

	Params::Zombie_C_GetPlayerConnected Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerConnected != nullptr)
		*PlayerConnected = std::move(Parms.PlayerConnected);
}


// Function Zombie.Zombie_C.GetPlayerKickVote
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_KickVote>            KickVotePlayer                                         (Parm, OutParm)

void AZombie_C::GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetPlayerKickVote");

	Params::Zombie_C_GetPlayerKickVote Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KickVotePlayer != nullptr)
		*KickVotePlayer = std::move(Parms.KickVotePlayer);
}


// Function Zombie.Zombie_C.GetPlayerSkin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_TEST                        Player_Skin                                            (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Valid_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetPlayerSkin");

	Params::Zombie_C_GetPlayerSkin Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player_Skin != nullptr)
		*Player_Skin = std::move(Parms.Player_Skin);

	if (Valid_ != nullptr)
		*Valid_ = Parms.Valid_;
}


// Function Zombie.Zombie_C.GetRagdollSystem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWW_RagdollSystem_C*              Ragdoll_System                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AZombie_C::GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetRagdollSystem");

	Params::Zombie_C_GetRagdollSystem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ragdoll_System != nullptr)
		*Ragdoll_System = Parms.Ragdoll_System;
}


// Function Zombie.Zombie_C.GetRandomSpeed
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AZombie_C::GetRandomSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetRandomSpeed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.GetReady?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReady_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::GetReady_(bool* IsReady_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetReady?");

	Params::Zombie_C_GetReady_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsReady_ != nullptr)
		*IsReady_ = Parms.IsReady_;
}


// Function Zombie.Zombie_C.GetServerSteamID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AZombie_C::GetServerSteamID(class FString* SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetServerSteamID");

	Params::Zombie_C_GetServerSteamID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SteamID != nullptr)
		*SteamID = std::move(Parms.SteamID);
}


// Function Zombie.Zombie_C.GetSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AZombie_C::GetSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetSpeed");

	Params::Zombie_C_GetSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Zombie.Zombie_C.GetStarterWeapons
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_Actor>               Weapons                                                (Parm, OutParm)

void AZombie_C::GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetStarterWeapons");

	Params::Zombie_C_GetStarterWeapons Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Weapons != nullptr)
		*Weapons = std::move(Parms.Weapons);
}


// Function Zombie.Zombie_C.GetSteamID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AZombie_C::GetSteamID(class FString* SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetSteamID");

	Params::Zombie_C_GetSteamID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SteamID != nullptr)
		*SteamID = std::move(Parms.SteamID);
}


// Function Zombie.Zombie_C.GetSurvivorStatuts
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWW_SurvivorStatus_C*             SurvivorComponant                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AZombie_C::GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetSurvivorStatuts");

	Params::Zombie_C_GetSurvivorStatuts Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SurvivorComponant != nullptr)
		*SurvivorComponant = Parms.SurvivorComponant;
}


// Function Zombie.Zombie_C.GetTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::GetTeam(E_Team* Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetTeam");

	Params::Zombie_C_GetTeam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Team != nullptr)
		*Team = Parms.Team;
}


// Function Zombie.Zombie_C.GetTeamList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSTR_PCInfo>              Info                                                   (Parm, OutParm)

void AZombie_C::GetTeamList(E_Team Team, TArray<struct FSTR_PCInfo>* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetTeamList");

	Params::Zombie_C_GetTeamList Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (Info != nullptr)
		*Info = std::move(Parms.Info);
}


// Function Zombie.Zombie_C.GetTopScore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_PCInfo>              TopScore                                               (Parm, OutParm)

void AZombie_C::GetTopScore(TArray<struct FSTR_PCInfo>* TopScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "GetTopScore");

	Params::Zombie_C_GetTopScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TopScore != nullptr)
		*TopScore = std::move(Parms.TopScore);
}


// Function Zombie.Zombie_C.InitScoreBoard
// (Public, BlueprintCallable, BlueprintEvent)

void AZombie_C::InitScoreBoard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "InitScoreBoard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.IsDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dead_                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::IsDead(bool* Dead_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "IsDead");

	Params::Zombie_C_IsDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dead_ != nullptr)
		*Dead_ = Parms.Dead_;
}


// Function Zombie.Zombie_C.IsDestroyabe?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Destroyable_                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::IsDestroyabe_(bool* Destroyable_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "IsDestroyabe?");

	Params::Zombie_C_IsDestroyabe_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Destroyable_ != nullptr)
		*Destroyable_ = Parms.Destroyable_;
}


// Function Zombie.Zombie_C.IsReady?
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReady__0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::IsReady_(bool IsReady__0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "IsReady?");

	Params::Zombie_C_IsReady_ Parms{};

	Parms.IsReady__0 = IsReady__0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.IsStress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Yes_                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::IsStress(bool* Yes_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "IsStress");

	Params::Zombie_C_IsStress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Yes_ != nullptr)
		*Yes_ = Parms.Yes_;
}


// Function Zombie.Zombie_C.IsTalking?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTalking__0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::IsTalking_(bool* IsTalking__0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "IsTalking?");

	Params::Zombie_C_IsTalking_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTalking__0 != nullptr)
		*IsTalking__0 = Parms.IsTalking__0;
}


// Function Zombie.Zombie_C.JumpAttack
// (BlueprintCallable, BlueprintEvent)

void AZombie_C::JumpAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "JumpAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.Kick?
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AZombie_C::Kick_(const struct FSTR_PCInfo& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "Kick?");

	Params::Zombie_C_Kick_ Parms{};

	Parms.Target = std::move(Target);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.KickPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_KickVote                    PlayerInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AZombie_C::KickPlayer(const struct FSTR_KickVote& PlayerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "KickPlayer");

	Params::Zombie_C_KickPlayer Parms{};

	Parms.PlayerInfo = std::move(PlayerInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.MuteID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AZombie_C::MuteID(const class FString& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "MuteID");

	Params::Zombie_C_MuteID Parms{};

	Parms.SteamID = std::move(SteamID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.NewKickVote
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AZombie_C::NewKickVote(const struct FSTR_PCInfo& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "NewKickVote");

	Params::Zombie_C_NewKickVote Parms{};

	Parms.Target = std::move(Target);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnBlendOut_51E0283846B84EF1D5A1089E527759EB
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnBlendOut_51E0283846B84EF1D5A1089E527759EB(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnBlendOut_51E0283846B84EF1D5A1089E527759EB");

	Params::Zombie_C_OnBlendOut_51E0283846B84EF1D5A1089E527759EB Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnBlendOut_588418C1439E8F322E510C896D6B1D47
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnBlendOut_588418C1439E8F322E510C896D6B1D47(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnBlendOut_588418C1439E8F322E510C896D6B1D47");

	Params::Zombie_C_OnBlendOut_588418C1439E8F322E510C896D6B1D47 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnCompleted_51E0283846B84EF1D5A1089E527759EB
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnCompleted_51E0283846B84EF1D5A1089E527759EB(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnCompleted_51E0283846B84EF1D5A1089E527759EB");

	Params::Zombie_C_OnCompleted_51E0283846B84EF1D5A1089E527759EB Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnCompleted_588418C1439E8F322E510C896D6B1D47
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnCompleted_588418C1439E8F322E510C896D6B1D47(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnCompleted_588418C1439E8F322E510C896D6B1D47");

	Params::Zombie_C_OnCompleted_588418C1439E8F322E510C896D6B1D47 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnFail_1E20234A4E4A5354DF248D943913FED2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPathFollowingResult                    MovementResult                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnFail_1E20234A4E4A5354DF248D943913FED2(EPathFollowingResult MovementResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnFail_1E20234A4E4A5354DF248D943913FED2");

	Params::Zombie_C_OnFail_1E20234A4E4A5354DF248D943913FED2 Parms{};

	Parms.MovementResult = MovementResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnInterrupted_51E0283846B84EF1D5A1089E527759EB
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnInterrupted_51E0283846B84EF1D5A1089E527759EB(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnInterrupted_51E0283846B84EF1D5A1089E527759EB");

	Params::Zombie_C_OnInterrupted_51E0283846B84EF1D5A1089E527759EB Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnInterrupted_588418C1439E8F322E510C896D6B1D47
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnInterrupted_588418C1439E8F322E510C896D6B1D47(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnInterrupted_588418C1439E8F322E510C896D6B1D47");

	Params::Zombie_C_OnInterrupted_588418C1439E8F322E510C896D6B1D47 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnNotifyBegin_51E0283846B84EF1D5A1089E527759EB
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnNotifyBegin_51E0283846B84EF1D5A1089E527759EB(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnNotifyBegin_51E0283846B84EF1D5A1089E527759EB");

	Params::Zombie_C_OnNotifyBegin_51E0283846B84EF1D5A1089E527759EB Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnNotifyBegin_588418C1439E8F322E510C896D6B1D47
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnNotifyBegin_588418C1439E8F322E510C896D6B1D47(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnNotifyBegin_588418C1439E8F322E510C896D6B1D47");

	Params::Zombie_C_OnNotifyBegin_588418C1439E8F322E510C896D6B1D47 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnNotifyEnd_51E0283846B84EF1D5A1089E527759EB
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnNotifyEnd_51E0283846B84EF1D5A1089E527759EB(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnNotifyEnd_51E0283846B84EF1D5A1089E527759EB");

	Params::Zombie_C_OnNotifyEnd_51E0283846B84EF1D5A1089E527759EB Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnNotifyEnd_588418C1439E8F322E510C896D6B1D47
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnNotifyEnd_588418C1439E8F322E510C896D6B1D47(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnNotifyEnd_588418C1439E8F322E510C896D6B1D47");

	Params::Zombie_C_OnNotifyEnd_588418C1439E8F322E510C896D6B1D47 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnPlayerDeath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PC                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnPlayerDeath(class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnPlayerDeath");

	Params::Zombie_C_OnPlayerDeath Parms{};

	Parms.PC = PC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnRep_ZombieSkin
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void AZombie_C::OnRep_ZombieSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnRep_ZombieSkin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.OnSuccess_1E20234A4E4A5354DF248D943913FED2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPathFollowingResult                    MovementResult                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnSuccess_1E20234A4E4A5354DF248D943913FED2(EPathFollowingResult MovementResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnSuccess_1E20234A4E4A5354DF248D943913FED2");

	Params::Zombie_C_OnSuccess_1E20234A4E4A5354DF248D943913FED2 Parms{};

	Parms.MovementResult = MovementResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.OnTrySelectTeam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::OnTrySelectTeam(E_Team Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "OnTrySelectTeam");

	Params::Zombie_C_OnTrySelectTeam Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.PassTroughtWindows
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          DestLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AZombie_C::PassTroughtWindows(const struct FVector& DestLocation, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "PassTroughtWindows");

	Params::Zombie_C_PassTroughtWindows Parms{};

	Parms.DestLocation = std::move(DestLocation);
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.Play Anim Montage (Multicast)
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     MontageToPlay                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::Play_Anim_Montage__Multicast_(class UAnimMontage* MontageToPlay, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "Play Anim Montage (Multicast)");

	Params::Zombie_C_Play_Anim_Montage__Multicast_ Parms{};

	Parms.MontageToPlay = MontageToPlay;
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.PlayMontage (Multicast)
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AZombie_C::PlayMontage__Multicast_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "PlayMontage (Multicast)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.RagdollUpdate
// (Public, BlueprintCallable, BlueprintEvent)

void AZombie_C::RagdollUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "RagdollUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.RagdollUpdateLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AZombie_C::RagdollUpdateLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "RagdollUpdateLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.RandomSkin (Multicast)
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    NewMesh                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInterface*>       Materials_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AZombie_C::RandomSkin__Multicast_(class USkeletalMesh* NewMesh, TArray<class UMaterialInterface*>& Materials_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "RandomSkin (Multicast)");

	Params::Zombie_C_RandomSkin__Multicast_ Parms{};

	Parms.NewMesh = NewMesh;
	Parms.Materials_0 = std::move(Materials_0);

	UObject::ProcessEvent(Func, &Parms);

	Materials_0 = std::move(Parms.Materials_0);
}


// Function Zombie.Zombie_C.RandomSkin (Server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AZombie_C::RandomSkin__Server_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "RandomSkin (Server)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AZombie_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void AZombie_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.ReceiveRadialDamage
// (BlueprintAuthorityOnly, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   DamageReceived                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Origin                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitInfo                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AZombie_C::ReceiveRadialDamage(float DamageReceived, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "ReceiveRadialDamage");

	Params::Zombie_C_ReceiveRadialDamage Parms{};

	Parms.DamageReceived = DamageReceived;
	Parms.DamageType = DamageType;
	Parms.Origin = std::move(Origin);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "ReceiveTick");

	Params::Zombie_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.ServerTravel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::ServerTravel(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "ServerTravel");

	Params::Zombie_C_ServerTravel Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.Slomo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Slomo_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::Slomo(double Slomo_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "Slomo");

	Params::Zombie_C_Slomo Parms{};

	Parms.Slomo_0 = Slomo_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.SmoothCharacterRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  TargetInterpSpeed_Const_                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ActorInterpSpeed_Smooth_                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::SmoothCharacterRotation(const struct FRotator& Target, double TargetInterpSpeed_Const_, double ActorInterpSpeed_Smooth_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "SmoothCharacterRotation");

	Params::Zombie_C_SmoothCharacterRotation Parms{};

	Parms.Target = std::move(Target);
	Parms.TargetInterpSpeed_Const_ = TargetInterpSpeed_Const_;
	Parms.ActorInterpSpeed_Smooth_ = ActorInterpSpeed_Smooth_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.SmoothNewLocation__FinishedFunc
// (BlueprintEvent)

void AZombie_C::SmoothNewLocation__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "SmoothNewLocation__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.SmoothNewLocation__UpdateFunc
// (BlueprintEvent)

void AZombie_C::SmoothNewLocation__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "SmoothNewLocation__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.Talk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTalking                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::Talk(bool IsTalking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "Talk");

	Params::Zombie_C_Talk Parms{};

	Parms.IsTalking = IsTalking;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.Target Distance
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AZombie_C::Target_Distance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "Target Distance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.TryGrab
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AZombie_C::TryGrab()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "TryGrab");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.UpdateGamemode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameMode                               GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::UpdateGamemode(EGameMode GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "UpdateGamemode");

	Params::Zombie_C_UpdateGamemode Parms{};

	Parms.GameMode = GameMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.UpdateGroudedRotation
// (Public, BlueprintCallable, BlueprintEvent)

void AZombie_C::UpdateGroudedRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "UpdateGroudedRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.UpdateKickVote
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Yes_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "UpdateKickVote");

	Params::Zombie_C_UpdateKickVote Parms{};

	Parms.Target = std::move(Target);
	Parms.Yes_ = Yes_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.UpdateMapSelection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Selected_Level_Name                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "UpdateMapSelection");

	Params::Zombie_C_UpdateMapSelection Parms{};

	Parms.Selected_Level_Name = Selected_Level_Name;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.UpdateModeInfo
// (Public, BlueprintCallable, BlueprintEvent)

void AZombie_C::UpdateModeInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "UpdateModeInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.UpdateScore
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_Score                       Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::UpdateScore(const struct FSTR_Score& Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "UpdateScore");

	Params::Zombie_C_UpdateScore Parms{};

	Parms.Score = std::move(Score);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.UpdateTarget
// (BlueprintCallable, BlueprintEvent)

void AZombie_C::UpdateTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "UpdateTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.UpdateTeamIndex (PlayerKilled)
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team_PlayerKilled_                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MilitaryIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TerroristIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Team                                  WiiningTeam                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "UpdateTeamIndex (PlayerKilled)");

	Params::Zombie_C_UpdateTeamIndex__PlayerKilled_ Parms{};

	Parms.Team_PlayerKilled_ = Team_PlayerKilled_;
	Parms.MilitaryIndex = MilitaryIndex;
	Parms.TerroristIndex = TerroristIndex;
	Parms.WiiningTeam = WiiningTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.UpdateTeamXP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Win_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombie_C::UpdateTeamXP(bool Win_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "UpdateTeamXP");

	Params::Zombie_C_UpdateTeamXP Parms{};

	Parms.Win_ = Win_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.UpdateTimer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TimeCount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void AZombie_C::UpdateTimer(double TimeCount, const class FText& NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "UpdateTimer");

	Params::Zombie_C_UpdateTimer Parms{};

	Parms.TimeCount = TimeCount;
	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.UpdateTransitionMap
// (Public, BlueprintCallable, BlueprintEvent)

void AZombie_C::UpdateTransitionMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "UpdateTransitionMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Zombie.Zombie_C.UpdateWarning
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           String                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AZombie_C::UpdateWarning(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "UpdateWarning");

	Params::Zombie_C_UpdateWarning Parms{};

	Parms.String = std::move(String);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Zombie.Zombie_C.ZombieScream
// (BlueprintCallable, BlueprintEvent)

void AZombie_C::ZombieScream()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Zombie_C", "ZombieScream");

	UObject::ProcessEvent(Func, nullptr);
}

}

