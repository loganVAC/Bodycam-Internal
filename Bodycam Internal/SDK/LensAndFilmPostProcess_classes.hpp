#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LensAndFilmPostProcess

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BlurTypeEnum_structs.hpp"
#include "UnsharpTypeEnum_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass LensAndFilmPostProcess.LensAndFilmPostProcess_C
// 0x0250 (0x04E0 - 0x0290)
class ALensAndFilmPostProcess_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_RuntimeUpdate__Direction_88899CD645AF6163B33864B03EC1AF86; // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_RuntimeUpdate;                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     BlurRegularMaterial;                               // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     BlurHemisphereMaterial;                            // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     BlurGaussianMaterial;                              // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     FilmMaterialGrain;                                 // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     FilmMaterialGrunge;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     FilmMaterialBoth;                                  // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     AberrationMaterial;                                // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     DistortionMaterial;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     SharpenMaterial;                                   // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     ColorAdjustmentMaterial;                           // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     LightLeaksMaterial;                                // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     ColorAdjustmentWithLightLeaksMaterial;             // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TArray<struct FWeightedBlendable>             PostProcessMaterials;                              // 0x0318(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	bool                                          Blur;                                              // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChromaticAberration;                               // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LensDistortion;                                    // 0x032A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UnsharpMasking;                                    // 0x032B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FilmGrain;                                         // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FilmGrunge;                                        // 0x032D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ColorAdjustment;                                   // 0x032E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBlurTypeEnum                                 BlurType;                                          // 0x032F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlurRadius;                                        // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlurRadiusConstant;                                // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlurFadeExponent;                                  // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         BlurQuality;                                       // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cyan;                                              // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Magenta;                                           // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Yellow_;                                           // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AberrationFadeExponent;                            // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistortionAmount;                                  // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SharpenIntensity;                                  // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Balance;                                           // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UnsharpBlurRadius;                                 // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         UnsharpBlurQuality;                                // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        GrainAmount;                                       // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GrainScale;                                        // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GrainRate;                                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GrainDesaturation;                                 // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShadowsDesaturation;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShadowsDesaturationThreshold;                      // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShadowsDesaturationNoise;                          // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             GrainTexture;                                      // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        GrungeDensity1;                                    // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GrungeDensity2;                                    // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GrungeFPS;                                         // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             GrungeTexture;                                     // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          LightLeaks;                                        // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlackAndWhite;                                     // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Reds;                                              // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Yellows;                                           // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Greens;                                            // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cyans;                                             // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blues;                                             // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Magentas;                                          // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LIghtLeaksContrast;                                // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LIghtLeaksFPS;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LIghtLeaksRate;                                    // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LeaksColor1;                                       // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LeaksColor2;                                       // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LeaksColor3;                                       // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GrungeTextureScale;                                // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UpdateAtRuntime;                                   // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Unbound;                                           // 0x048A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48B[0x5];                                      // 0x048B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Priority;                                          // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VolumeExtent;                                      // 0x0498(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlendRadius;                                       // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       DMI;                                               // 0x04B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EUnsharpTypeEnum                              UnsharpBlurType;                                   // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     BlurLegacyMaterial;                                // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     SharpenLegacyMaterial;                             // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_LensAndFilmPostProcess(int32 EntryPoint);
	void MainFunction();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Timeline_RuntimeUpdate__FinishedFunc();
	void Timeline_RuntimeUpdate__UpdateFunc();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LensAndFilmPostProcess_C">();
	}
	static class ALensAndFilmPostProcess_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALensAndFilmPostProcess_C>();
	}
};
static_assert(alignof(ALensAndFilmPostProcess_C) == 0x000008, "Wrong alignment on ALensAndFilmPostProcess_C");
static_assert(sizeof(ALensAndFilmPostProcess_C) == 0x0004E0, "Wrong size on ALensAndFilmPostProcess_C");
static_assert(offsetof(ALensAndFilmPostProcess_C, UberGraphFrame) == 0x000290, "Member 'ALensAndFilmPostProcess_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, PostProcess) == 0x000298, "Member 'ALensAndFilmPostProcess_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Box) == 0x0002A0, "Member 'ALensAndFilmPostProcess_C::Box' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Timeline_RuntimeUpdate__Direction_88899CD645AF6163B33864B03EC1AF86) == 0x0002A8, "Member 'ALensAndFilmPostProcess_C::Timeline_RuntimeUpdate__Direction_88899CD645AF6163B33864B03EC1AF86' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Timeline_RuntimeUpdate) == 0x0002B0, "Member 'ALensAndFilmPostProcess_C::Timeline_RuntimeUpdate' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, BlurRegularMaterial) == 0x0002B8, "Member 'ALensAndFilmPostProcess_C::BlurRegularMaterial' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, BlurHemisphereMaterial) == 0x0002C0, "Member 'ALensAndFilmPostProcess_C::BlurHemisphereMaterial' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, BlurGaussianMaterial) == 0x0002C8, "Member 'ALensAndFilmPostProcess_C::BlurGaussianMaterial' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, FilmMaterialGrain) == 0x0002D0, "Member 'ALensAndFilmPostProcess_C::FilmMaterialGrain' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, FilmMaterialGrunge) == 0x0002D8, "Member 'ALensAndFilmPostProcess_C::FilmMaterialGrunge' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, FilmMaterialBoth) == 0x0002E0, "Member 'ALensAndFilmPostProcess_C::FilmMaterialBoth' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, AberrationMaterial) == 0x0002E8, "Member 'ALensAndFilmPostProcess_C::AberrationMaterial' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, DistortionMaterial) == 0x0002F0, "Member 'ALensAndFilmPostProcess_C::DistortionMaterial' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, SharpenMaterial) == 0x0002F8, "Member 'ALensAndFilmPostProcess_C::SharpenMaterial' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, ColorAdjustmentMaterial) == 0x000300, "Member 'ALensAndFilmPostProcess_C::ColorAdjustmentMaterial' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, LightLeaksMaterial) == 0x000308, "Member 'ALensAndFilmPostProcess_C::LightLeaksMaterial' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, ColorAdjustmentWithLightLeaksMaterial) == 0x000310, "Member 'ALensAndFilmPostProcess_C::ColorAdjustmentWithLightLeaksMaterial' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, PostProcessMaterials) == 0x000318, "Member 'ALensAndFilmPostProcess_C::PostProcessMaterials' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Blur) == 0x000328, "Member 'ALensAndFilmPostProcess_C::Blur' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, ChromaticAberration) == 0x000329, "Member 'ALensAndFilmPostProcess_C::ChromaticAberration' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, LensDistortion) == 0x00032A, "Member 'ALensAndFilmPostProcess_C::LensDistortion' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, UnsharpMasking) == 0x00032B, "Member 'ALensAndFilmPostProcess_C::UnsharpMasking' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, FilmGrain) == 0x00032C, "Member 'ALensAndFilmPostProcess_C::FilmGrain' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, FilmGrunge) == 0x00032D, "Member 'ALensAndFilmPostProcess_C::FilmGrunge' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, ColorAdjustment) == 0x00032E, "Member 'ALensAndFilmPostProcess_C::ColorAdjustment' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, BlurType) == 0x00032F, "Member 'ALensAndFilmPostProcess_C::BlurType' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, BlurRadius) == 0x000330, "Member 'ALensAndFilmPostProcess_C::BlurRadius' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, BlurRadiusConstant) == 0x000338, "Member 'ALensAndFilmPostProcess_C::BlurRadiusConstant' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, BlurFadeExponent) == 0x000340, "Member 'ALensAndFilmPostProcess_C::BlurFadeExponent' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, BlurQuality) == 0x000348, "Member 'ALensAndFilmPostProcess_C::BlurQuality' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Cyan) == 0x000350, "Member 'ALensAndFilmPostProcess_C::Cyan' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Magenta) == 0x000358, "Member 'ALensAndFilmPostProcess_C::Magenta' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Yellow_) == 0x000360, "Member 'ALensAndFilmPostProcess_C::Yellow_' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, AberrationFadeExponent) == 0x000368, "Member 'ALensAndFilmPostProcess_C::AberrationFadeExponent' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, DistortionAmount) == 0x000370, "Member 'ALensAndFilmPostProcess_C::DistortionAmount' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, SharpenIntensity) == 0x000378, "Member 'ALensAndFilmPostProcess_C::SharpenIntensity' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Balance) == 0x000380, "Member 'ALensAndFilmPostProcess_C::Balance' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, UnsharpBlurRadius) == 0x000388, "Member 'ALensAndFilmPostProcess_C::UnsharpBlurRadius' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, UnsharpBlurQuality) == 0x000390, "Member 'ALensAndFilmPostProcess_C::UnsharpBlurQuality' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, GrainAmount) == 0x000398, "Member 'ALensAndFilmPostProcess_C::GrainAmount' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, GrainScale) == 0x0003A0, "Member 'ALensAndFilmPostProcess_C::GrainScale' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, GrainRate) == 0x0003A8, "Member 'ALensAndFilmPostProcess_C::GrainRate' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, GrainDesaturation) == 0x0003B0, "Member 'ALensAndFilmPostProcess_C::GrainDesaturation' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, ShadowsDesaturation) == 0x0003B8, "Member 'ALensAndFilmPostProcess_C::ShadowsDesaturation' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, ShadowsDesaturationThreshold) == 0x0003C0, "Member 'ALensAndFilmPostProcess_C::ShadowsDesaturationThreshold' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, ShadowsDesaturationNoise) == 0x0003C8, "Member 'ALensAndFilmPostProcess_C::ShadowsDesaturationNoise' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, GrainTexture) == 0x0003D0, "Member 'ALensAndFilmPostProcess_C::GrainTexture' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, GrungeDensity1) == 0x0003D8, "Member 'ALensAndFilmPostProcess_C::GrungeDensity1' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, GrungeDensity2) == 0x0003E0, "Member 'ALensAndFilmPostProcess_C::GrungeDensity2' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, GrungeFPS) == 0x0003E8, "Member 'ALensAndFilmPostProcess_C::GrungeFPS' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, GrungeTexture) == 0x0003F0, "Member 'ALensAndFilmPostProcess_C::GrungeTexture' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, LightLeaks) == 0x0003F8, "Member 'ALensAndFilmPostProcess_C::LightLeaks' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, BlackAndWhite) == 0x000400, "Member 'ALensAndFilmPostProcess_C::BlackAndWhite' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Reds) == 0x000408, "Member 'ALensAndFilmPostProcess_C::Reds' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Yellows) == 0x000410, "Member 'ALensAndFilmPostProcess_C::Yellows' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Greens) == 0x000418, "Member 'ALensAndFilmPostProcess_C::Greens' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Cyans) == 0x000420, "Member 'ALensAndFilmPostProcess_C::Cyans' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Blues) == 0x000428, "Member 'ALensAndFilmPostProcess_C::Blues' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Magentas) == 0x000430, "Member 'ALensAndFilmPostProcess_C::Magentas' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, LIghtLeaksContrast) == 0x000438, "Member 'ALensAndFilmPostProcess_C::LIghtLeaksContrast' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, LIghtLeaksFPS) == 0x000440, "Member 'ALensAndFilmPostProcess_C::LIghtLeaksFPS' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, LIghtLeaksRate) == 0x000448, "Member 'ALensAndFilmPostProcess_C::LIghtLeaksRate' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, LeaksColor1) == 0x000450, "Member 'ALensAndFilmPostProcess_C::LeaksColor1' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, LeaksColor2) == 0x000460, "Member 'ALensAndFilmPostProcess_C::LeaksColor2' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, LeaksColor3) == 0x000470, "Member 'ALensAndFilmPostProcess_C::LeaksColor3' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, GrungeTextureScale) == 0x000480, "Member 'ALensAndFilmPostProcess_C::GrungeTextureScale' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Enabled) == 0x000488, "Member 'ALensAndFilmPostProcess_C::Enabled' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, UpdateAtRuntime) == 0x000489, "Member 'ALensAndFilmPostProcess_C::UpdateAtRuntime' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Unbound) == 0x00048A, "Member 'ALensAndFilmPostProcess_C::Unbound' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, Priority) == 0x000490, "Member 'ALensAndFilmPostProcess_C::Priority' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, VolumeExtent) == 0x000498, "Member 'ALensAndFilmPostProcess_C::VolumeExtent' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, BlendRadius) == 0x0004B0, "Member 'ALensAndFilmPostProcess_C::BlendRadius' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, DMI) == 0x0004B8, "Member 'ALensAndFilmPostProcess_C::DMI' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, UnsharpBlurType) == 0x0004C8, "Member 'ALensAndFilmPostProcess_C::UnsharpBlurType' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, BlurLegacyMaterial) == 0x0004D0, "Member 'ALensAndFilmPostProcess_C::BlurLegacyMaterial' has a wrong offset!");
static_assert(offsetof(ALensAndFilmPostProcess_C, SharpenLegacyMaterial) == 0x0004D8, "Member 'ALensAndFilmPostProcess_C::SharpenLegacyMaterial' has a wrong offset!");

}

