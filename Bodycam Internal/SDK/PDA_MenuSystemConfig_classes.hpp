#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PDA_MenuSystemConfig

#include "Basic.hpp"

#include "EDeviceInputSwitchBehavior_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ETransitionAnimation_structs.hpp"
#include "EColorPalette_structs.hpp"
#include "EFontPalette_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EPauseBehavior_structs.hpp"
#include "FFontStyle_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PDA_MenuSystemConfig.PDA_MenuSystemConfig_C
// 0x0890 (0x08C0 - 0x0030)
class UPDA_MenuSystemConfig_C final : public UPrimaryDataAsset
{
public:
	TSoftObjectPtr<class USoundCue>               HighlightSound;                                    // 0x0030(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               AcceptSound;                                       // 0x0060(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               DeclineSound;                                      // 0x0090(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ButtonPressSound;                                  // 0x00C0(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ForwardSound;                                      // 0x00F0(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               BackSound;                                         // 0x0120(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ValueChangeSound;                                  // 0x0150(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               SliderSound;                                       // 0x0180(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               DecisionDialogPopupSound;                          // 0x01B0(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               IngameMenuOpenSound;                               // 0x01E0(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               IngameMenuCloseSound;                              // 0x0210(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ClearInputBindingSound;                            // 0x0240(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               CameraSwitchSound;                                 // 0x0270(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               SearchGameSound;                                   // 0x02A0(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               BackgroundMusic;                                   // 0x02D0(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               CreditsMusic;                                      // 0x0300(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FName                                   DisplayedGameTitle;                                // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DisplayedGameVersion;                              // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UWorld>                  MenuLevel;                                         // 0x0340(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UWorld>                  CreateNewGameLevel;                                // 0x0370(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash)
	bool                                          bIntroLogosSkippable;                              // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIntroEnabled;                                     // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A2[0x6];                                      // 0x03A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   MenuContainerClass;                                // 0x03A8(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   IngameMenuClass;                                   // 0x03D8(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   InventoryMenuClass;                                // 0x0408(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   DocumentsMenuClass;                                // 0x0438(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   DecisionDialogMenuClass;                           // 0x0468(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   FooterBarMenuClass;                                // 0x0498(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   LoadingScreenMenuClass;                            // 0x04C8(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   MenuBackgroundClass;                               // 0x04F8(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   SoundManager;                                      // 0x0528(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          bShowLoadingScreen;                                // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowMouseCursor;                                  // 0x0559(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMouseLockMode                                MouseLockMode;                                     // 0x055A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDeviceInputSwitchBehavior                    InputDeviceSwitchBehavior;                         // 0x055B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MouseCursorDefaultPosition;                        // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EColorPalette, struct FLinearColor>      ColorPalette;                                      // 0x0570(0x0050)(Edit, BlueprintVisible)
	TSoftObjectPtr<class UWorld>                  LocalMultiplayerLevel;                             // 0x05C0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash)
	EPauseBehavior                                SinglePlayerPauseBehavior;                         // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseSplitscreenIngame;                             // 0x05F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFullscreenSplitscreenIngameMenu;                  // 0x05F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPauseBehavior                                LocalMultiplayerPauseBehavior;                     // 0x05F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F4[0x4];                                      // 0x05F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputMappingContext*                   InputMappingContextMenu;                           // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPDA_InputActionData_C*                 KeyboardAndMouseActionData;                        // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class UPDA_InputActionData_C*> GamepadActionDataList;                             // 0x0608(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UPlayerMappableInputConfig*>     PlayerBindableInputConfigs;                        // 0x0658(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftClassPtr<class UClass>                   SettingsManagerClass;                              // 0x0668(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class UPDA_SettingsData_C*>            SettingsData;                                      // 0x0698(0x0010)(Edit, BlueprintVisible)
	TMap<class FName, class UPDA_LevelMetaData_C*> LevelMetaData;                                     // 0x06A8(0x0050)(Edit, BlueprintVisible)
	TMap<EFontPalette, struct FFFontStyle>        FontPalette;                                       // 0x06F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	ETransitionAnimation                          MenuTransitionAnimation;                           // 0x0748(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_749[0x7];                                      // 0x0749(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MenuTransitionAnimationSpeed;                      // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPDA_ScrollBarStyle_C*                  ScrollBarStyle;                                    // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   SaveGameManagerClass;                              // 0x0760(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FName                                   DeveloperNote;                                     // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPDA_MenuStyle_C*                       MenuStyle;                                         // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UWorld>                  OnlineMultiplayerLevel;                            // 0x07A0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash)
	struct FLinearColor                           BodyBomb_Color;                                    // 0x07D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Versus_Color;                                      // 0x07E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Death_Match_Color;                                 // 0x07F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Zombie_Color;                                      // 0x0800(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Training_Color;                                    // 0x0810(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Empty_Color;                                       // 0x0820(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           GunGame_Color;                                     // 0x0830(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Team_DeathMatch_Color;                             // 0x0840(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Versus_Desc;                                       // 0x0850(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 BodyBomb_Desc;                                     // 0x0860(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Death_Match_Desc;                                  // 0x0870(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Training_Desc;                                     // 0x0880(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GunGame_Desc;                                      // 0x0890(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Zombie_Desc;                                       // 0x08A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Team_Death_Match_Desc;                             // 0x08B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PDA_MenuSystemConfig_C">();
	}
	static class UPDA_MenuSystemConfig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPDA_MenuSystemConfig_C>();
	}
};
static_assert(alignof(UPDA_MenuSystemConfig_C) == 0x000008, "Wrong alignment on UPDA_MenuSystemConfig_C");
static_assert(sizeof(UPDA_MenuSystemConfig_C) == 0x0008C0, "Wrong size on UPDA_MenuSystemConfig_C");
static_assert(offsetof(UPDA_MenuSystemConfig_C, HighlightSound) == 0x000030, "Member 'UPDA_MenuSystemConfig_C::HighlightSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, AcceptSound) == 0x000060, "Member 'UPDA_MenuSystemConfig_C::AcceptSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, DeclineSound) == 0x000090, "Member 'UPDA_MenuSystemConfig_C::DeclineSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, ButtonPressSound) == 0x0000C0, "Member 'UPDA_MenuSystemConfig_C::ButtonPressSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, ForwardSound) == 0x0000F0, "Member 'UPDA_MenuSystemConfig_C::ForwardSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, BackSound) == 0x000120, "Member 'UPDA_MenuSystemConfig_C::BackSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, ValueChangeSound) == 0x000150, "Member 'UPDA_MenuSystemConfig_C::ValueChangeSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, SliderSound) == 0x000180, "Member 'UPDA_MenuSystemConfig_C::SliderSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, DecisionDialogPopupSound) == 0x0001B0, "Member 'UPDA_MenuSystemConfig_C::DecisionDialogPopupSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, IngameMenuOpenSound) == 0x0001E0, "Member 'UPDA_MenuSystemConfig_C::IngameMenuOpenSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, IngameMenuCloseSound) == 0x000210, "Member 'UPDA_MenuSystemConfig_C::IngameMenuCloseSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, ClearInputBindingSound) == 0x000240, "Member 'UPDA_MenuSystemConfig_C::ClearInputBindingSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, CameraSwitchSound) == 0x000270, "Member 'UPDA_MenuSystemConfig_C::CameraSwitchSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, SearchGameSound) == 0x0002A0, "Member 'UPDA_MenuSystemConfig_C::SearchGameSound' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, BackgroundMusic) == 0x0002D0, "Member 'UPDA_MenuSystemConfig_C::BackgroundMusic' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, CreditsMusic) == 0x000300, "Member 'UPDA_MenuSystemConfig_C::CreditsMusic' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, DisplayedGameTitle) == 0x000330, "Member 'UPDA_MenuSystemConfig_C::DisplayedGameTitle' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, DisplayedGameVersion) == 0x000338, "Member 'UPDA_MenuSystemConfig_C::DisplayedGameVersion' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, MenuLevel) == 0x000340, "Member 'UPDA_MenuSystemConfig_C::MenuLevel' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, CreateNewGameLevel) == 0x000370, "Member 'UPDA_MenuSystemConfig_C::CreateNewGameLevel' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, bIntroLogosSkippable) == 0x0003A0, "Member 'UPDA_MenuSystemConfig_C::bIntroLogosSkippable' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, bIntroEnabled) == 0x0003A1, "Member 'UPDA_MenuSystemConfig_C::bIntroEnabled' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, MenuContainerClass) == 0x0003A8, "Member 'UPDA_MenuSystemConfig_C::MenuContainerClass' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, IngameMenuClass) == 0x0003D8, "Member 'UPDA_MenuSystemConfig_C::IngameMenuClass' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, InventoryMenuClass) == 0x000408, "Member 'UPDA_MenuSystemConfig_C::InventoryMenuClass' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, DocumentsMenuClass) == 0x000438, "Member 'UPDA_MenuSystemConfig_C::DocumentsMenuClass' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, DecisionDialogMenuClass) == 0x000468, "Member 'UPDA_MenuSystemConfig_C::DecisionDialogMenuClass' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, FooterBarMenuClass) == 0x000498, "Member 'UPDA_MenuSystemConfig_C::FooterBarMenuClass' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, LoadingScreenMenuClass) == 0x0004C8, "Member 'UPDA_MenuSystemConfig_C::LoadingScreenMenuClass' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, MenuBackgroundClass) == 0x0004F8, "Member 'UPDA_MenuSystemConfig_C::MenuBackgroundClass' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, SoundManager) == 0x000528, "Member 'UPDA_MenuSystemConfig_C::SoundManager' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, bShowLoadingScreen) == 0x000558, "Member 'UPDA_MenuSystemConfig_C::bShowLoadingScreen' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, bShowMouseCursor) == 0x000559, "Member 'UPDA_MenuSystemConfig_C::bShowMouseCursor' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, MouseLockMode) == 0x00055A, "Member 'UPDA_MenuSystemConfig_C::MouseLockMode' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, InputDeviceSwitchBehavior) == 0x00055B, "Member 'UPDA_MenuSystemConfig_C::InputDeviceSwitchBehavior' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, MouseCursorDefaultPosition) == 0x000560, "Member 'UPDA_MenuSystemConfig_C::MouseCursorDefaultPosition' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, ColorPalette) == 0x000570, "Member 'UPDA_MenuSystemConfig_C::ColorPalette' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, LocalMultiplayerLevel) == 0x0005C0, "Member 'UPDA_MenuSystemConfig_C::LocalMultiplayerLevel' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, SinglePlayerPauseBehavior) == 0x0005F0, "Member 'UPDA_MenuSystemConfig_C::SinglePlayerPauseBehavior' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, bUseSplitscreenIngame) == 0x0005F1, "Member 'UPDA_MenuSystemConfig_C::bUseSplitscreenIngame' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, bFullscreenSplitscreenIngameMenu) == 0x0005F2, "Member 'UPDA_MenuSystemConfig_C::bFullscreenSplitscreenIngameMenu' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, LocalMultiplayerPauseBehavior) == 0x0005F3, "Member 'UPDA_MenuSystemConfig_C::LocalMultiplayerPauseBehavior' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, InputMappingContextMenu) == 0x0005F8, "Member 'UPDA_MenuSystemConfig_C::InputMappingContextMenu' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, KeyboardAndMouseActionData) == 0x000600, "Member 'UPDA_MenuSystemConfig_C::KeyboardAndMouseActionData' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, GamepadActionDataList) == 0x000608, "Member 'UPDA_MenuSystemConfig_C::GamepadActionDataList' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, PlayerBindableInputConfigs) == 0x000658, "Member 'UPDA_MenuSystemConfig_C::PlayerBindableInputConfigs' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, SettingsManagerClass) == 0x000668, "Member 'UPDA_MenuSystemConfig_C::SettingsManagerClass' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, SettingsData) == 0x000698, "Member 'UPDA_MenuSystemConfig_C::SettingsData' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, LevelMetaData) == 0x0006A8, "Member 'UPDA_MenuSystemConfig_C::LevelMetaData' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, FontPalette) == 0x0006F8, "Member 'UPDA_MenuSystemConfig_C::FontPalette' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, MenuTransitionAnimation) == 0x000748, "Member 'UPDA_MenuSystemConfig_C::MenuTransitionAnimation' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, MenuTransitionAnimationSpeed) == 0x000750, "Member 'UPDA_MenuSystemConfig_C::MenuTransitionAnimationSpeed' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, ScrollBarStyle) == 0x000758, "Member 'UPDA_MenuSystemConfig_C::ScrollBarStyle' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, SaveGameManagerClass) == 0x000760, "Member 'UPDA_MenuSystemConfig_C::SaveGameManagerClass' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, DeveloperNote) == 0x000790, "Member 'UPDA_MenuSystemConfig_C::DeveloperNote' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, MenuStyle) == 0x000798, "Member 'UPDA_MenuSystemConfig_C::MenuStyle' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, OnlineMultiplayerLevel) == 0x0007A0, "Member 'UPDA_MenuSystemConfig_C::OnlineMultiplayerLevel' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, BodyBomb_Color) == 0x0007D0, "Member 'UPDA_MenuSystemConfig_C::BodyBomb_Color' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, Versus_Color) == 0x0007E0, "Member 'UPDA_MenuSystemConfig_C::Versus_Color' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, Death_Match_Color) == 0x0007F0, "Member 'UPDA_MenuSystemConfig_C::Death_Match_Color' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, Zombie_Color) == 0x000800, "Member 'UPDA_MenuSystemConfig_C::Zombie_Color' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, Training_Color) == 0x000810, "Member 'UPDA_MenuSystemConfig_C::Training_Color' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, Empty_Color) == 0x000820, "Member 'UPDA_MenuSystemConfig_C::Empty_Color' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, GunGame_Color) == 0x000830, "Member 'UPDA_MenuSystemConfig_C::GunGame_Color' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, Team_DeathMatch_Color) == 0x000840, "Member 'UPDA_MenuSystemConfig_C::Team_DeathMatch_Color' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, Versus_Desc) == 0x000850, "Member 'UPDA_MenuSystemConfig_C::Versus_Desc' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, BodyBomb_Desc) == 0x000860, "Member 'UPDA_MenuSystemConfig_C::BodyBomb_Desc' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, Death_Match_Desc) == 0x000870, "Member 'UPDA_MenuSystemConfig_C::Death_Match_Desc' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, Training_Desc) == 0x000880, "Member 'UPDA_MenuSystemConfig_C::Training_Desc' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, GunGame_Desc) == 0x000890, "Member 'UPDA_MenuSystemConfig_C::GunGame_Desc' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, Zombie_Desc) == 0x0008A0, "Member 'UPDA_MenuSystemConfig_C::Zombie_Desc' has a wrong offset!");
static_assert(offsetof(UPDA_MenuSystemConfig_C, Team_Death_Match_Desc) == 0x0008B0, "Member 'UPDA_MenuSystemConfig_C::Team_Death_Match_Desc' has a wrong offset!");

}

