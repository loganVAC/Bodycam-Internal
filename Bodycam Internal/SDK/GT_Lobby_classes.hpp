#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GT_Lobby

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameMode_structs.hpp"
#include "STR_PCInfo_structs.hpp"
#include "SteamCorePro_structs.hpp"
#include "STR_KickVote_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"
#include "ServerSlotEN_structs.hpp"
#include "E_Team_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GT_Lobby.GT_Lobby_C
// 0x01D0 (0x04B8 - 0x02E8)
class AGT_Lobby_C final : public AGameStateBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSTR_PCInfo>                    Player_Connected;                                  // 0x02F8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	EGameMode                                     Game_Mode;                                         // 0x0308(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerSteamID;                                     // 0x0310(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FText                                   Kick_Reason;                                       // 0x0320(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSTR_KickVote>                  Player_KickVote;                                   // 0x0338(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	int32                                         MapIndex;                                          // 0x0348(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GamemodeIndex;                                     // 0x034C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Ready_Players;                                     // 0x0350(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class FName                                   LevelsName;                                        // 0x0360(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlueprintSessionResult                Session_Result;                                    // 0x0368(0x0120)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FSteamID                               Steam_Id_Users;                                    // 0x0488(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor)
	class UPDA_LevelMetaData_C*                   Level_Meta_Data;                                   // 0x0490(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EServerSlotEN                                 Config;                                            // 0x0498(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamSessionSetting>           Array_Element_Session_Settings;                    // 0x04A0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          TimeToJump;                                        // 0x04B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void AddReadyPlayer(const class FString& NewItem);
	void AllPlayerJoinSeverByRef__Multicast_(const class FString& SessionToJoin__Client_, const TArray<struct FSTR_PCInfo>& FriendsLobby);
	void AllPlayerJoinSeverByRef__Server_(const class FString& SessionToJoin__Client_);
	void BreakTimer();
	void CanCreateKickVote(bool* CanCreateKickVote_);
	void CanKickThisPlayer_(const class FString& PlayerID, bool* True_);
	void ClearMap();
	void Event_Ragdoll_End();
	void EventRagdollStart();
	void ExecuteUbergraph_GT_Lobby(int32 EntryPoint);
	void Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component);
	void Get_Stamina(double* Stamina);
	void GetBlured(double* Blured);
	void GetBurnedRef(class USceneComponent** BurnedMesh);
	void GetFlashBangEffect(double* FlashEffect);
	void GetGameMode(struct FSTR_GamemodeWinInfo* GameMode);
	void GetHealth(double* Health);
	void GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote);
	void GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController);
	void GetMutePlayer(TArray<class FString>* MutePlayer);
	void GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected);
	void GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer);
	void GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_);
	void GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System);
	void GetReady_(bool* IsReady_);
	void GetServerSteamID(class FString* SteamID);
	void GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons);
	void GetSteamID(class FString* SteamID);
	void GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant);
	void GetTeam(E_Team* Team);
	void GetTeamList(E_Team Team, TArray<struct FSTR_PCInfo>* Info);
	void GetTopScore(TArray<struct FSTR_PCInfo>* TopScore);
	void InitScoreBoard();
	void IsDead(bool* Dead_);
	void IsDestroyabe_(bool* Destroyable_);
	void IsReady_(bool IsReady__0);
	void IsStress(bool* Yes_);
	void IsTalking_(bool* IsTalking__0);
	void JumpPlane__Server_(class FName LevelsName_0);
	void Kick_(const struct FSTR_PCInfo& Target);
	void Kick___Server_(const struct FSTR_PCInfo& PlayerInfo);
	void KickPlayer(const struct FSTR_KickVote& PlayerInfo);
	void KickPlayer__Multicast_(const struct FSTR_PCInfo& Player_info);
	void LobbyPlacement();
	void MuteID(const class FString& SteamID);
	void NewKickVote(const struct FSTR_PCInfo& Target);
	void OnPlayerDeath(class APlayerController* PC);
	void OnRep_GamemodeIndex();
	void OnRep_MapIndex();
	void OnRep_TimeToJump();
	void OnTrySelectTeam(E_Team Team);
	void OpenGates__Multicast_();
	void ReceiveBeginPlay();
	void ServerSteamID__Server_();
	void ServerTravel(double Delay);
	void SetLevelsName__Server_(class FName LevelsName_0);
	void Slomo(double Slomo_0);
	void StartServerTravel(bool* CanServerTravel);
	void Talk(bool IsTalking);
	void TeamIndex(int32* NoneIndex_Return, int32* MilitaryIndex_Return, int32* TerroristIndex_Return, E_Team* TeamNeedPlayer, bool* TeamEmpty_);
	void TopScore(TArray<struct FSTR_PCInfo>* TopScorePcArray_Result);
	void Try_Launch_(bool* CanLauch_);
	void Update_Gamemode__Server_(EGameMode Game_Mode_0);
	void Update_Player_Placement();
	void Update_Player_Placement__Multicast_();
	void Update_Player_Placement__Server_();
	void Update_Session_Config(const struct FBlueprintSessionResult& SessionResult, const struct FSteamID& SteamIdUsers, class UPDA_LevelMetaData_C* Level_Meta_Data_0, EServerSlotEN Config_0, EGameMode GameMode, TArray<struct FSteamSessionSetting>& ArrayElement_Session_Settings);
	void UpdateGamemode(EGameMode GameMode);
	void UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_);
	void UpdateLevels(class FName LevelsName_0);
	void UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0);
	void UpdateModeInfo();
	void UpdateScore(const struct FSTR_Score& Score);
	void UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamXP(bool Win_);
	void UpdateTimer(double TimeCount, const class FText& NewParam);
	void UpdateTransitionMap();
	void UpdateVote__Server_(const struct FSTR_PCInfo& Player_info, bool Yes_);
	void UpdateWarning(const class FString& String);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GT_Lobby_C">();
	}
	static class AGT_Lobby_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGT_Lobby_C>();
	}
};
static_assert(alignof(AGT_Lobby_C) == 0x000008, "Wrong alignment on AGT_Lobby_C");
static_assert(sizeof(AGT_Lobby_C) == 0x0004B8, "Wrong size on AGT_Lobby_C");
static_assert(offsetof(AGT_Lobby_C, UberGraphFrame) == 0x0002E8, "Member 'AGT_Lobby_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, DefaultSceneRoot) == 0x0002F0, "Member 'AGT_Lobby_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, Player_Connected) == 0x0002F8, "Member 'AGT_Lobby_C::Player_Connected' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, Game_Mode) == 0x000308, "Member 'AGT_Lobby_C::Game_Mode' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, ServerSteamID) == 0x000310, "Member 'AGT_Lobby_C::ServerSteamID' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, Kick_Reason) == 0x000320, "Member 'AGT_Lobby_C::Kick_Reason' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, Player_KickVote) == 0x000338, "Member 'AGT_Lobby_C::Player_KickVote' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, MapIndex) == 0x000348, "Member 'AGT_Lobby_C::MapIndex' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, GamemodeIndex) == 0x00034C, "Member 'AGT_Lobby_C::GamemodeIndex' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, Ready_Players) == 0x000350, "Member 'AGT_Lobby_C::Ready_Players' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, LevelsName) == 0x000360, "Member 'AGT_Lobby_C::LevelsName' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, Session_Result) == 0x000368, "Member 'AGT_Lobby_C::Session_Result' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, Steam_Id_Users) == 0x000488, "Member 'AGT_Lobby_C::Steam_Id_Users' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, Level_Meta_Data) == 0x000490, "Member 'AGT_Lobby_C::Level_Meta_Data' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, Config) == 0x000498, "Member 'AGT_Lobby_C::Config' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, Array_Element_Session_Settings) == 0x0004A0, "Member 'AGT_Lobby_C::Array_Element_Session_Settings' has a wrong offset!");
static_assert(offsetof(AGT_Lobby_C, TimeToJump) == 0x0004B0, "Member 'AGT_Lobby_C::TimeToJump' has a wrong offset!");

}

