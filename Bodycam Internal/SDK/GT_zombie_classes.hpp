#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GT_zombie

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameMode_structs.hpp"
#include "STR_PCInfo_structs.hpp"
#include "EN_WaveClass_structs.hpp"
#include "GM_Statue_structs.hpp"
#include "STR_KickVote_structs.hpp"
#include "E_Team_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GT_zombie.GT_zombie_C
// 0x0060 (0x0348 - 0x02E8)
class AGT_zombie_C final : public AGameStateBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSTR_PCInfo>                    Player_Connected;                                  // 0x02F8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FSTR_KickVote>                  Player_KickVote;                                   // 0x0308(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class FText                                   Kick_Reason;                                       // 0x0318(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         ListPlayerKicked;                                  // 0x0330(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	EGM_Statue                                    GM_Statue;                                         // 0x0340(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BreakTimer();
	void CanCreateKickVote(bool* CanCreateKickVote_);
	void CanKickThisPlayer_(const class FString& PlayerID, bool* True_);
	void ClearMap();
	void Event_Ragdoll_End();
	void EventRagdollStart();
	void ExecuteUbergraph_GT_zombie(int32 EntryPoint);
	void Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component);
	void Get_Stamina(double* Stamina);
	void GetBlured(double* Blured);
	void GetBurnedRef(class USceneComponent** BurnedMesh);
	void GetFlashBangEffect(double* FlashEffect);
	void GetGameMode(struct FSTR_GamemodeWinInfo* GameMode);
	void GetGamemodeInfo(struct FSTR_GamemodeWinInfo* GamemodeInfo);
	void GetHealth(double* Health);
	void GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote);
	void GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController);
	void GetMutePlayer(TArray<class FString>* MutePlayer);
	void GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected);
	void GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer);
	void GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_);
	void GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System);
	void GetReady_(bool* IsReady_);
	void GetServerSteamID(class FString* SteamID);
	void GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons);
	void GetSteamID(class FString* SteamID);
	void GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant);
	void GetTeam(E_Team* Team);
	void GetTeamList(E_Team Team, TArray<struct FSTR_PCInfo>* Info);
	void GetTopScore(TArray<struct FSTR_PCInfo>* TopScore);
	void InitScoreBoard();
	void IsDead(bool* Dead_);
	void IsDestroyabe_(bool* Destroyable_);
	void IsReady_(bool IsReady__0);
	void IsStress(bool* Yes_);
	void IsTalking_(bool* IsTalking__0);
	void Kick_(const struct FSTR_PCInfo& Target);
	void Kick___Server_(const struct FSTR_PCInfo& PlayerInfo);
	void KickPlayer(const struct FSTR_KickVote& PlayerInfo);
	void KickPlayer__Server_(const struct FSTR_KickVote& NewItem);
	void MuteID(const class FString& SteamID);
	void NewKickVote(const struct FSTR_PCInfo& Target);
	void OnPlayerDeath(class APlayerController* PC);
	void OnTrySelectTeam(E_Team Team);
	void PlayEndWaveSound__Multicast_(EN_WaveClass EN_WaveClass);
	void PlayEndWaveSound__server_(EN_WaveClass EN_WaveClass);
	void PlayStartWaveSound__Multicast_(EN_WaveClass EN_WaveClass);
	void PlayStartWaveSound__server_(EN_WaveClass EN_WaveClass);
	void ServerTravel(double Delay);
	void ServerTravel__Multicast_();
	void ServerTravel__server_(float Duration);
	void Slomo(double Slomo_0);
	void SpawnWinHud__server_(int32 Wave, double Chrono);
	void Talk(bool IsTalking);
	void UpdateGamemode(EGameMode GameMode);
	void UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_);
	void UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0);
	void UpdateModeInfo();
	void UpdateScore(const struct FSTR_Score& Score);
	void UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamXP(bool Win_);
	void UpdateTimer(double TimeCount, const class FText& NewParam);
	void UpdateTransitionMap();
	void UpdateVote__Server_(const struct FSTR_PCInfo& Player_info, bool Yes_);
	void UpdateWarning(const class FString& String);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GT_zombie_C">();
	}
	static class AGT_zombie_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGT_zombie_C>();
	}
};
static_assert(alignof(AGT_zombie_C) == 0x000008, "Wrong alignment on AGT_zombie_C");
static_assert(sizeof(AGT_zombie_C) == 0x000348, "Wrong size on AGT_zombie_C");
static_assert(offsetof(AGT_zombie_C, UberGraphFrame) == 0x0002E8, "Member 'AGT_zombie_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGT_zombie_C, DefaultSceneRoot) == 0x0002F0, "Member 'AGT_zombie_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AGT_zombie_C, Player_Connected) == 0x0002F8, "Member 'AGT_zombie_C::Player_Connected' has a wrong offset!");
static_assert(offsetof(AGT_zombie_C, Player_KickVote) == 0x000308, "Member 'AGT_zombie_C::Player_KickVote' has a wrong offset!");
static_assert(offsetof(AGT_zombie_C, Kick_Reason) == 0x000318, "Member 'AGT_zombie_C::Kick_Reason' has a wrong offset!");
static_assert(offsetof(AGT_zombie_C, ListPlayerKicked) == 0x000330, "Member 'AGT_zombie_C::ListPlayerKicked' has a wrong offset!");
static_assert(offsetof(AGT_zombie_C, GM_Statue) == 0x000340, "Member 'AGT_zombie_C::GM_Statue' has a wrong offset!");

}

