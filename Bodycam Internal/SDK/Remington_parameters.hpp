#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Remington

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Remington.Remington_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct Remington_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Remington_C_AnimGraph) == 0x000008, "Wrong alignment on Remington_C_AnimGraph");
static_assert(sizeof(Remington_C_AnimGraph) == 0x000010, "Wrong size on Remington_C_AnimGraph");
static_assert(offsetof(Remington_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'Remington_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function Remington.Remington_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct Remington_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on Remington_C_BlueprintUpdateAnimation");
static_assert(sizeof(Remington_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on Remington_C_BlueprintUpdateAnimation");
static_assert(offsetof(Remington_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'Remington_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function Remington.Remington_C.ExecuteUbergraph_Remington
// 0x0018 (0x0018 - 0x0000)
struct Remington_C_ExecuteUbergraph_Remington final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWEP_C*                                 K2Node_Event_Wep;                                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_ExecuteUbergraph_Remington) == 0x000008, "Wrong alignment on Remington_C_ExecuteUbergraph_Remington");
static_assert(sizeof(Remington_C_ExecuteUbergraph_Remington) == 0x000018, "Wrong size on Remington_C_ExecuteUbergraph_Remington");
static_assert(offsetof(Remington_C_ExecuteUbergraph_Remington, EntryPoint) == 0x000000, "Member 'Remington_C_ExecuteUbergraph_Remington::EntryPoint' has a wrong offset!");
static_assert(offsetof(Remington_C_ExecuteUbergraph_Remington, K2Node_Event_Wep) == 0x000008, "Member 'Remington_C_ExecuteUbergraph_Remington::K2Node_Event_Wep' has a wrong offset!");
static_assert(offsetof(Remington_C_ExecuteUbergraph_Remington, K2Node_Event_DeltaTimeX) == 0x000010, "Member 'Remington_C_ExecuteUbergraph_Remington::K2Node_Event_DeltaTimeX' has a wrong offset!");

// Function Remington.Remington_C.Get First Person Montage Character Fire
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_First_Person_Montage_Character_Fire final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_First_Person_Montage_Character_Fire) == 0x000008, "Wrong alignment on Remington_C_Get_First_Person_Montage_Character_Fire");
static_assert(sizeof(Remington_C_Get_First_Person_Montage_Character_Fire) == 0x000008, "Wrong size on Remington_C_Get_First_Person_Montage_Character_Fire");
static_assert(offsetof(Remington_C_Get_First_Person_Montage_Character_Fire, ReturnValue) == 0x000000, "Member 'Remington_C_Get_First_Person_Montage_Character_Fire::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get First Person Montage Character Holster
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_First_Person_Montage_Character_Holster final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_First_Person_Montage_Character_Holster) == 0x000008, "Wrong alignment on Remington_C_Get_First_Person_Montage_Character_Holster");
static_assert(sizeof(Remington_C_Get_First_Person_Montage_Character_Holster) == 0x000008, "Wrong size on Remington_C_Get_First_Person_Montage_Character_Holster");
static_assert(offsetof(Remington_C_Get_First_Person_Montage_Character_Holster, ReturnValue) == 0x000000, "Member 'Remington_C_Get_First_Person_Montage_Character_Holster::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get First Person Montage Character Inspect
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_First_Person_Montage_Character_Inspect final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_First_Person_Montage_Character_Inspect) == 0x000008, "Wrong alignment on Remington_C_Get_First_Person_Montage_Character_Inspect");
static_assert(sizeof(Remington_C_Get_First_Person_Montage_Character_Inspect) == 0x000008, "Wrong size on Remington_C_Get_First_Person_Montage_Character_Inspect");
static_assert(offsetof(Remington_C_Get_First_Person_Montage_Character_Inspect, ReturnValue) == 0x000000, "Member 'Remington_C_Get_First_Person_Montage_Character_Inspect::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get First Person Montage Character Reload
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_First_Person_Montage_Character_Reload final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_First_Person_Montage_Character_Reload) == 0x000008, "Wrong alignment on Remington_C_Get_First_Person_Montage_Character_Reload");
static_assert(sizeof(Remington_C_Get_First_Person_Montage_Character_Reload) == 0x000008, "Wrong size on Remington_C_Get_First_Person_Montage_Character_Reload");
static_assert(offsetof(Remington_C_Get_First_Person_Montage_Character_Reload, ReturnValue) == 0x000000, "Member 'Remington_C_Get_First_Person_Montage_Character_Reload::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get First Person Montage Character Reload Empty
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_First_Person_Montage_Character_Reload_Empty final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_First_Person_Montage_Character_Reload_Empty) == 0x000008, "Wrong alignment on Remington_C_Get_First_Person_Montage_Character_Reload_Empty");
static_assert(sizeof(Remington_C_Get_First_Person_Montage_Character_Reload_Empty) == 0x000008, "Wrong size on Remington_C_Get_First_Person_Montage_Character_Reload_Empty");
static_assert(offsetof(Remington_C_Get_First_Person_Montage_Character_Reload_Empty, ReturnValue) == 0x000000, "Member 'Remington_C_Get_First_Person_Montage_Character_Reload_Empty::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get First Person Montage Character Unholster
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_First_Person_Montage_Character_Unholster final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_First_Person_Montage_Character_Unholster) == 0x000008, "Wrong alignment on Remington_C_Get_First_Person_Montage_Character_Unholster");
static_assert(sizeof(Remington_C_Get_First_Person_Montage_Character_Unholster) == 0x000008, "Wrong size on Remington_C_Get_First_Person_Montage_Character_Unholster");
static_assert(offsetof(Remington_C_Get_First_Person_Montage_Character_Unholster, ReturnValue) == 0x000000, "Member 'Remington_C_Get_First_Person_Montage_Character_Unholster::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get First Person Sequence Loop Run
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_First_Person_Sequence_Loop_Run final
{
public:
	class UAnimSequence*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_First_Person_Sequence_Loop_Run) == 0x000008, "Wrong alignment on Remington_C_Get_First_Person_Sequence_Loop_Run");
static_assert(sizeof(Remington_C_Get_First_Person_Sequence_Loop_Run) == 0x000008, "Wrong size on Remington_C_Get_First_Person_Sequence_Loop_Run");
static_assert(offsetof(Remington_C_Get_First_Person_Sequence_Loop_Run, ReturnValue) == 0x000000, "Member 'Remington_C_Get_First_Person_Sequence_Loop_Run::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get First Person Sequence Pose Aim
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_First_Person_Sequence_Pose_Aim final
{
public:
	class UAnimSequence*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_First_Person_Sequence_Pose_Aim) == 0x000008, "Wrong alignment on Remington_C_Get_First_Person_Sequence_Pose_Aim");
static_assert(sizeof(Remington_C_Get_First_Person_Sequence_Pose_Aim) == 0x000008, "Wrong size on Remington_C_Get_First_Person_Sequence_Pose_Aim");
static_assert(offsetof(Remington_C_Get_First_Person_Sequence_Pose_Aim, ReturnValue) == 0x000000, "Member 'Remington_C_Get_First_Person_Sequence_Pose_Aim::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get First Person Sequence Pose Idle
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_First_Person_Sequence_Pose_Idle final
{
public:
	class UAnimSequence*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_First_Person_Sequence_Pose_Idle) == 0x000008, "Wrong alignment on Remington_C_Get_First_Person_Sequence_Pose_Idle");
static_assert(sizeof(Remington_C_Get_First_Person_Sequence_Pose_Idle) == 0x000008, "Wrong size on Remington_C_Get_First_Person_Sequence_Pose_Idle");
static_assert(offsetof(Remington_C_Get_First_Person_Sequence_Pose_Idle, ReturnValue) == 0x000000, "Member 'Remington_C_Get_First_Person_Sequence_Pose_Idle::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Mesh Component Magazine
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Mesh_Component_Magazine final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Mesh_Component_Magazine) == 0x000008, "Wrong alignment on Remington_C_Get_Mesh_Component_Magazine");
static_assert(sizeof(Remington_C_Get_Mesh_Component_Magazine) == 0x000008, "Wrong size on Remington_C_Get_Mesh_Component_Magazine");
static_assert(offsetof(Remington_C_Get_Mesh_Component_Magazine, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Mesh_Component_Magazine::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Mesh Component Weapon
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Mesh_Component_Weapon final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Mesh_Component_Weapon) == 0x000008, "Wrong alignment on Remington_C_Get_Mesh_Component_Weapon");
static_assert(sizeof(Remington_C_Get_Mesh_Component_Weapon) == 0x000008, "Wrong size on Remington_C_Get_Mesh_Component_Weapon");
static_assert(offsetof(Remington_C_Get_Mesh_Component_Weapon, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Mesh_Component_Weapon::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Name Socket Third Person
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Name_Socket_Third_Person final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Name_Socket_Third_Person) == 0x000004, "Wrong alignment on Remington_C_Get_Name_Socket_Third_Person");
static_assert(sizeof(Remington_C_Get_Name_Socket_Third_Person) == 0x000008, "Wrong size on Remington_C_Get_Name_Socket_Third_Person");
static_assert(offsetof(Remington_C_Get_Name_Socket_Third_Person, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Name_Socket_Third_Person::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Offset Action Location
// 0x0018 (0x0018 - 0x0000)
struct Remington_C_Get_Offset_Action_Location final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Offset_Action_Location) == 0x000008, "Wrong alignment on Remington_C_Get_Offset_Action_Location");
static_assert(sizeof(Remington_C_Get_Offset_Action_Location) == 0x000018, "Wrong size on Remington_C_Get_Offset_Action_Location");
static_assert(offsetof(Remington_C_Get_Offset_Action_Location, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Offset_Action_Location::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Offset Action Rotation
// 0x0018 (0x0018 - 0x0000)
struct Remington_C_Get_Offset_Action_Rotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Remington_C_Get_Offset_Action_Rotation) == 0x000008, "Wrong alignment on Remington_C_Get_Offset_Action_Rotation");
static_assert(sizeof(Remington_C_Get_Offset_Action_Rotation) == 0x000018, "Wrong size on Remington_C_Get_Offset_Action_Rotation");
static_assert(offsetof(Remington_C_Get_Offset_Action_Rotation, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Offset_Action_Rotation::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Rate Of Fire
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Rate_Of_Fire final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Rate_Of_Fire) == 0x000008, "Wrong alignment on Remington_C_Get_Rate_Of_Fire");
static_assert(sizeof(Remington_C_Get_Rate_Of_Fire) == 0x000008, "Wrong size on Remington_C_Get_Rate_Of_Fire");
static_assert(offsetof(Remington_C_Get_Rate_Of_Fire, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Rate_Of_Fire::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Third Person Montage Character Fire
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Third_Person_Montage_Character_Fire final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Third_Person_Montage_Character_Fire) == 0x000008, "Wrong alignment on Remington_C_Get_Third_Person_Montage_Character_Fire");
static_assert(sizeof(Remington_C_Get_Third_Person_Montage_Character_Fire) == 0x000008, "Wrong size on Remington_C_Get_Third_Person_Montage_Character_Fire");
static_assert(offsetof(Remington_C_Get_Third_Person_Montage_Character_Fire, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Third_Person_Montage_Character_Fire::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Third Person Montage Character Inspect
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Third_Person_Montage_Character_Inspect final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Third_Person_Montage_Character_Inspect) == 0x000008, "Wrong alignment on Remington_C_Get_Third_Person_Montage_Character_Inspect");
static_assert(sizeof(Remington_C_Get_Third_Person_Montage_Character_Inspect) == 0x000008, "Wrong size on Remington_C_Get_Third_Person_Montage_Character_Inspect");
static_assert(offsetof(Remington_C_Get_Third_Person_Montage_Character_Inspect, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Third_Person_Montage_Character_Inspect::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Third Person Montage Character Reload
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Third_Person_Montage_Character_Reload final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Third_Person_Montage_Character_Reload) == 0x000008, "Wrong alignment on Remington_C_Get_Third_Person_Montage_Character_Reload");
static_assert(sizeof(Remington_C_Get_Third_Person_Montage_Character_Reload) == 0x000008, "Wrong size on Remington_C_Get_Third_Person_Montage_Character_Reload");
static_assert(offsetof(Remington_C_Get_Third_Person_Montage_Character_Reload, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Third_Person_Montage_Character_Reload::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Third Person Montage Character Reload Empty
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Third_Person_Montage_Character_Reload_Empty final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Third_Person_Montage_Character_Reload_Empty) == 0x000008, "Wrong alignment on Remington_C_Get_Third_Person_Montage_Character_Reload_Empty");
static_assert(sizeof(Remington_C_Get_Third_Person_Montage_Character_Reload_Empty) == 0x000008, "Wrong size on Remington_C_Get_Third_Person_Montage_Character_Reload_Empty");
static_assert(offsetof(Remington_C_Get_Third_Person_Montage_Character_Reload_Empty, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Third_Person_Montage_Character_Reload_Empty::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Third Person Sequence Loop Weapon Jog
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Jog final
{
public:
	class UAnimSequence*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Jog) == 0x000008, "Wrong alignment on Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Jog");
static_assert(sizeof(Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Jog) == 0x000008, "Wrong size on Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Jog");
static_assert(offsetof(Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Jog, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Jog::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Third Person Sequence Loop Weapon Sprint
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint final
{
public:
	class UAnimSequence*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint) == 0x000008, "Wrong alignment on Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint");
static_assert(sizeof(Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint) == 0x000008, "Wrong size on Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint");
static_assert(offsetof(Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Third Person Sequence Loop Weapon Sprint Impulse
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint_Impulse final
{
public:
	class UAnimSequence*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint_Impulse) == 0x000008, "Wrong alignment on Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint_Impulse");
static_assert(sizeof(Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint_Impulse) == 0x000008, "Wrong size on Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint_Impulse");
static_assert(offsetof(Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint_Impulse, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Third_Person_Sequence_Loop_Weapon_Sprint_Impulse::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Third Person Sequence Pose Crouching Holstered
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Holstered final
{
public:
	class UAnimSequence*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Holstered) == 0x000008, "Wrong alignment on Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Holstered");
static_assert(sizeof(Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Holstered) == 0x000008, "Wrong size on Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Holstered");
static_assert(offsetof(Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Holstered, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Holstered::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Third Person Sequence Pose Crouching Unholstered
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Unholstered final
{
public:
	class UAnimSequence*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Unholstered) == 0x000008, "Wrong alignment on Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Unholstered");
static_assert(sizeof(Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Unholstered) == 0x000008, "Wrong size on Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Unholstered");
static_assert(offsetof(Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Unholstered, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Third_Person_Sequence_Pose_Crouching_Unholstered::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Third Person Sequence Pose Standing Holstered
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Third_Person_Sequence_Pose_Standing_Holstered final
{
public:
	class UAnimSequence*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Third_Person_Sequence_Pose_Standing_Holstered) == 0x000008, "Wrong alignment on Remington_C_Get_Third_Person_Sequence_Pose_Standing_Holstered");
static_assert(sizeof(Remington_C_Get_Third_Person_Sequence_Pose_Standing_Holstered) == 0x000008, "Wrong size on Remington_C_Get_Third_Person_Sequence_Pose_Standing_Holstered");
static_assert(offsetof(Remington_C_Get_Third_Person_Sequence_Pose_Standing_Holstered, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Third_Person_Sequence_Pose_Standing_Holstered::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Get Third Person Sequence Pose Standing Unholstered
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Get_Third_Person_Sequence_Pose_Standing_Unholstered final
{
public:
	class UAnimSequence*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Get_Third_Person_Sequence_Pose_Standing_Unholstered) == 0x000008, "Wrong alignment on Remington_C_Get_Third_Person_Sequence_Pose_Standing_Unholstered");
static_assert(sizeof(Remington_C_Get_Third_Person_Sequence_Pose_Standing_Unholstered) == 0x000008, "Wrong size on Remington_C_Get_Third_Person_Sequence_Pose_Standing_Unholstered");
static_assert(offsetof(Remington_C_Get_Third_Person_Sequence_Pose_Standing_Unholstered, ReturnValue) == 0x000000, "Member 'Remington_C_Get_Third_Person_Sequence_Pose_Standing_Unholstered::ReturnValue' has a wrong offset!");

// Function Remington.Remington_C.Init Wep
// 0x0008 (0x0008 - 0x0000)
struct Remington_C_Init_Wep final
{
public:
	class AWEP_C*                                 WEP;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Remington_C_Init_Wep) == 0x000008, "Wrong alignment on Remington_C_Init_Wep");
static_assert(sizeof(Remington_C_Init_Wep) == 0x000008, "Wrong size on Remington_C_Init_Wep");
static_assert(offsetof(Remington_C_Init_Wep, WEP) == 0x000000, "Member 'Remington_C_Init_Wep::WEP' has a wrong offset!");

}

