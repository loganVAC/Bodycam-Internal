#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_Base_CharacterBP

#include "Basic.hpp"

#include "ALS_RotationMode_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ALS_MovementAction_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ALS_MovementState_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "ALS_Stance_structs.hpp"
#include "MovementSettings_State_structs.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "MovementSettings_structs.hpp"
#include "Mantle_Params_structs.hpp"
#include "ALS_ComponentAndTransform_structs.hpp"
#include "Mantle_TraceSettings_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "MantleType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ALS_Base_CharacterBP.ALS_Base_CharacterBP_C
// 0x04A0 (0x0AD0 - 0x0630)
#pragma pack(push, 0x1)
class alignas(0x10) AALS_Base_CharacterBP_C : public ACharacter
{
public:
	uint8                                         Pad_628[0x8];                                      // 0x0628(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0630(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWW_SurvivorStatus_C*                   WW_SurvivorStatus;                                 // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWW_RagdollSystem_C*                    WW_RagdollSystem;                                  // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UALS_ComponentManagerCharacter_C*       ALS_ComponentManager;                              // 0x0648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MantleTimeline_BlendIn_91D7A42A4A23268AEE2E28853DEE703D; // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            MantleTimeline__Direction_91D7A42A4A23268AEE2E28853DEE703D; // 0x0654(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_655[0x3];                                      // 0x0655(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MantleTimeline;                                    // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            MovementState;                                     // 0x0660(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            PrevMovementState;                                 // 0x0661(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             DesiredRotationMode;                               // 0x0662(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           MovementAction;                                    // 0x0663(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             RotationMode;                                      // 0x0664(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     DesiredGait;                                       // 0x0665(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     Gait;                                              // 0x0666(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   Stance;                                            // 0x0667(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 ViewMode;                                          // 0x0668(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_669[0x7];                                      // 0x0669(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreviousVelocity;                                  // 0x0670(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Acceleration;                                      // 0x0688(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x06A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMovementInput;                                  // 0x06A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A2[0x6];                                      // 0x06A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LastVelocityRotation;                              // 0x06A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               LastMovementInputRotation;                         // 0x06C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Speed;                                             // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovementInputAmount;                               // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreviousAimYaw;                                    // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ControlRotation;                                   // 0x06F0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               TargetRotation;                                    // 0x0708(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               InAirRotation;                                     // 0x0720(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FDataTableRowHandle                    MovementModel;                                     // 0x0738(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FMovementSettings_State                MovementData;                                      // 0x0748(0x00C0)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMovementSettings                      CurrentMovementSettings;                           // 0x0808(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Params                         MantleParams;                                      // 0x0828(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_858[0x8];                                      // 0x0858(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALS_ComponentAndTransform             MantleLedgeLS;                                     // 0x0860(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FTransform                             MantleTarget;                                      // 0x08D0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             MantleActualStartOffset;                           // 0x0930(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             MantleAnimatedStartOffset;                         // 0x0990(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMantle_TraceSettings                  GroundedTraceSettings;                             // 0x09F0(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   DesiredStance;                                     // 0x0A04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A05[0x3];                                      // 0x0A05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AimYawRate;                                        // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             OverlayState;                                      // 0x0A10(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          BreakFall;                                         // 0x0A11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A12[0x6];                                      // 0x0A12(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          MainAnimInstance;                                  // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollOnGround;                                   // 0x0A20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollFaceUp;                                     // 0x0A21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A22[0x6];                                      // 0x0A22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastRagdollVelocity;                               // 0x0A28(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThirdPersonFOV;                                    // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FirstPersonFOV;                                    // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightShoulder;                                     // 0x0A50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A51[0x7];                                      // 0x0A51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RagdollLocation;                                   // 0x0A58(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ServerRagdollPull;                                 // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AALS_AnimMan_CharacterBP_C*             Character_Child;                                   // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             Overlay_State__Client_;                            // 0x0A80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A81[0x7];                                      // 0x0A81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Movement;                                          // 0x0A88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BreathingFade;                                     // 0x0A98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9C[0x4];                                      // 0x0A9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APC_Bodycam_C*                          PC_Bodycam;                                        // 0x0AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_MenuControllerComponent_C*          BP_Menu_Controller_Component;                      // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AGT_Bodycam_C*                          As_GT_Bodycam;                                     // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollState;                                      // 0x0AB8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB9[0x3];                                      // 0x0AB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceCamera;                                    // 0x0ABC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Test;                                              // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddToCharacterRotation(const struct FRotator& DeltaRotation);
	void ApplyPointDamage(double Damage, double RagdollForce, class FName BoneName, const struct FVector& Location, const struct FVector& ShotFromDirection, class APlayerController* KillerPC, bool DisableHeadShot);
	void BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BPI_Death();
	struct FTransform BPI_Get_3P_PivotTarget();
	void BPI_Get_3P_TraceParams(struct FVector* TraceOrigin, double* TraceRadius, ETraceTypeQuery* TraceChannel);
	void BPI_Get_CameraParameters(double* TP_FOV, double* FP_FOV, bool* RightShoulder_0);
	void BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* MovementState_0, EALS_MovementState* PrevMovementState_0, EALS_MovementAction* MovementAction_0, EALS_RotationMode* RotationMode_0, EALS_Gait* ActualGait, EALS_Stance* ActualStance, EALS_ViewMode* ViewMode_0, EALS_OverlayState* OverlayState_0, EALS_OverlayState* OverlayState__Client_);
	void BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Acceleration_0, struct FVector* MovementInput, bool* IsMoving_0, bool* HasMovementInput_0, double* Speed_0, double* MovementInputAmount_0, struct FRotator* AimingRotation, double* AimYawRate_0);
	struct FVector BPI_Get_FP_CameraTarget();
	void BPI_Set_Gait(EALS_Gait NewGait);
	void BPI_Set_MovementAction(EALS_MovementAction NewMovementAction);
	void BPI_Set_MovementState(EALS_MovementState NewMovementState);
	void BPI_Set_OverlayState(EALS_OverlayState NewOverlayState);
	void BPI_Set_RotationMode(EALS_RotationMode NewRotationMode);
	void BPI_Set_ViewMode(EALS_ViewMode NewViewMode);
	void Breakfall_Event();
	void CacheValues();
	struct FVector CalculateAcceleration();
	double CalculateGroundedRotationRate();
	void CanSprint(bool* CanSprint_0);
	bool CanUpdateMovingRotation();
	void CapsuleHasRoomCheck(class UCapsuleComponent* Capsule, const struct FVector& TargetLocation, double HeightOffset, double RadiusOffset, EDrawDebugTrace DebugType, bool* HasRoom);
	void Client_Breakfall();
	void Client_On_Jumped();
	void Client_Roll();
	void DrawDebugShapes();
	void ExecuteUbergraph_ALS_Base_CharacterBP(int32 EntryPoint);
	void FixDiagonalGamepadValues(double Y_in, double X_in, double* Y_Out, double* X_Out);
	void _Right_Vector(struct FVector* ForwardVector, struct FVector* RightVector);
	struct FVector Get_Player_Movement_Input();
	class UActorComponent* GetActorComponent(TSubclassOf<class UActorComponent> ComponentClass);
	TArray<class UActorComponent*> GetActorComponents(TSubclassOf<class UActorComponent> ComponentClass);
	void GetActualGait(EALS_Gait AllowedGait, EALS_Gait* ActualGait);
	void GetAllowedGait(EALS_Gait* AllowedGait);
	double GetAnimCurveValue(class FName CurveName);
	struct FVector GetCalpsuleBaseLocation(double ZOffset);
	struct FVector GetCapsuleLocationFromBase(const struct FVector& BaseLocation, double ZOffset);
	class UAnimMontage* GetGetUpAnimation(bool RagdollFaceUp_0);
	struct FRotator GetLastMovementInputRotation();
	struct FRotator GetLastVelocityRotation();
	struct FMantle_Asset GetMantleAsset(EMantleType MantleType);
	double GetMappedSpeed();
	double GetMovementInputAmount();
	class UAnimMontage* GetRollAnimation();
	double GetSpeed();
	void GetTargetMovementSettings(struct FMovementSettings* MovementSettings);
	EDrawDebugTrace GetTraceDebugType(EDrawDebugTrace ShowTraceType);
	bool HasMovementInput_();
	void InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Jog_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Jog_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_9(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	bool IsMoving_();
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void LimitRotation(double AimYawMin, double AimYawMax, double InterpSpeed);
	void MantleCheck(const struct FMantle_TraceSettings& Trace_Settings, EDrawDebugTrace DebugType, bool* Vault);
	void MantleEnd();
	void MantleStart(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType);
	void MantleTimeline__FinishedFunc();
	void MantleTimeline__UpdateFunc();
	void MantleUpdate(double BlendIn);
	void Multicast_Breakfall();
	void Multicast_Mantle(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType);
	void Multicast_On_Jumped();
	void Multicast_Ragdoll_End();
	void Multicast_Ragdoll_Start();
	void Multicast_Roll_Event();
	void On_Begin_Play();
	void On_Character_Movement_Mode_Changed(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void OnGaitChanged(EALS_Gait NewActualGait);
	void OnJumped();
	void OnLanded(const struct FHitResult& Hit);
	void OnMovementActionChanged(EALS_MovementAction NewMovementAction);
	void OnMovementStateChanged(EALS_MovementState NewMovementState);
	void OnOverlayStateChanged(EALS_OverlayState NewOverlayState);
	void OnRep_MovementAction();
	void OnRep_MovementState();
	void OnRep_OverlayState();
	void OnRep_RotationMode();
	void OnRep_ViewMode();
	void OnRotationModeChanged(EALS_RotationMode NewRotationMode);
	void OnStanceChanged(EALS_Stance NewStance);
	void OnViewModeChanged(EALS_ViewMode NewViewMode);
	void PlayerMovementInput(bool IsForwardAxis, const struct FVector2D& Mouvement);
	void Ragdoll_End__Replicated_();
	void Ragdoll_Start__Replicated_(double Delay);
	void RagdollEnd();
	void RagdollStart();
	void RagdollUpdate();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Reset_Death();
	struct FRotator Rinterp_Control_Rotation();
	void Roll_Event();
	void Server_Breakfall();
	void Server_Mantle(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType);
	void Server_Ragdoll_End();
	void Server_Ragdoll_Start();
	void Server_Roll_Event();
	void Server_Set_Desired_Gait(EALS_Gait DesiredGait_0);
	void Server_Set_Gait(EALS_Gait Gait_0);
	void Server_Set_Movement_Action(EALS_MovementAction MovementAction_0);
	void Server_Set_Movement_State(EALS_MovementState MovementState_0);
	void Server_Set_Overlay_State(EALS_OverlayState OverlayState_0);
	void Server_Set_Rotation_Mode(EALS_RotationMode RotationMode_0);
	void Server_Set_View_Mode(EALS_ViewMode ViewMode_0);
	void ServerSetRagdollLocation(const struct FVector& RagdollLocation_0);
	void Set_Overlay_State__Client_(EALS_OverlayState OverlayState_0);
	bool SetActorLocationAndRotation_UpdateTarget_(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void SetActorLocationDuringRagdoll();
	void SetEssentialValues();
	void SetMovementModel();
	void SmoothCharacterRotation(const struct FRotator& Target, double TargetInterpSpeed_Const_, double ActorInterpSpeed_Smooth_);
	void SpawnActor__Server_(class UClass* Class_0, const struct FTransform& SpawnTransform);
	void Update_Team__server_(class APlayerController* PC);
	void UpdateCharacterMovement();
	void UpdateDynamicMovementSettings(EALS_Gait AllowedGait);
	void UpdateGroudedRotation();
	void UpdateInAirRotation();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ALS_Base_CharacterBP_C">();
	}
	static class AALS_Base_CharacterBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALS_Base_CharacterBP_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AALS_Base_CharacterBP_C) == 0x000010, "Wrong alignment on AALS_Base_CharacterBP_C");
static_assert(sizeof(AALS_Base_CharacterBP_C) == 0x000AD0, "Wrong size on AALS_Base_CharacterBP_C");
static_assert(offsetof(AALS_Base_CharacterBP_C, UberGraphFrame) == 0x000630, "Member 'AALS_Base_CharacterBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, WW_SurvivorStatus) == 0x000638, "Member 'AALS_Base_CharacterBP_C::WW_SurvivorStatus' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, WW_RagdollSystem) == 0x000640, "Member 'AALS_Base_CharacterBP_C::WW_RagdollSystem' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, ALS_ComponentManager) == 0x000648, "Member 'AALS_Base_CharacterBP_C::ALS_ComponentManager' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleTimeline_BlendIn_91D7A42A4A23268AEE2E28853DEE703D) == 0x000650, "Member 'AALS_Base_CharacterBP_C::MantleTimeline_BlendIn_91D7A42A4A23268AEE2E28853DEE703D' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleTimeline__Direction_91D7A42A4A23268AEE2E28853DEE703D) == 0x000654, "Member 'AALS_Base_CharacterBP_C::MantleTimeline__Direction_91D7A42A4A23268AEE2E28853DEE703D' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleTimeline) == 0x000658, "Member 'AALS_Base_CharacterBP_C::MantleTimeline' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MovementState) == 0x000660, "Member 'AALS_Base_CharacterBP_C::MovementState' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, PrevMovementState) == 0x000661, "Member 'AALS_Base_CharacterBP_C::PrevMovementState' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, DesiredRotationMode) == 0x000662, "Member 'AALS_Base_CharacterBP_C::DesiredRotationMode' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MovementAction) == 0x000663, "Member 'AALS_Base_CharacterBP_C::MovementAction' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, RotationMode) == 0x000664, "Member 'AALS_Base_CharacterBP_C::RotationMode' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, DesiredGait) == 0x000665, "Member 'AALS_Base_CharacterBP_C::DesiredGait' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Gait) == 0x000666, "Member 'AALS_Base_CharacterBP_C::Gait' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Stance) == 0x000667, "Member 'AALS_Base_CharacterBP_C::Stance' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, ViewMode) == 0x000668, "Member 'AALS_Base_CharacterBP_C::ViewMode' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, PreviousVelocity) == 0x000670, "Member 'AALS_Base_CharacterBP_C::PreviousVelocity' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Acceleration) == 0x000688, "Member 'AALS_Base_CharacterBP_C::Acceleration' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, IsMoving) == 0x0006A0, "Member 'AALS_Base_CharacterBP_C::IsMoving' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, HasMovementInput) == 0x0006A1, "Member 'AALS_Base_CharacterBP_C::HasMovementInput' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, LastVelocityRotation) == 0x0006A8, "Member 'AALS_Base_CharacterBP_C::LastVelocityRotation' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, LastMovementInputRotation) == 0x0006C0, "Member 'AALS_Base_CharacterBP_C::LastMovementInputRotation' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Speed) == 0x0006D8, "Member 'AALS_Base_CharacterBP_C::Speed' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MovementInputAmount) == 0x0006E0, "Member 'AALS_Base_CharacterBP_C::MovementInputAmount' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, PreviousAimYaw) == 0x0006E8, "Member 'AALS_Base_CharacterBP_C::PreviousAimYaw' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, ControlRotation) == 0x0006F0, "Member 'AALS_Base_CharacterBP_C::ControlRotation' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, TargetRotation) == 0x000708, "Member 'AALS_Base_CharacterBP_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, InAirRotation) == 0x000720, "Member 'AALS_Base_CharacterBP_C::InAirRotation' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MovementModel) == 0x000738, "Member 'AALS_Base_CharacterBP_C::MovementModel' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MovementData) == 0x000748, "Member 'AALS_Base_CharacterBP_C::MovementData' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, CurrentMovementSettings) == 0x000808, "Member 'AALS_Base_CharacterBP_C::CurrentMovementSettings' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleParams) == 0x000828, "Member 'AALS_Base_CharacterBP_C::MantleParams' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleLedgeLS) == 0x000860, "Member 'AALS_Base_CharacterBP_C::MantleLedgeLS' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleTarget) == 0x0008D0, "Member 'AALS_Base_CharacterBP_C::MantleTarget' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleActualStartOffset) == 0x000930, "Member 'AALS_Base_CharacterBP_C::MantleActualStartOffset' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleAnimatedStartOffset) == 0x000990, "Member 'AALS_Base_CharacterBP_C::MantleAnimatedStartOffset' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, GroundedTraceSettings) == 0x0009F0, "Member 'AALS_Base_CharacterBP_C::GroundedTraceSettings' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, DesiredStance) == 0x000A04, "Member 'AALS_Base_CharacterBP_C::DesiredStance' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, AimYawRate) == 0x000A08, "Member 'AALS_Base_CharacterBP_C::AimYawRate' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, OverlayState) == 0x000A10, "Member 'AALS_Base_CharacterBP_C::OverlayState' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, BreakFall) == 0x000A11, "Member 'AALS_Base_CharacterBP_C::BreakFall' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MainAnimInstance) == 0x000A18, "Member 'AALS_Base_CharacterBP_C::MainAnimInstance' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, RagdollOnGround) == 0x000A20, "Member 'AALS_Base_CharacterBP_C::RagdollOnGround' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, RagdollFaceUp) == 0x000A21, "Member 'AALS_Base_CharacterBP_C::RagdollFaceUp' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, LastRagdollVelocity) == 0x000A28, "Member 'AALS_Base_CharacterBP_C::LastRagdollVelocity' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, ThirdPersonFOV) == 0x000A40, "Member 'AALS_Base_CharacterBP_C::ThirdPersonFOV' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, FirstPersonFOV) == 0x000A48, "Member 'AALS_Base_CharacterBP_C::FirstPersonFOV' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, RightShoulder) == 0x000A50, "Member 'AALS_Base_CharacterBP_C::RightShoulder' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, RagdollLocation) == 0x000A58, "Member 'AALS_Base_CharacterBP_C::RagdollLocation' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, ServerRagdollPull) == 0x000A70, "Member 'AALS_Base_CharacterBP_C::ServerRagdollPull' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Character_Child) == 0x000A78, "Member 'AALS_Base_CharacterBP_C::Character_Child' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Overlay_State__Client_) == 0x000A80, "Member 'AALS_Base_CharacterBP_C::Overlay_State__Client_' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Movement) == 0x000A88, "Member 'AALS_Base_CharacterBP_C::Movement' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, BreathingFade) == 0x000A98, "Member 'AALS_Base_CharacterBP_C::BreathingFade' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, PC_Bodycam) == 0x000AA0, "Member 'AALS_Base_CharacterBP_C::PC_Bodycam' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, BP_Menu_Controller_Component) == 0x000AA8, "Member 'AALS_Base_CharacterBP_C::BP_Menu_Controller_Component' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, As_GT_Bodycam) == 0x000AB0, "Member 'AALS_Base_CharacterBP_C::As_GT_Bodycam' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, RagdollState) == 0x000AB8, "Member 'AALS_Base_CharacterBP_C::RagdollState' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, DistanceCamera) == 0x000ABC, "Member 'AALS_Base_CharacterBP_C::DistanceCamera' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Test) == 0x000AC0, "Member 'AALS_Base_CharacterBP_C::Test' has a wrong offset!");

}

