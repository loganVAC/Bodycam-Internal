#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ultra_Dynamic_Weather

#include "Basic.hpp"

#include "UDS_Occlusion_Mode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UDS_Weather_Display_Names_structs.hpp"
#include "UDS_ControlPointMode_structs.hpp"
#include "UDS_PropertyType_structs.hpp"
#include "UDS_TemperatureType_structs.hpp"
#include "UDS_DLWE_Mode_structs.hpp"
#include "UDS_SeasonMode_structs.hpp"
#include "UDS_and_UDW_State_structs.hpp"
#include "UDS_Project_Mode_structs.hpp"
#include "UDW_CachedProperties_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C
// 0x1668 (0x18F8 - 0x0290)
class AUltra_Dynamic_Weather_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Rainbow;                                           // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UUDS_PlayerOcclusion_C*                 Player_Occlusion;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        LightRain_YMinus;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        LightRain_YPlus;                                   // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        LightRain_XMinus;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        LightRain_XPlus;                                   // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Dust_Particles;                                    // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Wind_Debris_Particles;                             // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Snow_Particles;                                    // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  ScreenDroplets;                                    // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Wind_XPlus;                                        // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Rain_YMinus;                                       // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Rain_YPlus;                                        // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Rain_XMinus;                                       // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Rain_XPlus;                                        // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Wind_YMinus;                                       // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Wind_YPlus;                                        // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Wind_XMinus;                                       // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SpatializedAudioRoot;                              // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  Post_Process_Wind_Fog;                             // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URandom_Weather_Variation_C*            Random_Weather_Variation;                          // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Wind_Whistling;                                    // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        DistantThunder_Cue;                                // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Obscured_Lightning;                                // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Lightning_Light;                                   // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Root;                                              // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Rain_Particles;                                    // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AUltra_Dynamic_Sky_C*                   UltraDynamicSky;                                   // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UUDS_Weather_Settings_C*                Weather;                                           // 0x0378(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Coverage;                                    // 0x0380(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Fog;                                               // 0x0388(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Intensity;                                    // 0x0390(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Rain;                                              // 0x0398(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Snow;                                              // 0x03A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning;                                         // 0x03A8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Dust;                                              // 0x03B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Material_Wetness;                                  // 0x03B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Material_Snow_Coverage;                            // 0x03C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Direction;                                    // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lerp_to_New_Settings;                              // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lerp_to_Static_Settings;                           // 0x03D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Transition_In_Time;                                // 0x03E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Transition_State;                                  // 0x03E8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Timer;                                             // 0x03F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Particle_Collision_Enabled;                        // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Ceiling_Check_Height;                              // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spawn_Direction_Forward_Bias;                      // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spawn_Box_Height;                                  // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Spawn_Distance;                                // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spawn_Distance_Distribution;                       // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minimum_Particle_Distance;                         // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                World_Spawn_Offset;                                // 0x0430(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Camera_Forward_Spawn_Offset;                       // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Water_Level;                                   // 0x0450(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Water_Level;                                       // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             Weather_Particle_Collision_Channel;                // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Rain_Particles;                             // 0x0461(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_462[0x6];                                      // 0x0462(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Rain_Particle_Spawn_Rate;                      // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Rain_GPU_Particle_Spawn_Multiplier;                // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rain_Drops_Scale;                                  // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Rain_Particle_Color_Multiplier;                    // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rain_Drops_Alpha;                                  // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rain_Refraction_Intensity;                         // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rain_Ambient_Light_Intensity;                      // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rain_Particles_Time_Dilation;                      // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Render_Raindrop_Decals;                            // 0x04AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AD[0x3];                                      // 0x04AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Splash_Frequency;                                  // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Splash_Particles_Scale;                            // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Duplicate_Splash_Range;                        // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Snow_Particles;                             // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Snow_Particle_Spawn_Rate;                      // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_GPU_Particle_Spawn_Multiplier;                // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Flakes_Scale;                                 // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Flakes_Alpha;                                 // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Ambient_Light_Intensity;                      // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Particles_Time_Dilation;                      // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Snow_Particle_Color_Multiplier;                    // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Snow_Flakes_Stick_to_Surfaces;                     // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_511[0x7];                                      // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Snow_Flakes_Stick_Time;                            // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Spawn_Lightning_Flashes;                           // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_521[0x7];                                      // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Lightning_Flash_Interval__Min_;                    // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Interval__Max_;                    // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Timing_Randomization;              // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Lightning_Effect_Color;                            // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Lightning_Flash_Light_Source;                      // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_551[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Lightning_Flash_Light_Source_Color;                // 0x0554(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_564[0x4];                                      // 0x0564(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Maximum_Lightning_Flash_Light_Intensity;           // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Lightning_Flashes_Cast_Shadows;                    // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lightning_Flashes_Cast_Light_Shaft_Bloom;          // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_572[0x6];                                      // 0x0572(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Lightning_Flash_Light_Shaft_Intensity;             // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Minimum_Distance;                  // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Maximum_Distance;                  // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Obscured_Lightning;                         // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Obscured_Lightning_Spawn_Rate;                     // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Height_Offset;                           // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Fog_Particles;                              // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A9[0x7];                                      // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Fog_Particle_Percentage__Rain_;                // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Fog_Particle_Percentage__Snow_;                // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Fog_Particle_Percentage__Dust_;                // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Particle_Intensity__Rain_;                     // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Particle_Intensity__Snow_;                     // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Particle_Intensity__Dust_;                     // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Particles_Draw_Distance;                       // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWindDirectionalSource*                 Wind_Directional_Source_Actor__for_SpeedTree_;     // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Material_Wetness;                              // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Material_Snow_Coverage;                        // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Dust_Coverage;                                 // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Material_Effects_Take_Time_to_Change;              // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time_for_Materials_to_Get_Wet;                     // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Time_for_Materials_to_Dry_Out;                     // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Time_for_Materials_to_Gather_Snow;                 // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Time_for_Snow_to_Melt;                             // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Time_for_Materials_to_Gather_Dust;                 // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Amount_of_Snow_to_Turn_to_Wetness_when_Melted;     // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Force_Scale;                                  // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snow_Delta;                                        // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Random_Weather_Variation;                      // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Start_With_a_Random_Weather_Type;                  // 0x0651(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_652[0x6];                                      // 0x0652(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Weather_Type_Change_Minimum_Interval;              // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Weather_Type_Change_Maximum_Interval;              // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Transition_Length;                                 // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TMap<class UUDS_Weather_Settings_C*, double>  Weather_Type_Probabilities__Spring_;               // 0x0670(0x0050)(Edit, BlueprintVisible)
	TMap<class UUDS_Weather_Settings_C*, double>  Weather_Type_Probabilities__Summer_;               // 0x06C0(0x0050)(Edit, BlueprintVisible)
	TMap<class UUDS_Weather_Settings_C*, double>  Weather_Type_Probabilities__Autumn_;               // 0x0710(0x0050)(Edit, BlueprintVisible)
	TMap<class UUDS_Weather_Settings_C*, double>  Weather_Type_Probabilities__Winter_;               // 0x0760(0x0050)(Edit, BlueprintVisible)
	bool                                          Blend_Season_Probabilities;                        // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Avoid_Extreme_Cloud_Coverage_Shifts;               // 0x07B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Avoid_Repeating_Weather_Types;                     // 0x07B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Avoid_Changing_Directly_from_Snow_to_Rain__Or_Vice_Versa_; // 0x07B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B4[0x4];                                      // 0x07B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Extreme_Cloud_Coverage_Shift_Theshold;             // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Enable_Rain_Sounds;                                // 0x07C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C1[0x7];                                      // 0x07C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Rain_Volume;                                       // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Distant_Thunder_Sounds;                     // 0x07D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D1[0x7];                                      // 0x07D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Distant_Thunder_Volume;                            // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Close_Thunder_Sounds;                       // 0x07E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E1[0x7];                                      // 0x07E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Close_Thunder_Volume;                              // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Close_Thunder_Delay_Per_KM;                        // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Wind_Sounds;                                // 0x07F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F9[0x7];                                      // 0x07F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Wind_Volume;                                       // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Whistling_Volume;                             // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Intended_Cloud_Speed;                              // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Intended_Cloud_Coverage;                           // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Intended_Cloud_Direction;                          // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Speed_Multiplier;                            // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Runtime;                                           // 0x0830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_831[0x7];                                      // 0x0831(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Fog_Particle_Camera_Offset;                        // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Directional_Source_Intensity_Scale;           // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Bolt_Length;                             // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Minimum_Length;                    // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Maximum_Length;                    // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Replicate_Lightning_Direction;                     // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_861[0x7];                                      // 0x0861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Lightning_Flash_Max_Angle_from_Forward;            // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Lightning_Flash_Length;                            // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flashing_Lightning;                                // 0x0878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_879[0x7];                                      // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Lightning_Flash_Timer;                             // 0x0880(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Lightning_Flash_Curve;                             // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EUDS_TemperatureType                          Temperature_Scale;                                 // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_891[0x7];                                      // 0x0891(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Base_Summer_Temperature;                           // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Autumn_Temperature;                           // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Winter_Temperature;                           // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Spring_Temerature;                            // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Nighttime_Factor;                                  // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Factor;                                   // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Raining_Factor;                                    // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Evening_Factor;                                    // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Snowing_Factor;                                    // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Random_Factor;                                     // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Interior_Temperature;                              // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Interior_Insulation;                               // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Minimum_Valid_Temperature;                         // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Maximum_Valid_Temperature;                         // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Cloud_Speed;                                   // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Dynamic_Landscape_Weather_Effects;          // 0x0910(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_911[0x7];                                      // 0x0911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Weather_Speed;                                     // 0x0918(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EUDS_ControlPointMode                         Control_Point_Location_Source;                     // 0x0920(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_921[0x7];                                      // 0x0921(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Custom_Control_Point_Location;                     // 0x0928(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dust_0;                                            // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Render_Target_Area_for_Dynamic_Puddles;            // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Depth;                                        // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Depth;                                        // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Apply_Dynamic_Trails_to_Snow;                      // 0x0960(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Apply_Dynamic_Trails_to_Dust;                      // 0x0961(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_962[0x6];                                      // 0x0962(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Dust_Z_Normal_Cutoff;                              // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Z_Normal_Falloff;                             // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Texture_Scale;                                // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dust_Parallax_Sample_Scale;                        // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Compression_Brush_Spread;                     // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dust_Compression_Brush_Scatter;                    // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dust_Compression_Brush_Size_Scatter;               // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dust_Compression_Fade_Speed_Idle;                  // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Compression_Fade_Speed_Active;                // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Compression_Brush_Size;                       // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dust_Compression_Normal_Map_Intensity;             // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dust_Buildup;                                      // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Frames_Per_Update;                                 // 0x09C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Increasing_Material_Snow_Coverage;                 // 0x09CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9CD[0x3];                                      // 0x09CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Player_Pawn_Location;                              // 0x09D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Player_Camera_Location;                            // 0x09E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Control_Point_Location;                            // 0x0A00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Apply_Interaction_Ripples_to_Puddles;              // 0x0A18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A19[0x7];                                      // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Puddles_Z_Normal_Cutoff;                           // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Puddles_Z_Normal_Falloff;                          // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Puddle_Coverage;                                   // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Wetness_when_Raining;                         // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Wetness_when_Clear;                           // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Puddle_Sharpness;                                  // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Roughness;                                   // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Ripple_Spread;                                     // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Ripple_Fade_Speed;                                 // 0x0A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Puddle_Normals_Intensity;                          // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TArray<class UPhysicalMaterial*>              Physical_Materials_which_enable_DLWE_Interactions_on_nonMinusLandscapes; // 0x0A70(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	EObjectTypeQuery                              Landscape_Object_Type;                             // 0x0A80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_A81[0x7];                                      // 0x0A81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicalMaterial*>              Dust_Sounds_and_Particles;                         // 0x0A88(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	TArray<class UPhysicalMaterial*>              Physical_Materials_which_disable_Puddle_Sounds_and_Particles; // 0x0A98(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	double                                        Variation_Clouds_Scale;                            // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Enable_WOV_Material_Effect_Target;                 // 0x0AB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB1[0x7];                                      // 0x0AB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WOV_Target_Size;                                   // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WOV_Target_Update_Threshold__Inside_Volume_;       // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        WOV_Target_Update_Threshold__Outside_Volume_;      // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TArray<class AWeather_Override_Volume_C*>     Weather_Override_Volumes;                          // 0x0AD0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Mask_Target_Resolution;                            // 0x0AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_AE4[0x4];                                      // 0x0AE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Tiling_Ripples_Scale;                              // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Custom_Lightning_Location;                     // 0x0AF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF1[0x7];                                      // 0x0AF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Custom_Lightning_Location;                         // 0x0AF8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Using_Global_Weather_State;                        // 0x0B10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Resetting_Particle_Emitters;                       // 0x0B11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B12[0x6];                                      // 0x0B12(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Current_Max_Interact_Distance;                     // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Mobile;                                            // 0x0B20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B21[0x7];                                      // 0x0B21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Custom_Lightning_Target;                           // 0x0B28(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Lightning_Intensity;                       // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Current_Lightning_Location;                        // 0x0B48(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Lightning_Angle;                           // 0x0B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeather_Override_Volume_C*             Current_Weather_Override_Volume;                   // 0x0B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         WOV_Target_Resolution;                             // 0x0B70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Currently_in_a_Weather_Override_Volume;            // 0x0B74(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B75[0x3];                                      // 0x0B75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                DLWE_Brush_Size_Buffer;                            // 0x0B78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       Ripple_Brushes;                                    // 0x0B88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ALandscape*>                     Landscape_Actors;                                  // 0x0B98(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TSoftObjectPtr<class UTextureRenderTarget2D>  DLWE_MaskTarget;                                   // 0x0BA8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                DLWE_RenderTarget_Center;                          // 0x0BD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DLWE_Recenter_Offset;                              // 0x0BF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DLWE_Frame_Count;                                  // 0x0C08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_DLWE_Mode                                Current_DLWE_Mode;                                 // 0x0C0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C0D[0x3];                                      // 0x0C0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      Cloud_Reference_Array;                             // 0x0C10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UTextureRenderTarget2D*>         Render_Targets_to_Release_Next_Frame;              // 0x0C20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        DLWE_Brush_Locations_Buffer;                       // 0x0C30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                DLWE_Brush_Strength_Buffer;                        // 0x0C40(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Use_Occlusion_to_Attenuate_Sounds_in_Interiors;    // 0x0C50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C51[0x7];                                      // 0x0C51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Attenuation;                                   // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Min_LPF_Frequency;                                 // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EUDS_Occlusion_Mode                           Occlusion_Sampling_Mode;                           // 0x0C68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C69[0x7];                                      // 0x0C69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Interior_Trace_Distance;                       // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sound_Occlusion_Update_Period;                     // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               Occlusion_Trace_Channel;                           // 0x0C80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Post_Process_Wind_Fog;                      // 0x0C81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C82[0x6];                                      // 0x0C82(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PPWF_Intensity_from_Fog;                           // 0x0C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TArray<class UAudioComponent*>                Rain_Sound_Components;                             // 0x0C90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UAudioComponent*>                Wind_Sound_Components;                             // 0x0CA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        PPWF_Intensity_from_Rain;                          // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        PPWF_Intensity_from_Snow;                          // 0x0CB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        PPWF_Intensity_from_Dust;                          // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        PPWF_Fade_Distance;                                // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PPWF_Max_Sample_Distance;                          // 0x0CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        PPWF_Sample_Step_Distance;                         // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        PPWF_3D_Noise_Scale;                               // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Post_Process_Wind_Fog_MID;                         // 0x0CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Time_Random_Offset;                                // 0x0CF0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Wind_Direction_Variation;                   // 0x0CF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CF9[0x7];                                      // 0x0CF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Maximum_Wind_Direction_Variation;                  // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Wind_Direction;                            // 0x0D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Variation_Speed;                                   // 0x0D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Variation_Time;                               // 0x0D18(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Run_By_Counterpart;                                // 0x0D20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D21[0x3];                                      // 0x0D21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Current_Tick_Set;                                  // 0x0D24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spread_Out_Tick_Behaviors_Over_3_Frames;           // 0x0D28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Initialized;                                       // 0x0D29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2A[0x6];                                      // 0x0D2A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, EUDS_PropertyType>          Properties;                                        // 0x0D30(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                Occlusion_Location;                                // 0x0D80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Camera_Location_for_Occlusion;                 // 0x0D98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D99[0x7];                                      // 0x0D99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Snow_Coverage_Lights_Up_Height_Fog;                // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Started_Raining;                                   // 0x0DA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Started_Snowing;                                   // 0x0DB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Finished_Raining;                                  // 0x0DC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Finished_Snowing;                                  // 0x0DD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Getting_Cloudy;                                    // 0x0DE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Clouds_Clearing;                                   // 0x0DF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ED_Raining;                                        // 0x0E08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ED_Snowy;                                          // 0x0E09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ED_Cloudy;                                         // 0x0E0A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E0B[0x5];                                      // 0x0E0B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WOV_Temperature_Offset;                            // 0x0E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Screen_Droplets;                            // 0x0E18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E19[0x7];                                      // 0x0E19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Screen_Center_Strength;                            // 0x0E20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Edge_Strength;                              // 0x0E28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Camera_Facing_Rain_Bias;                           // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Droplet_Tiling;                                    // 0x0E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blur_Radius;                                       // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Screen_Droplets_MID;                               // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Drips_Intensity;                                   // 0x0E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Drops_Intensity;                                   // 0x0E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Drops_Time;                                        // 0x0E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Screen_Droplets_Parent_Material;                   // 0x0E68(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                Player_Camera_Forward_Vector;                      // 0x0E98(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rain_System_Spawning;                              // 0x0EB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Obscured_Lightning_System_Spawning;                // 0x0EB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Current_Weather_State_Changed;                     // 0x0EB2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EB3[0x5];                                      // 0x0EB3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Unoccluded_Rain_Volume;                            // 0x0EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Current_Material_State_Changed;                    // 0x0EC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          First_Tick;                                        // 0x0EC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_with_New_Changes;                         // 0x0EC2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Dust_Particles;                             // 0x0EC3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC4[0x4];                                      // 0x0EC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Dust_Particle_Spawn_Rate;                      // 0x0EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Particle_Scale;                               // 0x0ED0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dust_Particle_Color;                               // 0x0ED8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Particle_Alpha;                               // 0x0EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Wind_Debris;                                // 0x0EF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EF1[0x7];                                      // 0x0EF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Wind_Debris_Amount;                                // 0x0EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Debris_Scale;                                      // 0x0F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Debris_Particle_Alpha;                             // 0x0F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Wind_Debris_Atlas;                                 // 0x0F10(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Weather_Mask_Brush_Target;                         // 0x0F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Weather_Brush_Target_Corner;                       // 0x0F48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weather_Mask_Target_Size;                          // 0x0F58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weather_Mask_Brush_Target_Resolution;              // 0x0F5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AWeather_Mask_Brush_C*>          All_Weather_Mask_Brushes;                          // 0x0F60(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Weather_Mask_Target_in_Use;                        // 0x0F70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F71[0x7];                                      // 0x0F71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Weather_Brush_Target_Center;                       // 0x0F78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Weather_Mask_Target_Half_Size;                     // 0x0F88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Weather_Mask_Projection_Value;                     // 0x0F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AWeather_Mask_Brush_C*>          DLWE_Relevant_Weather_Mask_Brushes;                // 0x0F98(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                Weather_Brush_Target_Root_Position;                // 0x0FA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Triggered_Starting_Dispatchers;                    // 0x0FC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC1[0x7];                                      // 0x0FC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUDS_Weather_Settings_C*                Old_Weather_State;                                 // 0x0FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUDS_Weather_Settings_C*                Global_Weather_State;                              // 0x0FD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUDS_Weather_Settings_C*                Local_Weather_State;                               // 0x0FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Material_Wetness;                       // 0x0FE0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Material_Snow;                          // 0x0FE8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUDS_Weather_Settings_C*                Last_Local_Weather_State;                          // 0x0FF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Intended_Fog;                                      // 0x0FF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Snow_System_Spawning;                              // 0x1000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Wind_Debris_System_Spawning;                       // 0x1001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1002[0x6];                                     // 0x1002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Intended_Dust;                                     // 0x1008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dust_Particles_Time_Dilation;                      // 0x1010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dust_System_Spawning;                              // 0x1014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1015[0x3];                                     // 0x1015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Material_Dust_Coverage;                            // 0x1018(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Material_Dust;                          // 0x1020(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DLWE_Snow_Mode;                                    // 0x1028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_SeasonMode                               Season_Mode;                                       // 0x102C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102D[0x3];                                     // 0x102D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Season;                                            // 0x1030(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Individual_Seasons;                                // 0x1038(0x0010)(Edit, BlueprintVisible)
	TArray<class UAudioComponent*>                Light_Rain_Sound_Components;                       // 0x1048(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        Unoccluded_Light_Rain_Volume;                      // 0x1058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Cloud_Coverage;                                // 0x1060(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Rain;                                          // 0x1068(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Wind_Intensity;                                // 0x1070(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Snow;                                          // 0x1078(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_0;                                       // 0x1080(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Fog;                                           // 0x1088(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Dust;                                          // 0x1090(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Material_Wetness;                              // 0x1098(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Material_Snow_Coverage;                        // 0x10A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Material_Dust_Coverage;                        // 0x10A8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUDS_Weather_Settings_C*                Manual_Weather_State;                              // 0x10B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Lerp_to_Static_Settings;                       // 0x10B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Wind_Cue_Sound;                                    // 0x10C0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Rain_Cue_Sound;                                    // 0x10F0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Light_Rain_Cue_Sound;                              // 0x1120(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Distant_Thunder_Cue_Sound;                         // 0x1150(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Wind_Whistling_Cue_Sound;                          // 0x1180(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Clouds_Diverse_Texture;                            // 0x11B0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          Rain_Particle_Niagara_System;                      // 0x11E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          Snow_Particle_Niagara_System;                      // 0x1210(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          Dust_Particle_Niagara_System;                      // 0x1240(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          Wind_Debris_Niagara_System;                        // 0x1270(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          Obscured_Lightning_Niagara_System;                 // 0x12A0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Post_Process_Wind_Fog_Parent_Material;             // 0x12D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Sand_Forming;                                      // 0x1300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Sand_Clearing;                                     // 0x1310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ED_Dusty;                                          // 0x1320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Rainbow;                                    // 0x1321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1322[0x6];                                     // 0x1322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Rainbow_Strength;                              // 0x1328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Strength_from_Rain;                                // 0x1330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Strength_from_Fog;                                 // 0x1338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Strength_in_any_Weather;                           // 0x1340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_0;                                             // 0x1348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Rainbow_Visibility;                        // 0x1350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Mask_Rainbow_Above_Clouds;                         // 0x1358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Mask_Rainbow_Below_Water;                          // 0x1360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_Weather_Display_Names                    ED_CurrentWeather;                                 // 0x1368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1369[0x7];                                     // 0x1369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Weather_Display_Name_Changed;                      // 0x1370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Support_Virtual_Heightfield_Mesh;                  // 0x1380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1381[0x7];                                     // 0x1381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARuntimeVirtualTextureVolume*           VHFM_Runtime_Virtual_Texture_Volume;               // 0x1388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        VHFM_Invalidate_Long_Range_Distance;               // 0x1390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        VHFM_Invalidate_Long_Range_Threshold;              // 0x1398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        VHFM_Invalidate_Mid_Range_Distance;                // 0x13A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        VHFM_Invalidate_Mid_Range_Threshold;               // 0x13A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        VHFM_Invalidate_Short_Range_Distance;              // 0x13B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        VHFM_Invalidate_Short_Range_Threshold;             // 0x13B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                VHFM_Invalidate_Long_Range_Buffer;                 // 0x13C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                VHFM_Invalidate_Mid_Range_Buffer;                  // 0x13D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                VHFM_Invalidate_Short_Range_Buffer;                // 0x13F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TArray<double>                                Cached_Floats_Old;                                 // 0x1408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Cached_Floats_New;                                 // 0x1418(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Cached_Vectors_Old;                                // 0x1428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Cached_Vectors_New;                                // 0x1438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Cache_Alpha;                                       // 0x1448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Filling_Starting_Cache;                            // 0x1450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1451[0x7];                                     // 0x1451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  Cached_Value_Changing;                             // 0x1458(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Cache_Period;                                      // 0x1468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cached_Wind_Direction;                             // 0x1470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fog_Particles_Active;                              // 0x1478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1479[0x7];                                     // 0x1479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Cached_Rain_Velocity;                              // 0x1480(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Last_Recenter_Check_Location;                      // 0x1498(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Local_Weather_Change_Speed;                // 0x14B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Update_DLWE_State;                                 // 0x14B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class USoundMix*                              Outdoor_Sound_Mix_Modifier;                        // 0x14C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Attenuation_for_UDS_Outdoor_Sound;             // 0x14D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Update_Season_Interval;                            // 0x14D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FUDS_and_UDW_State                     State_Being_Applied;                               // 0x14E0(0x0178)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UTextureRenderTarget2D>  Weather_Volume_Target;                             // 0x1658(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               WOV_Target_Brush_MID;                              // 0x1688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              WOV_Target_Corner_Position;                        // 0x1690(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Weather_Override_Volume_Target_Location;           // 0x16A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WOV_Material_Effect_Target_Active;                 // 0x16B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Shutting_Down;                                     // 0x16B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Weather_Override_Volume_Contributing_Snow_Coverage; // 0x16BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16BB[0x5];                                     // 0x16BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 Mask_Buffer_Target;                                // 0x16C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 UDS_Version;                                       // 0x16C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UUDS_VersionInfo_C*                     UDS_Version_Info;                                  // 0x16D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Anti_Aliasing_Method;                              // 0x16E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Season_Day_Offset;                                 // 0x16E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TArray<class AWeather_Mask_Projection_Box_C*> All_Weather_Mask_Projection_Boxes;                 // 0x16E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AWeather_Mask_Projection_Box_C*> DLWE_Relevant_Projection_Boxes;                    // 0x16F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AWeather_Override_Volume_C*>     WOV_References_to_Remove;                          // 0x1708(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AWeather_Mask_Brush_C*>          Mask_Brush_References_to_Remove;                   // 0x1718(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AWeather_Mask_Projection_Box_C*> Projection_Box_References_to_Remove;               // 0x1728(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                Editor_WOV_Target_Root;                            // 0x1738(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Editor_Mask_Target_Root;                           // 0x1750(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              WOV_Wind_Direction;                                // 0x1768(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Current_Lightning_Target_Offset;                   // 0x1778(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cache_Current_Timer;                               // 0x1790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Update_All_Cached_Properties;                      // 0x1798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1799[0x7];                                     // 0x1799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterial>               Splash_Material_Decal;                             // 0x17A0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterial>               Splash_Material_Translucent;                       // 0x17D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EUDS_Project_Mode                             Project_Mode;                                      // 0x1800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UDS_Needs_Updating;                                // 0x1801(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Not_Limiting_Construction;                         // 0x1802(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1803[0x5];                                     // 0x1803(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Last_Construction_Script_Time;                     // 0x1808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_Trace_Debugs;                                 // 0x1810(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_1811[0x7];                                     // 0x1811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Rainbow_MID;                                       // 0x1818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Rainbow_Material_2D;                               // 0x1820(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Rainbow_Material_Volumetric;                       // 0x1850(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        Weather_Particle_Motion_Stretch;                   // 0x1880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Particle_Sprite_Motion_Blur_with_Camera_Movement;  // 0x1888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Previous_Temperature_Scale;                        // 0x1890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Apply_Changes_Above_Volumetric_Cloud_Layer;        // 0x1891(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1892[0x6];                                     // 0x1892(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Rain_Multiplier_Above_Clouds;                      // 0x1898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Multiplier_Above_Clouds;                      // 0x18A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Multiplier_Above_Clouds;                      // 0x18A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Multiplier_Above_Clouds;                       // 0x18B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Multiplier_Above_Clouds;                 // 0x18B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Multiplier_Above_Clouds;                      // 0x18C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      BloodScreenDroplets;                               // 0x18C8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void Add_Weather_Override_Volume_to_Array(class AWeather_Override_Volume_C* Weather_Override_Volume);
	void _Local_Weather(class UUDS_Weather_Settings_C* Target_State_Object, const struct FVector& Test_Location);
	void Apply_Interior_Temperature_with_Occlusion(double Temp, double Occlusion, double* Out);
	void Apply_Max_to_Material_Effects(class UUDS_Weather_Settings_C* Weather_0, double* Snow_Coverage, double* Wetness, double* Param_Dust_0);
	void Apply_State(const struct FUDS_and_UDW_State& State);
	void Approximate_Weather_Mask_Brush_Effect(class AWeather_Mask_Brush_C* Brush, const struct FVector2D& Location, double Height, double* Out, bool* Cancel);
	void Audio_Update();
	void Cache_Float(EUDW_CachedProperties Property, double Set_Value);
	void Cache_Properties();
	void Cache_Vector(EUDW_CachedProperties Property, const struct FVector& Set_Value);
	void Cached_Wind_Rotation(struct FRotator* Rot);
	void Change_to_Random_Weather(double Time_to_Transition_to_Random_Weather__Seconds_, bool Reset_Particle_Emitters);
	void Change_Weather(class UUDS_Weather_Settings_C* New_Weather_Type, double Time_To_Transition_To_New_Weather__Seconds_, bool Reset_Particle_Emitters);
	void Check_for_DLWE_Recenter();
	void Check_for_Events_to_Dispatch();
	void Check_Point_for_Puddles_Snow_Or_Dust(const struct FVector& Location, const struct FVector& Ground_Normal, class UPhysicalMaterial* Physical_Material, double* Puddle_Depth, double* Snow_Depth_0, double* Dust_Depth_0);
	void Check_to_change_DLWE_Mode();
	void Check_to_Change_Temperature_Scale();
	void Check_To_Limit_Construction();
	void Check_to_Recenter_Weather_Override_Volume_Target();
	void Check_to_Redraw_Weather_Mask_Target();
	void Check_to_Turn_on_UDS_Rainbow();
	void Check_UDS_Version();
	void Clients_Transition_Start();
	void Close_Thunder_Sound_Delay(double* Delay);
	void Clouds_Clearing__DelegateSignature();
	double Combined_Wind_Direction();
	void Compare_Weather_States(class UUDS_Weather_Settings_C* A, class UUDS_Weather_Settings_C* B, double* Difference);
	void Compress_DLWE_Snow(const struct FVector& Location, double Size);
	void ConstructionScript_Function(bool Run_By_Counterpart_0);
	void Convert_Temperature_Scale(double Input, EUDS_TemperatureType In_Scale, EUDS_TemperatureType Out_Scale, bool Relative_Degrees, bool Snap, double* Output);
	void Copy_Weather_State(class UUDS_Weather_Settings_C* Source, class UUDS_Weather_Settings_C* Target, bool Set_Material_Effects);
	void Create_Cloud_Reference_Array();
	void Create_Weather_State_Objects();
	void Current_Dust_Velocity(struct FVector* Velocity);
	void Current_Lightning_Period_and_Status(double Param_Lightning_0, double* Period, bool* Enabled);
	void Current_Normalized_Wind_Direction(struct FVector* Wind_Vector);
	void Current_PPWF_Intensity(double* Out);
	void Current_Rain_Snow_Spawn_Rate(double Intensity, double Spawn_Rate, double Wind_Bonus, double* Rate);
	void Current_Rain_Velocity(struct FVector* Velocity);
	void Current_Snow_Velocity(struct FVector* Velocity);
	void Current_Wind_Debris_Velocity(struct FVector* Velocity);
	void Currently_Cloudy(bool* Yes);
	void Currently_Dusty(bool* Yes);
	void Currently_Raining(bool* Yes);
	void Currently_Snowing(bool* Yes);
	void Delta_Time_with_Tick_Set(double* Delta);
	void Destroy_Close_Thunder_Component(class USceneComponent* Component);
	void Distant_Thunder_Sound_Intensity(double* Int);
	void DLWE_Compression_Brush(const struct FVector& Location, double Size, int32 Resolution, double Spread, struct FVector2D* Corner_Position, struct FVector2D* Brush_Size);
	void DLWE_Render_Target_Area(double* Area);
	void DLWE_Render_Target_Mapping(struct FLinearColor* Mapping);
	void Does_DLWE_Need_Recentering(bool* Needs_X_Axis_Recenter, bool* Needs_Y_Axis_Recenter);
	void Draw_Weather_Mask_Brush_Target(bool Use_Editor_Location);
	void Draw_Weather_Override_Volume_Target();
	void Sand_Clearing__DelegateSignature();
	void Sand_Forming__DelegateSignature();
	void End_Lightning_Flash();
	void ExecuteUbergraph_Ultra_Dynamic_Weather(int32 EntryPoint);
	void Fade_DLWE_Target_Over_Time();
	void Filter_Probability_Map(const TMap<class UUDS_Weather_Settings_C*, double>& Probability_Map, class UUDS_Weather_Settings_C* Current_Random_Type, TMap<class UUDS_Weather_Settings_C*, double>* Filtered_Probability_Map);
	void Finished_Raining__DelegateSignature();
	void Finished_Snowing__DelegateSignature();
	void Flash_Lightning(double Angle, bool Use_Custom_Lightning_Location_0, const struct FVector& Custom_Lightning_Location_0, const struct FVector& Custom_Target_Location);
	void Force_All_Clients_Cache();
	void Force_Tick();
	void Get_Cached_Float(EUDW_CachedProperties Property, double* Value);
	void Get_Cached_Vector(EUDW_CachedProperties Property, struct FVector* Value);
	void Get_Close_Thunder_Sound_Occlusion(double* Volume, double* LPF);
	void Get_Current_Temperature(bool Apply_Interior_Temperature, class UUDS_Weather_Settings_C* Custom_Weather_State_Object, double* Celsius, double* Fahrenheit);
	void Get_Display_Name_for_Current_Weather(class FString* As_String, EUDS_Weather_Display_Names* As_Enumerator);
	void Get_Intended_Cloud_Direction(double* Intended_Cloud_Direction_0);
	void Get_Intended_Cloud_Speed(double* Intended_Cloud_Speed_0);
	void Get_Intended_Water_Level(bool* Using_Water_Level, double* Water_Level_0);
	void Get_Starting_Weather_Override_Volumes();
	void Get_State_for_Saving(struct FUDS_and_UDW_State* UDW_State);
	void Get_Updated_Control_Point_Location();
	void Get_Weather_Particle_Collision_Channel(ECollisionChannel* Channel);
	void Getting_Cloudy__DelegateSignature();
	void Global_Lightning_Internal(double Angle);
	void Global_Lightning_Timer();
	void Hard_Refresh_Cached_Properties();
	void Increment_Cache_Timer();
	void Initialize_Occlusion();
	void Initialize_Weather();
	void Initialize_Weather_Mask_Target();
	void Initialize_Weather_Override_Volume_Target();
	void Invalidate_VHFM_Level(double Threshold, double Distance, struct FVector& Buffer, const struct FVector& Current, bool* Continue);
	void Invalidate_VHFM_With_Material_States();
	void Is_Cached_Property_Changing(EUDW_CachedProperties Property, bool* Yes);
	void Is_Point_in_DLWE_Space(const struct FVector& Point, bool* Yes);
	void Lerp_Between_Weather_States(class UUDS_Weather_Settings_C* A, class UUDS_Weather_Settings_C* B, double Alpha, class UUDS_Weather_Settings_C* Target_State, bool Set_Material_Effects, bool Use_Bias_for_Material_Effects);
	void Lerp_Yaw_Angles(double Angle_A, double Angle_B, double Alpha, double* Out);
	void Light_Rain_Sound_Intensity(double* Int);
	void Lightning_Bolt_Target_Offset(struct FVector* Out);
	void Lightning_Distance_Range(double* Range);
	void Lightning_Flash_Location(struct FVector* Loc);
	void Lightning_World_Height(double* Height);
	void Load_Required_Assets();
	void Local_Lightning_Internal(class AWeather_Override_Volume_C* Volume, double Angle);
	void Make_Manual_State();
	void Make_Outdoor_Sound_Mix();
	struct FVector PPWF_Velocity();
	void Print_Current_Status_To_Screen();
	void Query_Project_Settings();
	void Rain_Sound_Intensity(double* Int);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void Recenter_DLWE_Render_Target(class UTextureRenderTarget2D* Render_Target, ETextureRenderTargetFormat Format, const struct FLinearColor& Clear_Color, class UMaterialInterface* EdgeFade_Material, int32 Resolution, bool Draw_Edge_Fade);
	void Recycle_Render_Targets();
	void Remove_Old_Drawing_Actors();
	void Report_Removal_of_Drawing_Actor(class AActor* Actor);
	void Reset_All_Emitters();
	void Restart_Random_Weather();
	void Ripple_DLWE_Puddle(const struct FVector& Location, double Size, double Strength);
	void Sample_Current_Sound_Occlusion_Values(double* NonMinusDirectional_Occlusion, double* XPlus_Occlusion, double* YPlus_Occlusion, double* XMinus_Occlusion, double* YMinus_Occlusion);
	double Scale_Cache_Period();
	void Set_Cache_Alpha();
	void Set_Project_Mode(EUDS_Project_Mode Mode);
	void Set_Replicated_Old_Weather_State();
	void Set_Season();
	void Set_Shared_Weather_Particle_Parameters(class UNiagaraComponent* System);
	void Set_up_Post_Process_Wind_Fog();
	void Set_Up_Rainbow();
	void Set_Up_Rainbow_MID();
	void Size_Cache_Arrays();
	void Sort_Brushes_by_Height(TArray<class AWeather_Mask_Brush_C*>& Brushes, TArray<class AWeather_Mask_Brush_C*>* Sorted_Brushes);
	void Sort_Weather_Override_Volumes();
	void _Update_DLWE_Targets(bool First_Run);
	void Start_Screen_Droplets();
	void Started_Raining__DelegateSignature();
	void Started_Snowing__DelegateSignature();
	void Test_Actor_for_Weather_Exposure(class AActor* Actor, bool Test_Colliding_Components_Only, class UUDS_Weather_Settings_C* Custom_Weather_State_Object, double* Rain_Exposure, double* Snow_Exposure, double* Wind_Exposure, double* Dust_Exposure);
	void Test_Component_for_Wind_Exposure(class UPrimitiveComponent* Component, double* Wind_Exposure);
	void Tick_Lightning_Flash();
	void Timed_Override_with_New_Changes();
	void Trace_Bounds_for_Exposure_Values(const struct FVector& Bounds_Origin, const struct FVector& Bounds_Extent, TArray<class AActor*>& Actors_to_Ignore, bool Test_Weather, double* Exposure_Value);
	void Update_Active_Dust_Parameters();
	void Update_Active_Rain_Parameters();
	void Update_Active_Snow_Parameters();
	void Update_Active_Variables();
	void Update_Active_Wind_Debris_Parameters();
	void Update_Audio_Component_Activity(class UAudioComponent* Tested_Component, TArray<class UAudioComponent*>& Affected_Components, double Current_Sound_Intensity, double Start_Randomization, bool Enable_Bool);
	void Update_Current_Global_and_Local_Weather_State();
	void Update_Current_Material_Effects();
	void Update_DLWE_Component_States();
	void Update_DLWE_Parameters();
	void Update_DLWE_Puddle_Ripples();
	void Update_DLWE_Snow_Compressions();
	void Update_DLWE_State__DelegateSignature(EUDS_DLWE_Mode Current_Mode, const struct FVector& Render_Target_Center, const struct FVector& Mapping_Space);
	void Update_Enabled_Sound_Components();
	void Update_Fog_Particle_Parameters(class UFXSystemComponent* Target, double Max_Particle_Percentage, double Weather_Intensity, double Particle_Intensity);
	void Update_Material_Effect_Parameters();
	void Update_Material_Effects();
	void Update_Obscured_Lightning_Glow();
	void Update_Old_State_With_Replicated_Variables();
	void Update_Outdoor_Sound_Mix();
	void Update_Post_Process_Wind_Fog();
	void Update_Rainbow();
	void Update_Rainbow_Intensity();
	void Update_Screen_Droplets();
	void Update_Season();
	void Update_Static_Variables();
	void Update_Weather_Settings_from_UDS(double Cloud_Coverage_0, double Param_Fog_0, double Param_Dust_0);
	void Update_WOV_Target_Coordinates(bool Use_Editor_Location);
	void UserConstructionScript();
	void Weather_Display_Name_Changed__DelegateSignature(EUDS_Weather_Display_Names Weather_Name);
	void Wind_Rotation(struct FRotator* Rot);
	void Wind_Sound_Intensity(double* Int);
	void Wind_Whistling_Sound_Intensity(double* Int);

	void Get_Rainbow_MID(bool* Rainbow_Enabled, class UMaterialInstanceDynamic** Mid) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ultra_Dynamic_Weather_C">();
	}
	static class AUltra_Dynamic_Weather_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUltra_Dynamic_Weather_C>();
	}
};
static_assert(alignof(AUltra_Dynamic_Weather_C) == 0x000008, "Wrong alignment on AUltra_Dynamic_Weather_C");
static_assert(sizeof(AUltra_Dynamic_Weather_C) == 0x0018F8, "Wrong size on AUltra_Dynamic_Weather_C");
static_assert(offsetof(AUltra_Dynamic_Weather_C, UberGraphFrame) == 0x000290, "Member 'AUltra_Dynamic_Weather_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rainbow) == 0x000298, "Member 'AUltra_Dynamic_Weather_C::Rainbow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Player_Occlusion) == 0x0002A0, "Member 'AUltra_Dynamic_Weather_C::Player_Occlusion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, LightRain_YMinus) == 0x0002A8, "Member 'AUltra_Dynamic_Weather_C::LightRain_YMinus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, LightRain_YPlus) == 0x0002B0, "Member 'AUltra_Dynamic_Weather_C::LightRain_YPlus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, LightRain_XMinus) == 0x0002B8, "Member 'AUltra_Dynamic_Weather_C::LightRain_XMinus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, LightRain_XPlus) == 0x0002C0, "Member 'AUltra_Dynamic_Weather_C::LightRain_XPlus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Particles) == 0x0002C8, "Member 'AUltra_Dynamic_Weather_C::Dust_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Debris_Particles) == 0x0002D0, "Member 'AUltra_Dynamic_Weather_C::Wind_Debris_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Particles) == 0x0002D8, "Member 'AUltra_Dynamic_Weather_C::Snow_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, ScreenDroplets) == 0x0002E0, "Member 'AUltra_Dynamic_Weather_C::ScreenDroplets' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_XPlus) == 0x0002E8, "Member 'AUltra_Dynamic_Weather_C::Wind_XPlus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_YMinus) == 0x0002F0, "Member 'AUltra_Dynamic_Weather_C::Rain_YMinus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_YPlus) == 0x0002F8, "Member 'AUltra_Dynamic_Weather_C::Rain_YPlus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_XMinus) == 0x000300, "Member 'AUltra_Dynamic_Weather_C::Rain_XMinus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_XPlus) == 0x000308, "Member 'AUltra_Dynamic_Weather_C::Rain_XPlus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_YMinus) == 0x000310, "Member 'AUltra_Dynamic_Weather_C::Wind_YMinus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_YPlus) == 0x000318, "Member 'AUltra_Dynamic_Weather_C::Wind_YPlus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_XMinus) == 0x000320, "Member 'AUltra_Dynamic_Weather_C::Wind_XMinus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, SpatializedAudioRoot) == 0x000328, "Member 'AUltra_Dynamic_Weather_C::SpatializedAudioRoot' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Post_Process_Wind_Fog) == 0x000330, "Member 'AUltra_Dynamic_Weather_C::Post_Process_Wind_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Random_Weather_Variation) == 0x000338, "Member 'AUltra_Dynamic_Weather_C::Random_Weather_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Whistling) == 0x000340, "Member 'AUltra_Dynamic_Weather_C::Wind_Whistling' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DistantThunder_Cue) == 0x000348, "Member 'AUltra_Dynamic_Weather_C::DistantThunder_Cue' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Obscured_Lightning) == 0x000350, "Member 'AUltra_Dynamic_Weather_C::Obscured_Lightning' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Light) == 0x000358, "Member 'AUltra_Dynamic_Weather_C::Lightning_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Root) == 0x000360, "Member 'AUltra_Dynamic_Weather_C::Root' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Particles) == 0x000368, "Member 'AUltra_Dynamic_Weather_C::Rain_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, UltraDynamicSky) == 0x000370, "Member 'AUltra_Dynamic_Weather_C::UltraDynamicSky' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather) == 0x000378, "Member 'AUltra_Dynamic_Weather_C::Weather' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cloud_Coverage) == 0x000380, "Member 'AUltra_Dynamic_Weather_C::Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Fog) == 0x000388, "Member 'AUltra_Dynamic_Weather_C::Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Intensity) == 0x000390, "Member 'AUltra_Dynamic_Weather_C::Wind_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain) == 0x000398, "Member 'AUltra_Dynamic_Weather_C::Rain' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow) == 0x0003A0, "Member 'AUltra_Dynamic_Weather_C::Snow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning) == 0x0003A8, "Member 'AUltra_Dynamic_Weather_C::Lightning' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust) == 0x0003B0, "Member 'AUltra_Dynamic_Weather_C::Dust' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Material_Wetness) == 0x0003B8, "Member 'AUltra_Dynamic_Weather_C::Material_Wetness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Material_Snow_Coverage) == 0x0003C0, "Member 'AUltra_Dynamic_Weather_C::Material_Snow_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Direction) == 0x0003C8, "Member 'AUltra_Dynamic_Weather_C::Wind_Direction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lerp_to_New_Settings) == 0x0003D0, "Member 'AUltra_Dynamic_Weather_C::Lerp_to_New_Settings' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lerp_to_Static_Settings) == 0x0003D8, "Member 'AUltra_Dynamic_Weather_C::Lerp_to_Static_Settings' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Transition_In_Time) == 0x0003E0, "Member 'AUltra_Dynamic_Weather_C::Transition_In_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Transition_State) == 0x0003E8, "Member 'AUltra_Dynamic_Weather_C::Transition_State' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Timer) == 0x0003F0, "Member 'AUltra_Dynamic_Weather_C::Timer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Particle_Collision_Enabled) == 0x0003F8, "Member 'AUltra_Dynamic_Weather_C::Particle_Collision_Enabled' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Ceiling_Check_Height) == 0x000400, "Member 'AUltra_Dynamic_Weather_C::Ceiling_Check_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Spawn_Direction_Forward_Bias) == 0x000408, "Member 'AUltra_Dynamic_Weather_C::Spawn_Direction_Forward_Bias' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Spawn_Box_Height) == 0x000410, "Member 'AUltra_Dynamic_Weather_C::Spawn_Box_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Spawn_Distance) == 0x000418, "Member 'AUltra_Dynamic_Weather_C::Max_Spawn_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Spawn_Distance_Distribution) == 0x000420, "Member 'AUltra_Dynamic_Weather_C::Spawn_Distance_Distribution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Minimum_Particle_Distance) == 0x000428, "Member 'AUltra_Dynamic_Weather_C::Minimum_Particle_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, World_Spawn_Offset) == 0x000430, "Member 'AUltra_Dynamic_Weather_C::World_Spawn_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Camera_Forward_Spawn_Offset) == 0x000448, "Member 'AUltra_Dynamic_Weather_C::Camera_Forward_Spawn_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Use_Water_Level) == 0x000450, "Member 'AUltra_Dynamic_Weather_C::Use_Water_Level' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Water_Level) == 0x000458, "Member 'AUltra_Dynamic_Weather_C::Water_Level' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Particle_Collision_Channel) == 0x000460, "Member 'AUltra_Dynamic_Weather_C::Weather_Particle_Collision_Channel' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Rain_Particles) == 0x000461, "Member 'AUltra_Dynamic_Weather_C::Enable_Rain_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Rain_Particle_Spawn_Rate) == 0x000468, "Member 'AUltra_Dynamic_Weather_C::Max_Rain_Particle_Spawn_Rate' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_GPU_Particle_Spawn_Multiplier) == 0x000470, "Member 'AUltra_Dynamic_Weather_C::Rain_GPU_Particle_Spawn_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Drops_Scale) == 0x000478, "Member 'AUltra_Dynamic_Weather_C::Rain_Drops_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Particle_Color_Multiplier) == 0x000480, "Member 'AUltra_Dynamic_Weather_C::Rain_Particle_Color_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Drops_Alpha) == 0x000490, "Member 'AUltra_Dynamic_Weather_C::Rain_Drops_Alpha' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Refraction_Intensity) == 0x000498, "Member 'AUltra_Dynamic_Weather_C::Rain_Refraction_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Ambient_Light_Intensity) == 0x0004A0, "Member 'AUltra_Dynamic_Weather_C::Rain_Ambient_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Particles_Time_Dilation) == 0x0004A8, "Member 'AUltra_Dynamic_Weather_C::Rain_Particles_Time_Dilation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Render_Raindrop_Decals) == 0x0004AC, "Member 'AUltra_Dynamic_Weather_C::Render_Raindrop_Decals' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Splash_Frequency) == 0x0004B0, "Member 'AUltra_Dynamic_Weather_C::Splash_Frequency' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Splash_Particles_Scale) == 0x0004B8, "Member 'AUltra_Dynamic_Weather_C::Splash_Particles_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Duplicate_Splash_Range) == 0x0004C0, "Member 'AUltra_Dynamic_Weather_C::Max_Duplicate_Splash_Range' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Snow_Particles) == 0x0004C8, "Member 'AUltra_Dynamic_Weather_C::Enable_Snow_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Snow_Particle_Spawn_Rate) == 0x0004D0, "Member 'AUltra_Dynamic_Weather_C::Max_Snow_Particle_Spawn_Rate' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_GPU_Particle_Spawn_Multiplier) == 0x0004D8, "Member 'AUltra_Dynamic_Weather_C::Snow_GPU_Particle_Spawn_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Flakes_Scale) == 0x0004E0, "Member 'AUltra_Dynamic_Weather_C::Snow_Flakes_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Flakes_Alpha) == 0x0004E8, "Member 'AUltra_Dynamic_Weather_C::Snow_Flakes_Alpha' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Ambient_Light_Intensity) == 0x0004F0, "Member 'AUltra_Dynamic_Weather_C::Snow_Ambient_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Particles_Time_Dilation) == 0x0004F8, "Member 'AUltra_Dynamic_Weather_C::Snow_Particles_Time_Dilation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Particle_Color_Multiplier) == 0x000500, "Member 'AUltra_Dynamic_Weather_C::Snow_Particle_Color_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Flakes_Stick_to_Surfaces) == 0x000510, "Member 'AUltra_Dynamic_Weather_C::Snow_Flakes_Stick_to_Surfaces' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Flakes_Stick_Time) == 0x000518, "Member 'AUltra_Dynamic_Weather_C::Snow_Flakes_Stick_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Spawn_Lightning_Flashes) == 0x000520, "Member 'AUltra_Dynamic_Weather_C::Spawn_Lightning_Flashes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Interval__Min_) == 0x000528, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Interval__Min_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Interval__Max_) == 0x000530, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Interval__Max_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Timing_Randomization) == 0x000538, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Timing_Randomization' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Effect_Color) == 0x000540, "Member 'AUltra_Dynamic_Weather_C::Lightning_Effect_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Light_Source) == 0x000550, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Light_Source' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Light_Source_Color) == 0x000554, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Light_Source_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Maximum_Lightning_Flash_Light_Intensity) == 0x000568, "Member 'AUltra_Dynamic_Weather_C::Maximum_Lightning_Flash_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flashes_Cast_Shadows) == 0x000570, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flashes_Cast_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flashes_Cast_Light_Shaft_Bloom) == 0x000571, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flashes_Cast_Light_Shaft_Bloom' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Light_Shaft_Intensity) == 0x000578, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Light_Shaft_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Minimum_Distance) == 0x000580, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Minimum_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Maximum_Distance) == 0x000588, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Maximum_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Obscured_Lightning) == 0x000590, "Member 'AUltra_Dynamic_Weather_C::Enable_Obscured_Lightning' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Obscured_Lightning_Spawn_Rate) == 0x000598, "Member 'AUltra_Dynamic_Weather_C::Obscured_Lightning_Spawn_Rate' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Height_Offset) == 0x0005A0, "Member 'AUltra_Dynamic_Weather_C::Lightning_Height_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Fog_Particles) == 0x0005A8, "Member 'AUltra_Dynamic_Weather_C::Enable_Fog_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Fog_Particle_Percentage__Rain_) == 0x0005B0, "Member 'AUltra_Dynamic_Weather_C::Max_Fog_Particle_Percentage__Rain_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Fog_Particle_Percentage__Snow_) == 0x0005B8, "Member 'AUltra_Dynamic_Weather_C::Max_Fog_Particle_Percentage__Snow_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Fog_Particle_Percentage__Dust_) == 0x0005C0, "Member 'AUltra_Dynamic_Weather_C::Max_Fog_Particle_Percentage__Dust_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Fog_Particle_Intensity__Rain_) == 0x0005C8, "Member 'AUltra_Dynamic_Weather_C::Fog_Particle_Intensity__Rain_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Fog_Particle_Intensity__Snow_) == 0x0005D0, "Member 'AUltra_Dynamic_Weather_C::Fog_Particle_Intensity__Snow_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Fog_Particle_Intensity__Dust_) == 0x0005D8, "Member 'AUltra_Dynamic_Weather_C::Fog_Particle_Intensity__Dust_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Fog_Particles_Draw_Distance) == 0x0005E0, "Member 'AUltra_Dynamic_Weather_C::Fog_Particles_Draw_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Directional_Source_Actor__for_SpeedTree_) == 0x0005E8, "Member 'AUltra_Dynamic_Weather_C::Wind_Directional_Source_Actor__for_SpeedTree_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Material_Wetness) == 0x0005F0, "Member 'AUltra_Dynamic_Weather_C::Max_Material_Wetness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Material_Snow_Coverage) == 0x0005F8, "Member 'AUltra_Dynamic_Weather_C::Max_Material_Snow_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Dust_Coverage) == 0x000600, "Member 'AUltra_Dynamic_Weather_C::Max_Dust_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Material_Effects_Take_Time_to_Change) == 0x000608, "Member 'AUltra_Dynamic_Weather_C::Material_Effects_Take_Time_to_Change' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Time_for_Materials_to_Get_Wet) == 0x000610, "Member 'AUltra_Dynamic_Weather_C::Time_for_Materials_to_Get_Wet' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Time_for_Materials_to_Dry_Out) == 0x000618, "Member 'AUltra_Dynamic_Weather_C::Time_for_Materials_to_Dry_Out' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Time_for_Materials_to_Gather_Snow) == 0x000620, "Member 'AUltra_Dynamic_Weather_C::Time_for_Materials_to_Gather_Snow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Time_for_Snow_to_Melt) == 0x000628, "Member 'AUltra_Dynamic_Weather_C::Time_for_Snow_to_Melt' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Time_for_Materials_to_Gather_Dust) == 0x000630, "Member 'AUltra_Dynamic_Weather_C::Time_for_Materials_to_Gather_Dust' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Amount_of_Snow_to_Turn_to_Wetness_when_Melted) == 0x000638, "Member 'AUltra_Dynamic_Weather_C::Amount_of_Snow_to_Turn_to_Wetness_when_Melted' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Force_Scale) == 0x000640, "Member 'AUltra_Dynamic_Weather_C::Wind_Force_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Delta) == 0x000648, "Member 'AUltra_Dynamic_Weather_C::Snow_Delta' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Use_Random_Weather_Variation) == 0x000650, "Member 'AUltra_Dynamic_Weather_C::Use_Random_Weather_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Start_With_a_Random_Weather_Type) == 0x000651, "Member 'AUltra_Dynamic_Weather_C::Start_With_a_Random_Weather_Type' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Type_Change_Minimum_Interval) == 0x000658, "Member 'AUltra_Dynamic_Weather_C::Weather_Type_Change_Minimum_Interval' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Type_Change_Maximum_Interval) == 0x000660, "Member 'AUltra_Dynamic_Weather_C::Weather_Type_Change_Maximum_Interval' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Transition_Length) == 0x000668, "Member 'AUltra_Dynamic_Weather_C::Transition_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Type_Probabilities__Spring_) == 0x000670, "Member 'AUltra_Dynamic_Weather_C::Weather_Type_Probabilities__Spring_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Type_Probabilities__Summer_) == 0x0006C0, "Member 'AUltra_Dynamic_Weather_C::Weather_Type_Probabilities__Summer_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Type_Probabilities__Autumn_) == 0x000710, "Member 'AUltra_Dynamic_Weather_C::Weather_Type_Probabilities__Autumn_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Type_Probabilities__Winter_) == 0x000760, "Member 'AUltra_Dynamic_Weather_C::Weather_Type_Probabilities__Winter_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Blend_Season_Probabilities) == 0x0007B0, "Member 'AUltra_Dynamic_Weather_C::Blend_Season_Probabilities' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Avoid_Extreme_Cloud_Coverage_Shifts) == 0x0007B1, "Member 'AUltra_Dynamic_Weather_C::Avoid_Extreme_Cloud_Coverage_Shifts' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Avoid_Repeating_Weather_Types) == 0x0007B2, "Member 'AUltra_Dynamic_Weather_C::Avoid_Repeating_Weather_Types' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Avoid_Changing_Directly_from_Snow_to_Rain__Or_Vice_Versa_) == 0x0007B3, "Member 'AUltra_Dynamic_Weather_C::Avoid_Changing_Directly_from_Snow_to_Rain__Or_Vice_Versa_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Extreme_Cloud_Coverage_Shift_Theshold) == 0x0007B8, "Member 'AUltra_Dynamic_Weather_C::Extreme_Cloud_Coverage_Shift_Theshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Rain_Sounds) == 0x0007C0, "Member 'AUltra_Dynamic_Weather_C::Enable_Rain_Sounds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Volume) == 0x0007C8, "Member 'AUltra_Dynamic_Weather_C::Rain_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Distant_Thunder_Sounds) == 0x0007D0, "Member 'AUltra_Dynamic_Weather_C::Enable_Distant_Thunder_Sounds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Distant_Thunder_Volume) == 0x0007D8, "Member 'AUltra_Dynamic_Weather_C::Distant_Thunder_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Close_Thunder_Sounds) == 0x0007E0, "Member 'AUltra_Dynamic_Weather_C::Enable_Close_Thunder_Sounds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Close_Thunder_Volume) == 0x0007E8, "Member 'AUltra_Dynamic_Weather_C::Close_Thunder_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Close_Thunder_Delay_Per_KM) == 0x0007F0, "Member 'AUltra_Dynamic_Weather_C::Close_Thunder_Delay_Per_KM' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Wind_Sounds) == 0x0007F8, "Member 'AUltra_Dynamic_Weather_C::Enable_Wind_Sounds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Volume) == 0x000800, "Member 'AUltra_Dynamic_Weather_C::Wind_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Whistling_Volume) == 0x000808, "Member 'AUltra_Dynamic_Weather_C::Wind_Whistling_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Intended_Cloud_Speed) == 0x000810, "Member 'AUltra_Dynamic_Weather_C::Intended_Cloud_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Intended_Cloud_Coverage) == 0x000818, "Member 'AUltra_Dynamic_Weather_C::Intended_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Intended_Cloud_Direction) == 0x000820, "Member 'AUltra_Dynamic_Weather_C::Intended_Cloud_Direction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cloud_Speed_Multiplier) == 0x000828, "Member 'AUltra_Dynamic_Weather_C::Cloud_Speed_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Runtime) == 0x000830, "Member 'AUltra_Dynamic_Weather_C::Runtime' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Fog_Particle_Camera_Offset) == 0x000838, "Member 'AUltra_Dynamic_Weather_C::Fog_Particle_Camera_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Directional_Source_Intensity_Scale) == 0x000840, "Member 'AUltra_Dynamic_Weather_C::Wind_Directional_Source_Intensity_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Bolt_Length) == 0x000848, "Member 'AUltra_Dynamic_Weather_C::Lightning_Bolt_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Minimum_Length) == 0x000850, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Minimum_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Maximum_Length) == 0x000858, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Maximum_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Replicate_Lightning_Direction) == 0x000860, "Member 'AUltra_Dynamic_Weather_C::Replicate_Lightning_Direction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Max_Angle_from_Forward) == 0x000868, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Max_Angle_from_Forward' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Length) == 0x000870, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Flashing_Lightning) == 0x000878, "Member 'AUltra_Dynamic_Weather_C::Flashing_Lightning' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Timer) == 0x000880, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Timer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Curve) == 0x000888, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Temperature_Scale) == 0x000890, "Member 'AUltra_Dynamic_Weather_C::Temperature_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Base_Summer_Temperature) == 0x000898, "Member 'AUltra_Dynamic_Weather_C::Base_Summer_Temperature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Base_Autumn_Temperature) == 0x0008A0, "Member 'AUltra_Dynamic_Weather_C::Base_Autumn_Temperature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Base_Winter_Temperature) == 0x0008A8, "Member 'AUltra_Dynamic_Weather_C::Base_Winter_Temperature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Base_Spring_Temerature) == 0x0008B0, "Member 'AUltra_Dynamic_Weather_C::Base_Spring_Temerature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Nighttime_Factor) == 0x0008B8, "Member 'AUltra_Dynamic_Weather_C::Nighttime_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Overcast_Factor) == 0x0008C0, "Member 'AUltra_Dynamic_Weather_C::Overcast_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Raining_Factor) == 0x0008C8, "Member 'AUltra_Dynamic_Weather_C::Raining_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Evening_Factor) == 0x0008D0, "Member 'AUltra_Dynamic_Weather_C::Evening_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snowing_Factor) == 0x0008D8, "Member 'AUltra_Dynamic_Weather_C::Snowing_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Random_Factor) == 0x0008E0, "Member 'AUltra_Dynamic_Weather_C::Random_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Interior_Temperature) == 0x0008E8, "Member 'AUltra_Dynamic_Weather_C::Interior_Temperature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Interior_Insulation) == 0x0008F0, "Member 'AUltra_Dynamic_Weather_C::Interior_Insulation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Minimum_Valid_Temperature) == 0x0008F8, "Member 'AUltra_Dynamic_Weather_C::Minimum_Valid_Temperature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Maximum_Valid_Temperature) == 0x000900, "Member 'AUltra_Dynamic_Weather_C::Maximum_Valid_Temperature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Cloud_Speed) == 0x000908, "Member 'AUltra_Dynamic_Weather_C::Max_Cloud_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Dynamic_Landscape_Weather_Effects) == 0x000910, "Member 'AUltra_Dynamic_Weather_C::Enable_Dynamic_Landscape_Weather_Effects' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Speed) == 0x000918, "Member 'AUltra_Dynamic_Weather_C::Weather_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Control_Point_Location_Source) == 0x000920, "Member 'AUltra_Dynamic_Weather_C::Control_Point_Location_Source' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Custom_Control_Point_Location) == 0x000928, "Member 'AUltra_Dynamic_Weather_C::Custom_Control_Point_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_0) == 0x000940, "Member 'AUltra_Dynamic_Weather_C::Dust_0' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Render_Target_Area_for_Dynamic_Puddles) == 0x000948, "Member 'AUltra_Dynamic_Weather_C::Render_Target_Area_for_Dynamic_Puddles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Depth) == 0x000950, "Member 'AUltra_Dynamic_Weather_C::Snow_Depth' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Depth) == 0x000958, "Member 'AUltra_Dynamic_Weather_C::Dust_Depth' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Apply_Dynamic_Trails_to_Snow) == 0x000960, "Member 'AUltra_Dynamic_Weather_C::Apply_Dynamic_Trails_to_Snow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Apply_Dynamic_Trails_to_Dust) == 0x000961, "Member 'AUltra_Dynamic_Weather_C::Apply_Dynamic_Trails_to_Dust' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Z_Normal_Cutoff) == 0x000968, "Member 'AUltra_Dynamic_Weather_C::Dust_Z_Normal_Cutoff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Z_Normal_Falloff) == 0x000970, "Member 'AUltra_Dynamic_Weather_C::Dust_Z_Normal_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Texture_Scale) == 0x000978, "Member 'AUltra_Dynamic_Weather_C::Dust_Texture_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Parallax_Sample_Scale) == 0x000980, "Member 'AUltra_Dynamic_Weather_C::Dust_Parallax_Sample_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Compression_Brush_Spread) == 0x000988, "Member 'AUltra_Dynamic_Weather_C::Dust_Compression_Brush_Spread' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Compression_Brush_Scatter) == 0x000990, "Member 'AUltra_Dynamic_Weather_C::Dust_Compression_Brush_Scatter' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Compression_Brush_Size_Scatter) == 0x000998, "Member 'AUltra_Dynamic_Weather_C::Dust_Compression_Brush_Size_Scatter' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Compression_Fade_Speed_Idle) == 0x0009A0, "Member 'AUltra_Dynamic_Weather_C::Dust_Compression_Fade_Speed_Idle' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Compression_Fade_Speed_Active) == 0x0009A8, "Member 'AUltra_Dynamic_Weather_C::Dust_Compression_Fade_Speed_Active' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Compression_Brush_Size) == 0x0009B0, "Member 'AUltra_Dynamic_Weather_C::Dust_Compression_Brush_Size' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Compression_Normal_Map_Intensity) == 0x0009B8, "Member 'AUltra_Dynamic_Weather_C::Dust_Compression_Normal_Map_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Buildup) == 0x0009C0, "Member 'AUltra_Dynamic_Weather_C::Dust_Buildup' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Frames_Per_Update) == 0x0009C8, "Member 'AUltra_Dynamic_Weather_C::Frames_Per_Update' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Increasing_Material_Snow_Coverage) == 0x0009CC, "Member 'AUltra_Dynamic_Weather_C::Increasing_Material_Snow_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Player_Pawn_Location) == 0x0009D0, "Member 'AUltra_Dynamic_Weather_C::Player_Pawn_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Player_Camera_Location) == 0x0009E8, "Member 'AUltra_Dynamic_Weather_C::Player_Camera_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Control_Point_Location) == 0x000A00, "Member 'AUltra_Dynamic_Weather_C::Control_Point_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Apply_Interaction_Ripples_to_Puddles) == 0x000A18, "Member 'AUltra_Dynamic_Weather_C::Apply_Interaction_Ripples_to_Puddles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Puddles_Z_Normal_Cutoff) == 0x000A20, "Member 'AUltra_Dynamic_Weather_C::Puddles_Z_Normal_Cutoff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Puddles_Z_Normal_Falloff) == 0x000A28, "Member 'AUltra_Dynamic_Weather_C::Puddles_Z_Normal_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Puddle_Coverage) == 0x000A30, "Member 'AUltra_Dynamic_Weather_C::Puddle_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Base_Wetness_when_Raining) == 0x000A38, "Member 'AUltra_Dynamic_Weather_C::Base_Wetness_when_Raining' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Base_Wetness_when_Clear) == 0x000A40, "Member 'AUltra_Dynamic_Weather_C::Base_Wetness_when_Clear' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Puddle_Sharpness) == 0x000A48, "Member 'AUltra_Dynamic_Weather_C::Puddle_Sharpness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Water_Roughness) == 0x000A50, "Member 'AUltra_Dynamic_Weather_C::Water_Roughness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Ripple_Spread) == 0x000A58, "Member 'AUltra_Dynamic_Weather_C::Ripple_Spread' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Ripple_Fade_Speed) == 0x000A60, "Member 'AUltra_Dynamic_Weather_C::Ripple_Fade_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Puddle_Normals_Intensity) == 0x000A68, "Member 'AUltra_Dynamic_Weather_C::Puddle_Normals_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Physical_Materials_which_enable_DLWE_Interactions_on_nonMinusLandscapes) == 0x000A70, "Member 'AUltra_Dynamic_Weather_C::Physical_Materials_which_enable_DLWE_Interactions_on_nonMinusLandscapes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Landscape_Object_Type) == 0x000A80, "Member 'AUltra_Dynamic_Weather_C::Landscape_Object_Type' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Sounds_and_Particles) == 0x000A88, "Member 'AUltra_Dynamic_Weather_C::Dust_Sounds_and_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Physical_Materials_which_disable_Puddle_Sounds_and_Particles) == 0x000A98, "Member 'AUltra_Dynamic_Weather_C::Physical_Materials_which_disable_Puddle_Sounds_and_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Variation_Clouds_Scale) == 0x000AA8, "Member 'AUltra_Dynamic_Weather_C::Variation_Clouds_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_WOV_Material_Effect_Target) == 0x000AB0, "Member 'AUltra_Dynamic_Weather_C::Enable_WOV_Material_Effect_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, WOV_Target_Size) == 0x000AB8, "Member 'AUltra_Dynamic_Weather_C::WOV_Target_Size' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, WOV_Target_Update_Threshold__Inside_Volume_) == 0x000AC0, "Member 'AUltra_Dynamic_Weather_C::WOV_Target_Update_Threshold__Inside_Volume_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, WOV_Target_Update_Threshold__Outside_Volume_) == 0x000AC8, "Member 'AUltra_Dynamic_Weather_C::WOV_Target_Update_Threshold__Outside_Volume_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Override_Volumes) == 0x000AD0, "Member 'AUltra_Dynamic_Weather_C::Weather_Override_Volumes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Mask_Target_Resolution) == 0x000AE0, "Member 'AUltra_Dynamic_Weather_C::Mask_Target_Resolution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Tiling_Ripples_Scale) == 0x000AE8, "Member 'AUltra_Dynamic_Weather_C::Tiling_Ripples_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Use_Custom_Lightning_Location) == 0x000AF0, "Member 'AUltra_Dynamic_Weather_C::Use_Custom_Lightning_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Custom_Lightning_Location) == 0x000AF8, "Member 'AUltra_Dynamic_Weather_C::Custom_Lightning_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Using_Global_Weather_State) == 0x000B10, "Member 'AUltra_Dynamic_Weather_C::Using_Global_Weather_State' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Resetting_Particle_Emitters) == 0x000B11, "Member 'AUltra_Dynamic_Weather_C::Resetting_Particle_Emitters' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Max_Interact_Distance) == 0x000B18, "Member 'AUltra_Dynamic_Weather_C::Current_Max_Interact_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Mobile) == 0x000B20, "Member 'AUltra_Dynamic_Weather_C::Mobile' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Custom_Lightning_Target) == 0x000B28, "Member 'AUltra_Dynamic_Weather_C::Custom_Lightning_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Lightning_Intensity) == 0x000B40, "Member 'AUltra_Dynamic_Weather_C::Current_Lightning_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Lightning_Location) == 0x000B48, "Member 'AUltra_Dynamic_Weather_C::Current_Lightning_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Lightning_Angle) == 0x000B60, "Member 'AUltra_Dynamic_Weather_C::Current_Lightning_Angle' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Weather_Override_Volume) == 0x000B68, "Member 'AUltra_Dynamic_Weather_C::Current_Weather_Override_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, WOV_Target_Resolution) == 0x000B70, "Member 'AUltra_Dynamic_Weather_C::WOV_Target_Resolution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Currently_in_a_Weather_Override_Volume) == 0x000B74, "Member 'AUltra_Dynamic_Weather_C::Currently_in_a_Weather_Override_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_Brush_Size_Buffer) == 0x000B78, "Member 'AUltra_Dynamic_Weather_C::DLWE_Brush_Size_Buffer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Ripple_Brushes) == 0x000B88, "Member 'AUltra_Dynamic_Weather_C::Ripple_Brushes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Landscape_Actors) == 0x000B98, "Member 'AUltra_Dynamic_Weather_C::Landscape_Actors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_MaskTarget) == 0x000BA8, "Member 'AUltra_Dynamic_Weather_C::DLWE_MaskTarget' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_RenderTarget_Center) == 0x000BD8, "Member 'AUltra_Dynamic_Weather_C::DLWE_RenderTarget_Center' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_Recenter_Offset) == 0x000BF0, "Member 'AUltra_Dynamic_Weather_C::DLWE_Recenter_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_Frame_Count) == 0x000C08, "Member 'AUltra_Dynamic_Weather_C::DLWE_Frame_Count' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_DLWE_Mode) == 0x000C0C, "Member 'AUltra_Dynamic_Weather_C::Current_DLWE_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cloud_Reference_Array) == 0x000C10, "Member 'AUltra_Dynamic_Weather_C::Cloud_Reference_Array' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Render_Targets_to_Release_Next_Frame) == 0x000C20, "Member 'AUltra_Dynamic_Weather_C::Render_Targets_to_Release_Next_Frame' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_Brush_Locations_Buffer) == 0x000C30, "Member 'AUltra_Dynamic_Weather_C::DLWE_Brush_Locations_Buffer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_Brush_Strength_Buffer) == 0x000C40, "Member 'AUltra_Dynamic_Weather_C::DLWE_Brush_Strength_Buffer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Use_Occlusion_to_Attenuate_Sounds_in_Interiors) == 0x000C50, "Member 'AUltra_Dynamic_Weather_C::Use_Occlusion_to_Attenuate_Sounds_in_Interiors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Attenuation) == 0x000C58, "Member 'AUltra_Dynamic_Weather_C::Max_Attenuation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Min_LPF_Frequency) == 0x000C60, "Member 'AUltra_Dynamic_Weather_C::Min_LPF_Frequency' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Occlusion_Sampling_Mode) == 0x000C68, "Member 'AUltra_Dynamic_Weather_C::Occlusion_Sampling_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Interior_Trace_Distance) == 0x000C70, "Member 'AUltra_Dynamic_Weather_C::Max_Interior_Trace_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Sound_Occlusion_Update_Period) == 0x000C78, "Member 'AUltra_Dynamic_Weather_C::Sound_Occlusion_Update_Period' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Occlusion_Trace_Channel) == 0x000C80, "Member 'AUltra_Dynamic_Weather_C::Occlusion_Trace_Channel' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Post_Process_Wind_Fog) == 0x000C81, "Member 'AUltra_Dynamic_Weather_C::Enable_Post_Process_Wind_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, PPWF_Intensity_from_Fog) == 0x000C88, "Member 'AUltra_Dynamic_Weather_C::PPWF_Intensity_from_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Sound_Components) == 0x000C90, "Member 'AUltra_Dynamic_Weather_C::Rain_Sound_Components' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Sound_Components) == 0x000CA0, "Member 'AUltra_Dynamic_Weather_C::Wind_Sound_Components' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, PPWF_Intensity_from_Rain) == 0x000CB0, "Member 'AUltra_Dynamic_Weather_C::PPWF_Intensity_from_Rain' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, PPWF_Intensity_from_Snow) == 0x000CB8, "Member 'AUltra_Dynamic_Weather_C::PPWF_Intensity_from_Snow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, PPWF_Intensity_from_Dust) == 0x000CC0, "Member 'AUltra_Dynamic_Weather_C::PPWF_Intensity_from_Dust' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, PPWF_Fade_Distance) == 0x000CC8, "Member 'AUltra_Dynamic_Weather_C::PPWF_Fade_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, PPWF_Max_Sample_Distance) == 0x000CD0, "Member 'AUltra_Dynamic_Weather_C::PPWF_Max_Sample_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, PPWF_Sample_Step_Distance) == 0x000CD8, "Member 'AUltra_Dynamic_Weather_C::PPWF_Sample_Step_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, PPWF_3D_Noise_Scale) == 0x000CE0, "Member 'AUltra_Dynamic_Weather_C::PPWF_3D_Noise_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Post_Process_Wind_Fog_MID) == 0x000CE8, "Member 'AUltra_Dynamic_Weather_C::Post_Process_Wind_Fog_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Time_Random_Offset) == 0x000CF0, "Member 'AUltra_Dynamic_Weather_C::Time_Random_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Wind_Direction_Variation) == 0x000CF8, "Member 'AUltra_Dynamic_Weather_C::Enable_Wind_Direction_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Maximum_Wind_Direction_Variation) == 0x000D00, "Member 'AUltra_Dynamic_Weather_C::Maximum_Wind_Direction_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Wind_Direction) == 0x000D08, "Member 'AUltra_Dynamic_Weather_C::Current_Wind_Direction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Variation_Speed) == 0x000D10, "Member 'AUltra_Dynamic_Weather_C::Variation_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Variation_Time) == 0x000D18, "Member 'AUltra_Dynamic_Weather_C::Wind_Variation_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Run_By_Counterpart) == 0x000D20, "Member 'AUltra_Dynamic_Weather_C::Run_By_Counterpart' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Tick_Set) == 0x000D24, "Member 'AUltra_Dynamic_Weather_C::Current_Tick_Set' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Spread_Out_Tick_Behaviors_Over_3_Frames) == 0x000D28, "Member 'AUltra_Dynamic_Weather_C::Spread_Out_Tick_Behaviors_Over_3_Frames' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Initialized) == 0x000D29, "Member 'AUltra_Dynamic_Weather_C::Initialized' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Properties) == 0x000D30, "Member 'AUltra_Dynamic_Weather_C::Properties' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Occlusion_Location) == 0x000D80, "Member 'AUltra_Dynamic_Weather_C::Occlusion_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Use_Camera_Location_for_Occlusion) == 0x000D98, "Member 'AUltra_Dynamic_Weather_C::Use_Camera_Location_for_Occlusion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Coverage_Lights_Up_Height_Fog) == 0x000DA0, "Member 'AUltra_Dynamic_Weather_C::Snow_Coverage_Lights_Up_Height_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Started_Raining) == 0x000DA8, "Member 'AUltra_Dynamic_Weather_C::Started_Raining' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Started_Snowing) == 0x000DB8, "Member 'AUltra_Dynamic_Weather_C::Started_Snowing' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Finished_Raining) == 0x000DC8, "Member 'AUltra_Dynamic_Weather_C::Finished_Raining' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Finished_Snowing) == 0x000DD8, "Member 'AUltra_Dynamic_Weather_C::Finished_Snowing' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Getting_Cloudy) == 0x000DE8, "Member 'AUltra_Dynamic_Weather_C::Getting_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Clouds_Clearing) == 0x000DF8, "Member 'AUltra_Dynamic_Weather_C::Clouds_Clearing' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, ED_Raining) == 0x000E08, "Member 'AUltra_Dynamic_Weather_C::ED_Raining' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, ED_Snowy) == 0x000E09, "Member 'AUltra_Dynamic_Weather_C::ED_Snowy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, ED_Cloudy) == 0x000E0A, "Member 'AUltra_Dynamic_Weather_C::ED_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, WOV_Temperature_Offset) == 0x000E10, "Member 'AUltra_Dynamic_Weather_C::WOV_Temperature_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Screen_Droplets) == 0x000E18, "Member 'AUltra_Dynamic_Weather_C::Enable_Screen_Droplets' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Screen_Center_Strength) == 0x000E20, "Member 'AUltra_Dynamic_Weather_C::Screen_Center_Strength' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Screen_Edge_Strength) == 0x000E28, "Member 'AUltra_Dynamic_Weather_C::Screen_Edge_Strength' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Camera_Facing_Rain_Bias) == 0x000E30, "Member 'AUltra_Dynamic_Weather_C::Camera_Facing_Rain_Bias' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Droplet_Tiling) == 0x000E38, "Member 'AUltra_Dynamic_Weather_C::Droplet_Tiling' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Blur_Radius) == 0x000E40, "Member 'AUltra_Dynamic_Weather_C::Blur_Radius' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Screen_Droplets_MID) == 0x000E48, "Member 'AUltra_Dynamic_Weather_C::Screen_Droplets_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Drips_Intensity) == 0x000E50, "Member 'AUltra_Dynamic_Weather_C::Drips_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Drops_Intensity) == 0x000E58, "Member 'AUltra_Dynamic_Weather_C::Drops_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Drops_Time) == 0x000E60, "Member 'AUltra_Dynamic_Weather_C::Drops_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Screen_Droplets_Parent_Material) == 0x000E68, "Member 'AUltra_Dynamic_Weather_C::Screen_Droplets_Parent_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Player_Camera_Forward_Vector) == 0x000E98, "Member 'AUltra_Dynamic_Weather_C::Player_Camera_Forward_Vector' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_System_Spawning) == 0x000EB0, "Member 'AUltra_Dynamic_Weather_C::Rain_System_Spawning' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Obscured_Lightning_System_Spawning) == 0x000EB1, "Member 'AUltra_Dynamic_Weather_C::Obscured_Lightning_System_Spawning' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Weather_State_Changed) == 0x000EB2, "Member 'AUltra_Dynamic_Weather_C::Current_Weather_State_Changed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Unoccluded_Rain_Volume) == 0x000EB8, "Member 'AUltra_Dynamic_Weather_C::Unoccluded_Rain_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Material_State_Changed) == 0x000EC0, "Member 'AUltra_Dynamic_Weather_C::Current_Material_State_Changed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, First_Tick) == 0x000EC1, "Member 'AUltra_Dynamic_Weather_C::First_Tick' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Override_with_New_Changes) == 0x000EC2, "Member 'AUltra_Dynamic_Weather_C::Override_with_New_Changes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Dust_Particles) == 0x000EC3, "Member 'AUltra_Dynamic_Weather_C::Enable_Dust_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Dust_Particle_Spawn_Rate) == 0x000EC8, "Member 'AUltra_Dynamic_Weather_C::Max_Dust_Particle_Spawn_Rate' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Particle_Scale) == 0x000ED0, "Member 'AUltra_Dynamic_Weather_C::Dust_Particle_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Particle_Color) == 0x000ED8, "Member 'AUltra_Dynamic_Weather_C::Dust_Particle_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Particle_Alpha) == 0x000EE8, "Member 'AUltra_Dynamic_Weather_C::Dust_Particle_Alpha' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Wind_Debris) == 0x000EF0, "Member 'AUltra_Dynamic_Weather_C::Enable_Wind_Debris' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Debris_Amount) == 0x000EF8, "Member 'AUltra_Dynamic_Weather_C::Wind_Debris_Amount' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Debris_Scale) == 0x000F00, "Member 'AUltra_Dynamic_Weather_C::Debris_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Debris_Particle_Alpha) == 0x000F08, "Member 'AUltra_Dynamic_Weather_C::Debris_Particle_Alpha' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Debris_Atlas) == 0x000F10, "Member 'AUltra_Dynamic_Weather_C::Wind_Debris_Atlas' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Mask_Brush_Target) == 0x000F40, "Member 'AUltra_Dynamic_Weather_C::Weather_Mask_Brush_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Brush_Target_Corner) == 0x000F48, "Member 'AUltra_Dynamic_Weather_C::Weather_Brush_Target_Corner' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Mask_Target_Size) == 0x000F58, "Member 'AUltra_Dynamic_Weather_C::Weather_Mask_Target_Size' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Mask_Brush_Target_Resolution) == 0x000F5C, "Member 'AUltra_Dynamic_Weather_C::Weather_Mask_Brush_Target_Resolution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, All_Weather_Mask_Brushes) == 0x000F60, "Member 'AUltra_Dynamic_Weather_C::All_Weather_Mask_Brushes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Mask_Target_in_Use) == 0x000F70, "Member 'AUltra_Dynamic_Weather_C::Weather_Mask_Target_in_Use' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Brush_Target_Center) == 0x000F78, "Member 'AUltra_Dynamic_Weather_C::Weather_Brush_Target_Center' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Mask_Target_Half_Size) == 0x000F88, "Member 'AUltra_Dynamic_Weather_C::Weather_Mask_Target_Half_Size' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Mask_Projection_Value) == 0x000F90, "Member 'AUltra_Dynamic_Weather_C::Weather_Mask_Projection_Value' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_Relevant_Weather_Mask_Brushes) == 0x000F98, "Member 'AUltra_Dynamic_Weather_C::DLWE_Relevant_Weather_Mask_Brushes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Brush_Target_Root_Position) == 0x000FA8, "Member 'AUltra_Dynamic_Weather_C::Weather_Brush_Target_Root_Position' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Triggered_Starting_Dispatchers) == 0x000FC0, "Member 'AUltra_Dynamic_Weather_C::Triggered_Starting_Dispatchers' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Weather_State) == 0x000FC8, "Member 'AUltra_Dynamic_Weather_C::Old_Weather_State' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Global_Weather_State) == 0x000FD0, "Member 'AUltra_Dynamic_Weather_C::Global_Weather_State' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Local_Weather_State) == 0x000FD8, "Member 'AUltra_Dynamic_Weather_C::Local_Weather_State' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Replicated_Material_Wetness) == 0x000FE0, "Member 'AUltra_Dynamic_Weather_C::Replicated_Material_Wetness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Replicated_Material_Snow) == 0x000FE8, "Member 'AUltra_Dynamic_Weather_C::Replicated_Material_Snow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Last_Local_Weather_State) == 0x000FF0, "Member 'AUltra_Dynamic_Weather_C::Last_Local_Weather_State' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Intended_Fog) == 0x000FF8, "Member 'AUltra_Dynamic_Weather_C::Intended_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_System_Spawning) == 0x001000, "Member 'AUltra_Dynamic_Weather_C::Snow_System_Spawning' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Debris_System_Spawning) == 0x001001, "Member 'AUltra_Dynamic_Weather_C::Wind_Debris_System_Spawning' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Intended_Dust) == 0x001008, "Member 'AUltra_Dynamic_Weather_C::Intended_Dust' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Particles_Time_Dilation) == 0x001010, "Member 'AUltra_Dynamic_Weather_C::Dust_Particles_Time_Dilation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_System_Spawning) == 0x001014, "Member 'AUltra_Dynamic_Weather_C::Dust_System_Spawning' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Material_Dust_Coverage) == 0x001018, "Member 'AUltra_Dynamic_Weather_C::Material_Dust_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Replicated_Material_Dust) == 0x001020, "Member 'AUltra_Dynamic_Weather_C::Replicated_Material_Dust' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_Snow_Mode) == 0x001028, "Member 'AUltra_Dynamic_Weather_C::DLWE_Snow_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Season_Mode) == 0x00102C, "Member 'AUltra_Dynamic_Weather_C::Season_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Season) == 0x001030, "Member 'AUltra_Dynamic_Weather_C::Season' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Individual_Seasons) == 0x001038, "Member 'AUltra_Dynamic_Weather_C::Individual_Seasons' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Light_Rain_Sound_Components) == 0x001048, "Member 'AUltra_Dynamic_Weather_C::Light_Rain_Sound_Components' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Unoccluded_Light_Rain_Volume) == 0x001058, "Member 'AUltra_Dynamic_Weather_C::Unoccluded_Light_Rain_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Cloud_Coverage) == 0x001060, "Member 'AUltra_Dynamic_Weather_C::Old_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Rain) == 0x001068, "Member 'AUltra_Dynamic_Weather_C::Old_Rain' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Wind_Intensity) == 0x001070, "Member 'AUltra_Dynamic_Weather_C::Old_Wind_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Snow) == 0x001078, "Member 'AUltra_Dynamic_Weather_C::Old_Snow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_0) == 0x001080, "Member 'AUltra_Dynamic_Weather_C::Lightning_0' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Fog) == 0x001088, "Member 'AUltra_Dynamic_Weather_C::Old_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Dust) == 0x001090, "Member 'AUltra_Dynamic_Weather_C::Old_Dust' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Material_Wetness) == 0x001098, "Member 'AUltra_Dynamic_Weather_C::Old_Material_Wetness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Material_Snow_Coverage) == 0x0010A0, "Member 'AUltra_Dynamic_Weather_C::Old_Material_Snow_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Material_Dust_Coverage) == 0x0010A8, "Member 'AUltra_Dynamic_Weather_C::Old_Material_Dust_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Manual_Weather_State) == 0x0010B0, "Member 'AUltra_Dynamic_Weather_C::Manual_Weather_State' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Lerp_to_Static_Settings) == 0x0010B8, "Member 'AUltra_Dynamic_Weather_C::Old_Lerp_to_Static_Settings' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Cue_Sound) == 0x0010C0, "Member 'AUltra_Dynamic_Weather_C::Wind_Cue_Sound' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Cue_Sound) == 0x0010F0, "Member 'AUltra_Dynamic_Weather_C::Rain_Cue_Sound' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Light_Rain_Cue_Sound) == 0x001120, "Member 'AUltra_Dynamic_Weather_C::Light_Rain_Cue_Sound' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Distant_Thunder_Cue_Sound) == 0x001150, "Member 'AUltra_Dynamic_Weather_C::Distant_Thunder_Cue_Sound' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Whistling_Cue_Sound) == 0x001180, "Member 'AUltra_Dynamic_Weather_C::Wind_Whistling_Cue_Sound' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Clouds_Diverse_Texture) == 0x0011B0, "Member 'AUltra_Dynamic_Weather_C::Clouds_Diverse_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Particle_Niagara_System) == 0x0011E0, "Member 'AUltra_Dynamic_Weather_C::Rain_Particle_Niagara_System' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Particle_Niagara_System) == 0x001210, "Member 'AUltra_Dynamic_Weather_C::Snow_Particle_Niagara_System' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Particle_Niagara_System) == 0x001240, "Member 'AUltra_Dynamic_Weather_C::Dust_Particle_Niagara_System' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Debris_Niagara_System) == 0x001270, "Member 'AUltra_Dynamic_Weather_C::Wind_Debris_Niagara_System' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Obscured_Lightning_Niagara_System) == 0x0012A0, "Member 'AUltra_Dynamic_Weather_C::Obscured_Lightning_Niagara_System' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Post_Process_Wind_Fog_Parent_Material) == 0x0012D0, "Member 'AUltra_Dynamic_Weather_C::Post_Process_Wind_Fog_Parent_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Sand_Forming) == 0x001300, "Member 'AUltra_Dynamic_Weather_C::Sand_Forming' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Sand_Clearing) == 0x001310, "Member 'AUltra_Dynamic_Weather_C::Sand_Clearing' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, ED_Dusty) == 0x001320, "Member 'AUltra_Dynamic_Weather_C::ED_Dusty' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Rainbow) == 0x001321, "Member 'AUltra_Dynamic_Weather_C::Enable_Rainbow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Rainbow_Strength) == 0x001328, "Member 'AUltra_Dynamic_Weather_C::Max_Rainbow_Strength' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Strength_from_Rain) == 0x001330, "Member 'AUltra_Dynamic_Weather_C::Strength_from_Rain' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Strength_from_Fog) == 0x001338, "Member 'AUltra_Dynamic_Weather_C::Strength_from_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Strength_in_any_Weather) == 0x001340, "Member 'AUltra_Dynamic_Weather_C::Strength_in_any_Weather' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Fog_0) == 0x001348, "Member 'AUltra_Dynamic_Weather_C::Fog_0' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Rainbow_Visibility) == 0x001350, "Member 'AUltra_Dynamic_Weather_C::Current_Rainbow_Visibility' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Mask_Rainbow_Above_Clouds) == 0x001358, "Member 'AUltra_Dynamic_Weather_C::Mask_Rainbow_Above_Clouds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Mask_Rainbow_Below_Water) == 0x001360, "Member 'AUltra_Dynamic_Weather_C::Mask_Rainbow_Below_Water' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, ED_CurrentWeather) == 0x001368, "Member 'AUltra_Dynamic_Weather_C::ED_CurrentWeather' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Display_Name_Changed) == 0x001370, "Member 'AUltra_Dynamic_Weather_C::Weather_Display_Name_Changed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Support_Virtual_Heightfield_Mesh) == 0x001380, "Member 'AUltra_Dynamic_Weather_C::Support_Virtual_Heightfield_Mesh' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, VHFM_Runtime_Virtual_Texture_Volume) == 0x001388, "Member 'AUltra_Dynamic_Weather_C::VHFM_Runtime_Virtual_Texture_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, VHFM_Invalidate_Long_Range_Distance) == 0x001390, "Member 'AUltra_Dynamic_Weather_C::VHFM_Invalidate_Long_Range_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, VHFM_Invalidate_Long_Range_Threshold) == 0x001398, "Member 'AUltra_Dynamic_Weather_C::VHFM_Invalidate_Long_Range_Threshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, VHFM_Invalidate_Mid_Range_Distance) == 0x0013A0, "Member 'AUltra_Dynamic_Weather_C::VHFM_Invalidate_Mid_Range_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, VHFM_Invalidate_Mid_Range_Threshold) == 0x0013A8, "Member 'AUltra_Dynamic_Weather_C::VHFM_Invalidate_Mid_Range_Threshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, VHFM_Invalidate_Short_Range_Distance) == 0x0013B0, "Member 'AUltra_Dynamic_Weather_C::VHFM_Invalidate_Short_Range_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, VHFM_Invalidate_Short_Range_Threshold) == 0x0013B8, "Member 'AUltra_Dynamic_Weather_C::VHFM_Invalidate_Short_Range_Threshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, VHFM_Invalidate_Long_Range_Buffer) == 0x0013C0, "Member 'AUltra_Dynamic_Weather_C::VHFM_Invalidate_Long_Range_Buffer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, VHFM_Invalidate_Mid_Range_Buffer) == 0x0013D8, "Member 'AUltra_Dynamic_Weather_C::VHFM_Invalidate_Mid_Range_Buffer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, VHFM_Invalidate_Short_Range_Buffer) == 0x0013F0, "Member 'AUltra_Dynamic_Weather_C::VHFM_Invalidate_Short_Range_Buffer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cached_Floats_Old) == 0x001408, "Member 'AUltra_Dynamic_Weather_C::Cached_Floats_Old' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cached_Floats_New) == 0x001418, "Member 'AUltra_Dynamic_Weather_C::Cached_Floats_New' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cached_Vectors_Old) == 0x001428, "Member 'AUltra_Dynamic_Weather_C::Cached_Vectors_Old' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cached_Vectors_New) == 0x001438, "Member 'AUltra_Dynamic_Weather_C::Cached_Vectors_New' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cache_Alpha) == 0x001448, "Member 'AUltra_Dynamic_Weather_C::Cache_Alpha' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Filling_Starting_Cache) == 0x001450, "Member 'AUltra_Dynamic_Weather_C::Filling_Starting_Cache' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cached_Value_Changing) == 0x001458, "Member 'AUltra_Dynamic_Weather_C::Cached_Value_Changing' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cache_Period) == 0x001468, "Member 'AUltra_Dynamic_Weather_C::Cache_Period' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cached_Wind_Direction) == 0x001470, "Member 'AUltra_Dynamic_Weather_C::Cached_Wind_Direction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Fog_Particles_Active) == 0x001478, "Member 'AUltra_Dynamic_Weather_C::Fog_Particles_Active' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cached_Rain_Velocity) == 0x001480, "Member 'AUltra_Dynamic_Weather_C::Cached_Rain_Velocity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Last_Recenter_Check_Location) == 0x001498, "Member 'AUltra_Dynamic_Weather_C::Last_Recenter_Check_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Local_Weather_Change_Speed) == 0x0014B0, "Member 'AUltra_Dynamic_Weather_C::Current_Local_Weather_Change_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Update_DLWE_State) == 0x0014B8, "Member 'AUltra_Dynamic_Weather_C::Update_DLWE_State' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Outdoor_Sound_Mix_Modifier) == 0x0014C8, "Member 'AUltra_Dynamic_Weather_C::Outdoor_Sound_Mix_Modifier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Attenuation_for_UDS_Outdoor_Sound) == 0x0014D0, "Member 'AUltra_Dynamic_Weather_C::Max_Attenuation_for_UDS_Outdoor_Sound' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Update_Season_Interval) == 0x0014D8, "Member 'AUltra_Dynamic_Weather_C::Update_Season_Interval' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, State_Being_Applied) == 0x0014E0, "Member 'AUltra_Dynamic_Weather_C::State_Being_Applied' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Volume_Target) == 0x001658, "Member 'AUltra_Dynamic_Weather_C::Weather_Volume_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, WOV_Target_Brush_MID) == 0x001688, "Member 'AUltra_Dynamic_Weather_C::WOV_Target_Brush_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, WOV_Target_Corner_Position) == 0x001690, "Member 'AUltra_Dynamic_Weather_C::WOV_Target_Corner_Position' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Override_Volume_Target_Location) == 0x0016A0, "Member 'AUltra_Dynamic_Weather_C::Weather_Override_Volume_Target_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, WOV_Material_Effect_Target_Active) == 0x0016B8, "Member 'AUltra_Dynamic_Weather_C::WOV_Material_Effect_Target_Active' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Shutting_Down) == 0x0016B9, "Member 'AUltra_Dynamic_Weather_C::Shutting_Down' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Override_Volume_Contributing_Snow_Coverage) == 0x0016BA, "Member 'AUltra_Dynamic_Weather_C::Weather_Override_Volume_Contributing_Snow_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Mask_Buffer_Target) == 0x0016C0, "Member 'AUltra_Dynamic_Weather_C::Mask_Buffer_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, UDS_Version) == 0x0016C8, "Member 'AUltra_Dynamic_Weather_C::UDS_Version' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, UDS_Version_Info) == 0x0016D8, "Member 'AUltra_Dynamic_Weather_C::UDS_Version_Info' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Anti_Aliasing_Method) == 0x0016E0, "Member 'AUltra_Dynamic_Weather_C::Anti_Aliasing_Method' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Season_Day_Offset) == 0x0016E4, "Member 'AUltra_Dynamic_Weather_C::Season_Day_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, All_Weather_Mask_Projection_Boxes) == 0x0016E8, "Member 'AUltra_Dynamic_Weather_C::All_Weather_Mask_Projection_Boxes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_Relevant_Projection_Boxes) == 0x0016F8, "Member 'AUltra_Dynamic_Weather_C::DLWE_Relevant_Projection_Boxes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, WOV_References_to_Remove) == 0x001708, "Member 'AUltra_Dynamic_Weather_C::WOV_References_to_Remove' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Mask_Brush_References_to_Remove) == 0x001718, "Member 'AUltra_Dynamic_Weather_C::Mask_Brush_References_to_Remove' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Projection_Box_References_to_Remove) == 0x001728, "Member 'AUltra_Dynamic_Weather_C::Projection_Box_References_to_Remove' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Editor_WOV_Target_Root) == 0x001738, "Member 'AUltra_Dynamic_Weather_C::Editor_WOV_Target_Root' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Editor_Mask_Target_Root) == 0x001750, "Member 'AUltra_Dynamic_Weather_C::Editor_Mask_Target_Root' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, WOV_Wind_Direction) == 0x001768, "Member 'AUltra_Dynamic_Weather_C::WOV_Wind_Direction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Lightning_Target_Offset) == 0x001778, "Member 'AUltra_Dynamic_Weather_C::Current_Lightning_Target_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cache_Current_Timer) == 0x001790, "Member 'AUltra_Dynamic_Weather_C::Cache_Current_Timer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Update_All_Cached_Properties) == 0x001798, "Member 'AUltra_Dynamic_Weather_C::Update_All_Cached_Properties' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Splash_Material_Decal) == 0x0017A0, "Member 'AUltra_Dynamic_Weather_C::Splash_Material_Decal' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Splash_Material_Translucent) == 0x0017D0, "Member 'AUltra_Dynamic_Weather_C::Splash_Material_Translucent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Project_Mode) == 0x001800, "Member 'AUltra_Dynamic_Weather_C::Project_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, UDS_Needs_Updating) == 0x001801, "Member 'AUltra_Dynamic_Weather_C::UDS_Needs_Updating' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Not_Limiting_Construction) == 0x001802, "Member 'AUltra_Dynamic_Weather_C::Not_Limiting_Construction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Last_Construction_Script_Time) == 0x001808, "Member 'AUltra_Dynamic_Weather_C::Last_Construction_Script_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Show_Trace_Debugs) == 0x001810, "Member 'AUltra_Dynamic_Weather_C::Show_Trace_Debugs' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rainbow_MID) == 0x001818, "Member 'AUltra_Dynamic_Weather_C::Rainbow_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rainbow_Material_2D) == 0x001820, "Member 'AUltra_Dynamic_Weather_C::Rainbow_Material_2D' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rainbow_Material_Volumetric) == 0x001850, "Member 'AUltra_Dynamic_Weather_C::Rainbow_Material_Volumetric' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Particle_Motion_Stretch) == 0x001880, "Member 'AUltra_Dynamic_Weather_C::Weather_Particle_Motion_Stretch' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Particle_Sprite_Motion_Blur_with_Camera_Movement) == 0x001888, "Member 'AUltra_Dynamic_Weather_C::Particle_Sprite_Motion_Blur_with_Camera_Movement' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Previous_Temperature_Scale) == 0x001890, "Member 'AUltra_Dynamic_Weather_C::Previous_Temperature_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Apply_Changes_Above_Volumetric_Cloud_Layer) == 0x001891, "Member 'AUltra_Dynamic_Weather_C::Apply_Changes_Above_Volumetric_Cloud_Layer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Multiplier_Above_Clouds) == 0x001898, "Member 'AUltra_Dynamic_Weather_C::Rain_Multiplier_Above_Clouds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Multiplier_Above_Clouds) == 0x0018A0, "Member 'AUltra_Dynamic_Weather_C::Snow_Multiplier_Above_Clouds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Dust_Multiplier_Above_Clouds) == 0x0018A8, "Member 'AUltra_Dynamic_Weather_C::Dust_Multiplier_Above_Clouds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Fog_Multiplier_Above_Clouds) == 0x0018B0, "Member 'AUltra_Dynamic_Weather_C::Fog_Multiplier_Above_Clouds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Multiplier_Above_Clouds) == 0x0018B8, "Member 'AUltra_Dynamic_Weather_C::Lightning_Multiplier_Above_Clouds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Multiplier_Above_Clouds) == 0x0018C0, "Member 'AUltra_Dynamic_Weather_C::Wind_Multiplier_Above_Clouds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, BloodScreenDroplets) == 0x0018C8, "Member 'AUltra_Dynamic_Weather_C::BloodScreenDroplets' has a wrong offset!");

}

