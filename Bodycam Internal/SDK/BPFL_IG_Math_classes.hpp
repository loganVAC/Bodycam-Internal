#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_IG_Math

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_IG_Math.BPFL_IG_Math_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_IG_Math_C final : public UBlueprintFunctionLibrary
{
public:
	static void Add_Rotators(const struct FRotator& A, const struct FRotator& B, class UObject* __WorldContext, struct FRotator* Value);
	static struct FTransform Add_Transforms(const struct FTransform& A, const struct FTransform& B, class UObject* __WorldContext);
	static double Custom_Float_Spring_Interp(double Current, double Target, double Delta_Time, const struct FSSpringInterpVector& Data, struct FFloatSpringState& Spring_State, class UObject* __WorldContext);
	static struct FVector Custom_Vector_Spring_Interp(const struct FVector& Current, const struct FVector& Target, double Delta_Time, const struct FSSpringInterpVector& Data, struct FVectorSpringState& Spring_State, class UObject* __WorldContext);
	static struct FRotator Negate_Rotator(const struct FRotator& A, class UObject* __WorldContext);
	static void Negate_Transform(const struct FTransform& In, bool Ignore_Scale, class UObject* __WorldContext, struct FTransform* Out);
	static double Random_Float_In_Vector_Range(const struct FVector2D& Range, class UObject* __WorldContext);
	static int32 Random_Integer_In_Vector_Range(const struct FVector2D& Range, class UObject* __WorldContext);
	static struct FVector Rotator_To_Vector(const struct FRotator& Value, class UObject* __WorldContext);
	static struct FRotator Subtract_Rotators(const struct FRotator& A, const struct FRotator& B, class UObject* __WorldContext);
	static void Vector_To_Rotator(const struct FVector& In, class UObject* __WorldContext, struct FRotator* Out);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_IG_Math_C">();
	}
	static class UBPFL_IG_Math_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_IG_Math_C>();
	}
};
static_assert(alignof(UBPFL_IG_Math_C) == 0x000008, "Wrong alignment on UBPFL_IG_Math_C");
static_assert(sizeof(UBPFL_IG_Math_C) == 0x000028, "Wrong size on UBPFL_IG_Math_C");

}

