#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PC_Zombie

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Team_structs.hpp"
#include "EN_WaveClass_structs.hpp"
#include "E_Emote_structs.hpp"
#include "GameMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PC_Zombie.PC_Zombie_C
// 0x00A0 (0x08F0 - 0x0850)
class APC_Zombie_C final : public APlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0850(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_MenuControllerComponent_C*          BP_MenuControllerComponent;                        // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ChatComponent_C*                    BP_ChatComponent;                                  // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Kills;                                             // 0x0868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_86C[0x4];                                      // 0x086C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UKickOverlay_C*                         KickOverlay;                                       // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 SteamID__Server_;                                  // 0x0878(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FText                                   Kick_Reason;                                       // 0x0888(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AttempsToSpawn;                                    // 0x08A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A4[0x4];                                      // 0x08A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGT_zombie_C*                           GT_Zombie;                                         // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AHorrorMob_C*                           Screamer;                                          // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UHUD_ScoreBoardMenu_C*                  TeamMenu;                                          // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHUD_ScoreBoardMenu_C*                  HUD_ScoreBoard;                                    // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	E_Team                                        Team;                                              // 0x08C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowScreamer;                                     // 0x08C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8CA[0x6];                                      // 0x08CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_Character_C*                       HUD_Character;                                     // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead_;                                           // 0x08D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D9[0x7];                                      // 0x08D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_Rankinfo_C*                        WinHud;                                            // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Death;                                             // 0x08E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Wave;                                              // 0x08EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BreakTimer();
	void CanCreateKickVote(bool* CanCreateKickVote_);
	void CanKickThisPlayer_(const class FString& PlayerID, bool* True_);
	void ClearMap();
	void ConnectionInfos(const struct FLinearColor& Color);
	void ElectricalAction();
	void EndWave(int32 Wave_0, EN_WaveClass EN_WaveClass);
	void Event_Begin_Play_Chat();
	void Event_Ragdoll_End();
	void EventRagdollStart();
	void ExecuteUbergraph_PC_Zombie(int32 EntryPoint);
	void FindBestSpawn(const class FString& InputPin, struct FTransform* FarestTransform_return);
	void FocusControlOnGame();
	void Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component);
	void Get_Stamina(double* Stamina);
	void GetBlured(double* Blured);
	void GetBurnedRef(class USceneComponent** BurnedMesh);
	void GetCurrentRank(int32* RankScore, int32* Rank_, class FText* CurrentRank);
	void GetFlashBangEffect(double* FlashEffect);
	void GetGameMode(struct FSTR_GamemodeWinInfo* GameMode);
	void GetHealth(double* Health);
	void GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote);
	void GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController);
	void GetMutePlayer(TArray<class FString>* MutePlayer);
	void GetNewRank(class FText* Name_0, class UTexture2D** Image, int32* RankScore, int32* RankPosition, int32* RankDivision, double* PreviousRankProgress, double* RankProgress, bool* NewRank_, struct FSlateColor* Color, int32* Rank_Integer);
	void GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected);
	void GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer);
	void GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_);
	void GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System);
	void GetReady_(bool* IsReady_);
	void GetServerSteamID(class FString* SteamID);
	void GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons);
	void GetSteamID(class FString* SteamID);
	void GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant);
	void GetTeam(E_Team* Team_0);
	void GetTeamList(E_Team Team_0, TArray<struct FSTR_PCInfo>* Info);
	void GetTopScore(TArray<struct FSTR_PCInfo>* TopScore);
	void Init_SteamInfo();
	void InitHudCharacter();
	void InitHudPC();
	void InitScoreBoard();
	void InpActEvt_Escape_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_IA_Score_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Score_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void IsDead(bool* Dead_);
	void IsDestroyabe_(bool* Destroyable_);
	void IsReady_(bool IsReady__0);
	void IsSpawnValid(const struct FTransform& Spawn_Transform, bool* Valid_);
	void IsStress(bool* Yes_);
	void IsTalking_(bool* IsTalking__0);
	void J_server();
	void Kick_(const struct FSTR_PCInfo& Target);
	void KickPlayer(const struct FSTR_KickVote& PlayerInfo);
	void MSG_AVP_GetPlayerUsername(bool* Success_, class FText* Username);
	void MSG_AVP_GetWidgetVoice(class UWidgetComponent** WidgetVoiceRef);
	void MSG_ChatGetConnectedPlayers(TArray<class AController*>* Players);
	void MSG_ChatGetPlayerID(int32* PlayerID);
	void MSG_ChatGetTeamID(int32* TeamID);
	void MSG_ChatGetUsername(bool* Success_, class FText* Username);
	void MSG_ChatPlayEmote(E_Emote EmoteToPlay);
	void MSG_ChatRequestPlayerID(int32* PlayerID, bool* Success_);
	void MuteID(const class FString& SteamID);
	void NewKickVote(const struct FSTR_PCInfo& Target);
	void NewWaves(int32 Wave_0, EN_WaveClass EN_WaveClass);
	void OnPlayerDeath(class APlayerController* PC);
	void OnTrySelectTeam(E_Team Team_0);
	void ReceiveBeginPlay();
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveUnPossess(class APawn* UnpossessedPawn);
	void Respawn__Server_(bool Respawn_);
	void RespawnCloseToFriend(struct FTransform* FarestTransform_return);
	void Screamer__Client_(bool Destroy_);
	void ServerTravel(double Delay);
	void SetSteamID__Server_(const class FString& PCInfo, const struct FSTR_PCStats& Item_Stats);
	void Slomo(double Slomo_0);
	void SpawnDeadCamera();
	void SpawnScreamer(bool Destroy_);
	void SpawnWinHud(int32 Wave_0, double Chrono);
	void SpawnZombieEvent();
	void Talk(bool IsTalking);
	void Update_ControlRotation(const struct FRotator& NewRotation);
	void Update_Death(int32 Death_0, bool Set);
	void Update_Death__server_();
	void Update_Kill(int32 Kill_);
	void Update_ScoreBoard__HUD_(bool Remove_);
	void UpdateGamemode(EGameMode GameMode);
	void UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_);
	void UpdateKill__Server_(int32 Kill);
	void UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0);
	void UpdateModeInfo();
	void UpdatePower(bool On_);
	void UpdateScore(const struct FSTR_Score& Score);
	void UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamXP(bool Win_);
	void UpdateTimer(double TimeCount, const class FText& NewParam);
	void UpdateTransitionMap();
	void UpdateWarning(const class FString& String);
	void UpdateXp(int32 Xp);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PC_Zombie_C">();
	}
	static class APC_Zombie_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APC_Zombie_C>();
	}
};
static_assert(alignof(APC_Zombie_C) == 0x000008, "Wrong alignment on APC_Zombie_C");
static_assert(sizeof(APC_Zombie_C) == 0x0008F0, "Wrong size on APC_Zombie_C");
static_assert(offsetof(APC_Zombie_C, UberGraphFrame) == 0x000850, "Member 'APC_Zombie_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, BP_MenuControllerComponent) == 0x000858, "Member 'APC_Zombie_C::BP_MenuControllerComponent' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, BP_ChatComponent) == 0x000860, "Member 'APC_Zombie_C::BP_ChatComponent' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, Kills) == 0x000868, "Member 'APC_Zombie_C::Kills' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, KickOverlay) == 0x000870, "Member 'APC_Zombie_C::KickOverlay' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, SteamID__Server_) == 0x000878, "Member 'APC_Zombie_C::SteamID__Server_' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, Kick_Reason) == 0x000888, "Member 'APC_Zombie_C::Kick_Reason' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, AttempsToSpawn) == 0x0008A0, "Member 'APC_Zombie_C::AttempsToSpawn' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, GT_Zombie) == 0x0008A8, "Member 'APC_Zombie_C::GT_Zombie' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, Screamer) == 0x0008B0, "Member 'APC_Zombie_C::Screamer' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, TeamMenu) == 0x0008B8, "Member 'APC_Zombie_C::TeamMenu' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, HUD_ScoreBoard) == 0x0008C0, "Member 'APC_Zombie_C::HUD_ScoreBoard' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, Team) == 0x0008C8, "Member 'APC_Zombie_C::Team' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, AllowScreamer) == 0x0008C9, "Member 'APC_Zombie_C::AllowScreamer' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, HUD_Character) == 0x0008D0, "Member 'APC_Zombie_C::HUD_Character' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, IsDead_) == 0x0008D8, "Member 'APC_Zombie_C::IsDead_' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, WinHud) == 0x0008E0, "Member 'APC_Zombie_C::WinHud' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, Death) == 0x0008E8, "Member 'APC_Zombie_C::Death' has a wrong offset!");
static_assert(offsetof(APC_Zombie_C, Wave) == 0x0008EC, "Member 'APC_Zombie_C::Wave' has a wrong offset!");

}

