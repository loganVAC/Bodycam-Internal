#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UDS_PlayerOcclusion

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UDS_Occlusion_Mode_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass UDS_PlayerOcclusion.UDS_PlayerOcclusion_C
// 0x00A8 (0x0148 - 0x00A0)
class UUDS_PlayerOcclusion_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	EUDS_Occlusion_Mode                           Occlusion_Mode;                                    // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Occlusion_Location;                                // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Interior_Occlusion_Distance;                   // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               Occlusion_Trace_Channel;                           // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                Target_Occlusion_Profile;                          // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Occlusion_Update_Period;                           // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Current_Occlusion_Profile;                         // 0x00F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                Rain_Velocity;                                     // 0x0100(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Calculate_Rain_Occlusion;                          // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Running;                                           // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Acquire_Camera_Location;                           // 0x011A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11B[0x5];                                      // 0x011B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Inverted_Global_Occlusion;                         // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Full_Occluded_Percent;                             // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Not_Occluded_Percent;                              // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Level;                                       // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Water_Level;                                   // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force_Full_Occlusion;                              // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Weather;                                           // 0x0142(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Show_Trace_Debugs;                                 // 0x0143(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UDS_PlayerOcclusion(int32 EntryPoint);
	void Get_Occlusion_Location();
	void Get_Starting_Occlusion_Profile();
	void Initialize();
	void ReceiveTick(float DeltaSeconds);
	void Set_Target_Fully_Occluded();
	void Set_Target_Fully_Unoccluded();
	void Test_Point_for_Occlusion(TArray<class AActor*>& Actors_to_Ignore, const struct FVector& Test_Location, TArray<double>* Occlusion_Profile, double* Overall_Occlusion);
	void Update_Current_Occlusion_Profile();
	void Update_Target_Occlusion_Profile();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UDS_PlayerOcclusion_C">();
	}
	static class UUDS_PlayerOcclusion_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUDS_PlayerOcclusion_C>();
	}
};
static_assert(alignof(UUDS_PlayerOcclusion_C) == 0x000008, "Wrong alignment on UUDS_PlayerOcclusion_C");
static_assert(sizeof(UUDS_PlayerOcclusion_C) == 0x000148, "Wrong size on UUDS_PlayerOcclusion_C");
static_assert(offsetof(UUDS_PlayerOcclusion_C, UberGraphFrame) == 0x0000A0, "Member 'UUDS_PlayerOcclusion_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Occlusion_Mode) == 0x0000A8, "Member 'UUDS_PlayerOcclusion_C::Occlusion_Mode' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Occlusion_Location) == 0x0000B0, "Member 'UUDS_PlayerOcclusion_C::Occlusion_Location' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Max_Interior_Occlusion_Distance) == 0x0000C8, "Member 'UUDS_PlayerOcclusion_C::Max_Interior_Occlusion_Distance' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Occlusion_Trace_Channel) == 0x0000D0, "Member 'UUDS_PlayerOcclusion_C::Occlusion_Trace_Channel' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Target_Occlusion_Profile) == 0x0000D8, "Member 'UUDS_PlayerOcclusion_C::Target_Occlusion_Profile' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Occlusion_Update_Period) == 0x0000E8, "Member 'UUDS_PlayerOcclusion_C::Occlusion_Update_Period' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Current_Occlusion_Profile) == 0x0000F0, "Member 'UUDS_PlayerOcclusion_C::Current_Occlusion_Profile' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Rain_Velocity) == 0x000100, "Member 'UUDS_PlayerOcclusion_C::Rain_Velocity' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Calculate_Rain_Occlusion) == 0x000118, "Member 'UUDS_PlayerOcclusion_C::Calculate_Rain_Occlusion' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Running) == 0x000119, "Member 'UUDS_PlayerOcclusion_C::Running' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Acquire_Camera_Location) == 0x00011A, "Member 'UUDS_PlayerOcclusion_C::Acquire_Camera_Location' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Inverted_Global_Occlusion) == 0x000120, "Member 'UUDS_PlayerOcclusion_C::Inverted_Global_Occlusion' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Full_Occluded_Percent) == 0x000128, "Member 'UUDS_PlayerOcclusion_C::Full_Occluded_Percent' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Not_Occluded_Percent) == 0x000130, "Member 'UUDS_PlayerOcclusion_C::Not_Occluded_Percent' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Water_Level) == 0x000138, "Member 'UUDS_PlayerOcclusion_C::Water_Level' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Use_Water_Level) == 0x000140, "Member 'UUDS_PlayerOcclusion_C::Use_Water_Level' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Force_Full_Occlusion) == 0x000141, "Member 'UUDS_PlayerOcclusion_C::Force_Full_Occlusion' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Weather) == 0x000142, "Member 'UUDS_PlayerOcclusion_C::Weather' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Show_Trace_Debugs) == 0x000143, "Member 'UUDS_PlayerOcclusion_C::Show_Trace_Debugs' has a wrong offset!");

}

