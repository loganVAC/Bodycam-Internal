#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Xp

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BPI_Xp.BPI_Xp_C.GetCurrentRank
// 0x0020 (0x0020 - 0x0000)
struct BPI_Xp_C_GetCurrentRank final
{
public:
	int32                                         RankScore;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rank_;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CurrentRank;                                       // 0x0008(0x0018)(Parm, OutParm)
};
static_assert(alignof(BPI_Xp_C_GetCurrentRank) == 0x000008, "Wrong alignment on BPI_Xp_C_GetCurrentRank");
static_assert(sizeof(BPI_Xp_C_GetCurrentRank) == 0x000020, "Wrong size on BPI_Xp_C_GetCurrentRank");
static_assert(offsetof(BPI_Xp_C_GetCurrentRank, RankScore) == 0x000000, "Member 'BPI_Xp_C_GetCurrentRank::RankScore' has a wrong offset!");
static_assert(offsetof(BPI_Xp_C_GetCurrentRank, Rank_) == 0x000004, "Member 'BPI_Xp_C_GetCurrentRank::Rank_' has a wrong offset!");
static_assert(offsetof(BPI_Xp_C_GetCurrentRank, CurrentRank) == 0x000008, "Member 'BPI_Xp_C_GetCurrentRank::CurrentRank' has a wrong offset!");

// Function BPI_Xp.BPI_Xp_C.GetNewRank
// 0x0060 (0x0060 - 0x0000)
struct BPI_Xp_C_GetNewRank final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0018)(Parm, OutParm)
	class UTexture2D*                             Image;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         RankScore;                                         // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RankPosition;                                      // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RankDivision;                                      // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PreviousRankProgress;                              // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RankProgress;                                      // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewRank_;                                          // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            Color;                                             // 0x0044(0x0014)(Parm, OutParm)
	int32                                         Rank_Integer;                                      // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Xp_C_GetNewRank) == 0x000008, "Wrong alignment on BPI_Xp_C_GetNewRank");
static_assert(sizeof(BPI_Xp_C_GetNewRank) == 0x000060, "Wrong size on BPI_Xp_C_GetNewRank");
static_assert(offsetof(BPI_Xp_C_GetNewRank, Name_0) == 0x000000, "Member 'BPI_Xp_C_GetNewRank::Name_0' has a wrong offset!");
static_assert(offsetof(BPI_Xp_C_GetNewRank, Image) == 0x000018, "Member 'BPI_Xp_C_GetNewRank::Image' has a wrong offset!");
static_assert(offsetof(BPI_Xp_C_GetNewRank, RankScore) == 0x000020, "Member 'BPI_Xp_C_GetNewRank::RankScore' has a wrong offset!");
static_assert(offsetof(BPI_Xp_C_GetNewRank, RankPosition) == 0x000024, "Member 'BPI_Xp_C_GetNewRank::RankPosition' has a wrong offset!");
static_assert(offsetof(BPI_Xp_C_GetNewRank, RankDivision) == 0x000028, "Member 'BPI_Xp_C_GetNewRank::RankDivision' has a wrong offset!");
static_assert(offsetof(BPI_Xp_C_GetNewRank, PreviousRankProgress) == 0x000030, "Member 'BPI_Xp_C_GetNewRank::PreviousRankProgress' has a wrong offset!");
static_assert(offsetof(BPI_Xp_C_GetNewRank, RankProgress) == 0x000038, "Member 'BPI_Xp_C_GetNewRank::RankProgress' has a wrong offset!");
static_assert(offsetof(BPI_Xp_C_GetNewRank, NewRank_) == 0x000040, "Member 'BPI_Xp_C_GetNewRank::NewRank_' has a wrong offset!");
static_assert(offsetof(BPI_Xp_C_GetNewRank, Color) == 0x000044, "Member 'BPI_Xp_C_GetNewRank::Color' has a wrong offset!");
static_assert(offsetof(BPI_Xp_C_GetNewRank, Rank_Integer) == 0x000058, "Member 'BPI_Xp_C_GetNewRank::Rank_Integer' has a wrong offset!");

// Function BPI_Xp.BPI_Xp_C.Update Death
// 0x0008 (0x0008 - 0x0000)
struct BPI_Xp_C_Update_Death final
{
public:
	int32                                         Death;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set;                                               // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Xp_C_Update_Death) == 0x000004, "Wrong alignment on BPI_Xp_C_Update_Death");
static_assert(sizeof(BPI_Xp_C_Update_Death) == 0x000008, "Wrong size on BPI_Xp_C_Update_Death");
static_assert(offsetof(BPI_Xp_C_Update_Death, Death) == 0x000000, "Member 'BPI_Xp_C_Update_Death::Death' has a wrong offset!");
static_assert(offsetof(BPI_Xp_C_Update_Death, Set) == 0x000004, "Member 'BPI_Xp_C_Update_Death::Set' has a wrong offset!");

// Function BPI_Xp.BPI_Xp_C.Update Kill
// 0x0004 (0x0004 - 0x0000)
struct BPI_Xp_C_Update_Kill final
{
public:
	int32                                         Kill_;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Xp_C_Update_Kill) == 0x000004, "Wrong alignment on BPI_Xp_C_Update_Kill");
static_assert(sizeof(BPI_Xp_C_Update_Kill) == 0x000004, "Wrong size on BPI_Xp_C_Update_Kill");
static_assert(offsetof(BPI_Xp_C_Update_Kill, Kill_) == 0x000000, "Member 'BPI_Xp_C_Update_Kill::Kill_' has a wrong offset!");

// Function BPI_Xp.BPI_Xp_C.UpdateXp
// 0x0004 (0x0004 - 0x0000)
struct BPI_Xp_C_UpdateXp final
{
public:
	int32                                         Xp;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Xp_C_UpdateXp) == 0x000004, "Wrong alignment on BPI_Xp_C_UpdateXp");
static_assert(sizeof(BPI_Xp_C_UpdateXp) == 0x000004, "Wrong size on BPI_Xp_C_UpdateXp");
static_assert(offsetof(BPI_Xp_C_UpdateXp, Xp) == 0x000000, "Member 'BPI_Xp_C_UpdateXp::Xp' has a wrong offset!");

}

