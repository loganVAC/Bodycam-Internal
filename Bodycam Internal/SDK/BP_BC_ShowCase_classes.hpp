#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BC_ShowCase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EN_SaveType_structs.hpp"
#include "EN_ShopItemSupClass_structs.hpp"
#include "ST_DefaultSteamItem_structs.hpp"
#include "E_Team_structs.hpp"
#include "EN_ShopItemClass_structs.hpp"
#include "GameMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BC_ShowCase.BP_BC_ShowCase_C
// 0x0110 (0x0740 - 0x0630)
class ABP_BC_ShowCase_C final : public ACharacter
{
public:
	uint8                                         Pad_628[0x8];                                      // 0x0628(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0630(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Censor_Face;                                       // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Weapons;                                           // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       WidgetFocus;                                       // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Rotation;                                          // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Steam_ID;                                          // 0x0668(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	bool                                          Ready_;                                            // 0x0678(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTalking;                                         // 0x0679(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67A[0x6];                                      // 0x067A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVOIPTalker*                            Voip;                                              // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Upload_Steam_Save_Done;                            // 0x0688(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EN_SaveType                                   EN_SaveType;                                       // 0x0698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_699[0x7];                                      // 0x0699(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USG_PlayerCustomization_C*              SG_PlayerItemGear_REF;                             // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   As_Cine_Camera_Component;                          // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Anim_Weapons_Pistol;                               // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Anim_Weapons_AK47;                                 // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Anim_No_Weapons;                                   // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Anim_Gloves;                                       // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Anim_Head;                                         // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Anim_Foot;                                         // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Anim_BackPack;                                     // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TArray<struct FST_DefaultSteamItem>           PlayerSkin__RepNotify_;                            // 0x06E8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, ContainsInstancedReference)
	EN_ShopItemSupClass                           ItemClassSup_Local;                                // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F9[0x7];                                      // 0x06F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBodycamGI_C*                           Bodycam_GI_REF;                                    // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          AlreadyItemInClass;                                // 0x0708(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_709[0x7];                                      // 0x0709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CurrentSkeletelMesh;                               // 0x0710(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	EN_ShopItemSupClass                           ItemClassSup_Temporary;                            // 0x0720(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_721[0x7];                                      // 0x0721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   Sequence_Player;                                   // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMesh*                          PlayerCurrentSkin;                                 // 0x0730(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void Apply_SAVED___TEMPORARY();
	void Apply_TEMPORARY___SAVED();
	void BreakTimer();
	void CanCreateKickVote(bool* CanCreateKickVote_);
	void CanKickThisPlayer_(const class FString& PlayerID, bool* True_);
	void ChangeAnim(class ULevelSequence* LevelSequence);
	void ClearMap();
	void Create_Save_Local();
	void DestroyVOIP();
	void Download_Steam_Save();
	void Event_Ragdoll_End();
	void EventRagdollStart();
	void ExecuteUbergraph_BP_BC_ShowCase(int32 EntryPoint);
	void Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component);
	void Get_Stamina(double* Stamina);
	void GetBlured(double* Blured);
	void GetBurnedRef(class USceneComponent** BurnedMesh);
	void GetFlashBangEffect(double* FlashEffect);
	void GetGameMode(struct FSTR_GamemodeWinInfo* GameMode);
	void GetHealth(double* Health);
	void GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote);
	void GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController);
	void GetMutePlayer(TArray<class FString>* MutePlayer);
	void GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected);
	void GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer);
	void GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_);
	void GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System);
	void GetReady_(bool* IsReady_);
	void GetServerSteamID(class FString* SteamID);
	void GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons_0);
	void GetSteamID(class FString* SteamID);
	void GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant);
	void GetTeam(E_Team* Team);
	void GetTeamList(E_Team Team, TArray<struct FSTR_PCInfo>* Info);
	void GetTopScore(TArray<struct FSTR_PCInfo>* TopScore);
	void Init();
	void InitScoreBoard();
	void InitUserName__Multicast_(const class FString& SteamID);
	void InitUserName__Server_(const class FString& SteamID);
	void InitVOIP();
	void Is_Spawn_Point_Valid(const struct FTransform& Spawn_Transform, bool* Valid_);
	void IsDead(bool* Dead_);
	void IsDestroyabe_(bool* Destroyable_);
	void IsReady_(bool IsReady__0);
	void IsStress(bool* Yes_);
	void IsTalking_(bool* IsTalking__0);
	void IsTalking___Server_(bool IsTalking__0);
	void Kick_(const struct FSTR_PCInfo& Target);
	void KickPlayer(const struct FSTR_KickVote& PlayerInfo);
	void MuteID(const class FString& SteamID);
	void NewKickVote(const struct FSTR_PCInfo& Target);
	void OnBlendOut_286DF58A484E2FD546809EACD187D7A5(class FName NotifyName);
	void OnCompleted_286DF58A484E2FD546809EACD187D7A5(class FName NotifyName);
	void OnInterrupted_286DF58A484E2FD546809EACD187D7A5(class FName NotifyName);
	void OnNotifyBegin_286DF58A484E2FD546809EACD187D7A5(class FName NotifyName);
	void OnNotifyEnd_286DF58A484E2FD546809EACD187D7A5(class FName NotifyName);
	void OnPlayerDeath(class APlayerController* PC);
	void OnRep_PlayerCurrentSkin();
	void OnRep_Ready_();
	void OnRep_Steam_ID();
	void OnTrySelectTeam(E_Team Team);
	void Play_Sounds__Server_(class USoundBase* Sound);
	void PlayerPlacement();
	void PlayerSkin__Server_(TArray<struct FST_DefaultSteamItem>& PlayerSkin);
	void PlayMontage();
	void Preview(bool ShowPreview, const struct FST_DefaultSteamItem& Item);
	void ReceiveBeginPlay();
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void RemovePreview();
	void ServerTravel(double Delay);
	void Slomo(double Slomo_0);
	void Talk(bool IsTalking_0);
	void UpdateFInalSkin__Client_();
	void UpdateGamemode(EGameMode GameMode);
	void UpdateInventory(const struct FST_DefaultSteamItem& NewItem);
	void UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_);
	void UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0);
	void UpdateModeInfo();
	void UpdateMovement(const struct FST_DefaultSteamItem& ItemInfo, bool UpdateAnim_, bool UpdateCamera_);
	void UpdatePlayerSkin__Client_(EN_ShopItemSupClass ItemClassSup_Local_0, bool CHANGE_ItemClassSup_Local__);
	void UpdateReady_HUD(bool Ready__0);
	void UpdateSaveCharacterSkin();
	void UpdateScore(const struct FSTR_Score& Score);
	void UpdateSkel__multicast_(class USkeletalMesh* NewMesh);
	void UpdateSkel__Server_(class USkeletalMesh* NewMesh);
	void UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamXP(bool Win_);
	void UpdateTimer(double TimeCount, const class FText& NewParam);
	void UpdateTransitionMap();
	void UpdateWarning(const class FString& String);
	void UpdateWep__Multicast_(class USkeletalMesh* NewMesh, TArray<class UMaterialInterface*>& CustomMaterials);
	void Upload_Steam_Save();
	void Upload_Steam_Save_Done__DelegateSignature();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BC_ShowCase_C">();
	}
	static class ABP_BC_ShowCase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BC_ShowCase_C>();
	}
};
static_assert(alignof(ABP_BC_ShowCase_C) == 0x000010, "Wrong alignment on ABP_BC_ShowCase_C");
static_assert(sizeof(ABP_BC_ShowCase_C) == 0x000740, "Wrong size on ABP_BC_ShowCase_C");
static_assert(offsetof(ABP_BC_ShowCase_C, UberGraphFrame) == 0x000630, "Member 'ABP_BC_ShowCase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, PostProcess) == 0x000638, "Member 'ABP_BC_ShowCase_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Censor_Face) == 0x000640, "Member 'ABP_BC_ShowCase_C::Censor_Face' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, TextRender) == 0x000648, "Member 'ABP_BC_ShowCase_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Weapons) == 0x000650, "Member 'ABP_BC_ShowCase_C::Weapons' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, WidgetFocus) == 0x000658, "Member 'ABP_BC_ShowCase_C::WidgetFocus' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Rotation) == 0x000660, "Member 'ABP_BC_ShowCase_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Steam_ID) == 0x000668, "Member 'ABP_BC_ShowCase_C::Steam_ID' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Ready_) == 0x000678, "Member 'ABP_BC_ShowCase_C::Ready_' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, IsTalking) == 0x000679, "Member 'ABP_BC_ShowCase_C::IsTalking' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Voip) == 0x000680, "Member 'ABP_BC_ShowCase_C::Voip' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Upload_Steam_Save_Done) == 0x000688, "Member 'ABP_BC_ShowCase_C::Upload_Steam_Save_Done' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, EN_SaveType) == 0x000698, "Member 'ABP_BC_ShowCase_C::EN_SaveType' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, SG_PlayerItemGear_REF) == 0x0006A0, "Member 'ABP_BC_ShowCase_C::SG_PlayerItemGear_REF' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, As_Cine_Camera_Component) == 0x0006A8, "Member 'ABP_BC_ShowCase_C::As_Cine_Camera_Component' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Anim_Weapons_Pistol) == 0x0006B0, "Member 'ABP_BC_ShowCase_C::Anim_Weapons_Pistol' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Anim_Weapons_AK47) == 0x0006B8, "Member 'ABP_BC_ShowCase_C::Anim_Weapons_AK47' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Anim_No_Weapons) == 0x0006C0, "Member 'ABP_BC_ShowCase_C::Anim_No_Weapons' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Anim_Gloves) == 0x0006C8, "Member 'ABP_BC_ShowCase_C::Anim_Gloves' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Anim_Head) == 0x0006D0, "Member 'ABP_BC_ShowCase_C::Anim_Head' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Anim_Foot) == 0x0006D8, "Member 'ABP_BC_ShowCase_C::Anim_Foot' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Anim_BackPack) == 0x0006E0, "Member 'ABP_BC_ShowCase_C::Anim_BackPack' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, PlayerSkin__RepNotify_) == 0x0006E8, "Member 'ABP_BC_ShowCase_C::PlayerSkin__RepNotify_' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, ItemClassSup_Local) == 0x0006F8, "Member 'ABP_BC_ShowCase_C::ItemClassSup_Local' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Bodycam_GI_REF) == 0x000700, "Member 'ABP_BC_ShowCase_C::Bodycam_GI_REF' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, AlreadyItemInClass) == 0x000708, "Member 'ABP_BC_ShowCase_C::AlreadyItemInClass' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, CurrentSkeletelMesh) == 0x000710, "Member 'ABP_BC_ShowCase_C::CurrentSkeletelMesh' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, ItemClassSup_Temporary) == 0x000720, "Member 'ABP_BC_ShowCase_C::ItemClassSup_Temporary' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, Sequence_Player) == 0x000728, "Member 'ABP_BC_ShowCase_C::Sequence_Player' has a wrong offset!");
static_assert(offsetof(ABP_BC_ShowCase_C, PlayerCurrentSkin) == 0x000730, "Member 'ABP_BC_ShowCase_C::PlayerCurrentSkin' has a wrong offset!");

}

