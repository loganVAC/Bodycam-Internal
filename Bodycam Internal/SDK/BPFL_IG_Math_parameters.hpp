#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_IG_Math

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SSpringInterpVector_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPFL_IG_Math.BPFL_IG_Math_C.Add Rotators
// 0x00D8 (0x00D8 - 0x0000)
struct BPFL_IG_Math_C_Add_Rotators final
{
public:
	struct FRotator                               A;                                                 // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               B;                                                 // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Value;                                             // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_2;        // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_1;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_2;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_IG_Math_C_Add_Rotators) == 0x000008, "Wrong alignment on BPFL_IG_Math_C_Add_Rotators");
static_assert(sizeof(BPFL_IG_Math_C_Add_Rotators) == 0x0000D8, "Wrong size on BPFL_IG_Math_C_Add_Rotators");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, A) == 0x000000, "Member 'BPFL_IG_Math_C_Add_Rotators::A' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, B) == 0x000018, "Member 'BPFL_IG_Math_C_Add_Rotators::B' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, __WorldContext) == 0x000030, "Member 'BPFL_IG_Math_C_Add_Rotators::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, Value) == 0x000038, "Member 'BPFL_IG_Math_C_Add_Rotators::Value' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_BreakRotator_Roll) == 0x000050, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_BreakRotator_Pitch) == 0x000054, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_BreakRotator_Yaw) == 0x000058, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_BreakRotator_Roll_1) == 0x00005C, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_BreakRotator_Pitch_1) == 0x000060, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_BreakRotator_Yaw_1) == 0x000064, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000068, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000070, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000078, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_MakeRotator_ReturnValue) == 0x000080, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000098, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x0000A0, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_Add_DoubleDouble_A_ImplicitCast_2) == 0x0000A8, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_Add_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x0000B0, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_Add_DoubleDouble_B_ImplicitCast_1) == 0x0000B8, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_Add_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_Add_DoubleDouble_B_ImplicitCast_2) == 0x0000C0, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_Add_DoubleDouble_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x0000C8, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0000CC, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Rotators, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0000D0, "Member 'BPFL_IG_Math_C_Add_Rotators::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function BPFL_IG_Math.BPFL_IG_Math_C.Add Transforms
// 0x0250 (0x0250 - 0x0000)
struct BPFL_IG_Math_C_Add_Transforms final
{
public:
	struct FTransform                             A;                                                 // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             B;                                                 // 0x0060(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x00D0(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Add_Rotators_Value;                       // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x01F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_IG_Math_C_Add_Transforms) == 0x000010, "Wrong alignment on BPFL_IG_Math_C_Add_Transforms");
static_assert(sizeof(BPFL_IG_Math_C_Add_Transforms) == 0x000250, "Wrong size on BPFL_IG_Math_C_Add_Transforms");
static_assert(offsetof(BPFL_IG_Math_C_Add_Transforms, A) == 0x000000, "Member 'BPFL_IG_Math_C_Add_Transforms::A' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Transforms, B) == 0x000060, "Member 'BPFL_IG_Math_C_Add_Transforms::B' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Transforms, __WorldContext) == 0x0000C0, "Member 'BPFL_IG_Math_C_Add_Transforms::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Transforms, ReturnValue) == 0x0000D0, "Member 'BPFL_IG_Math_C_Add_Transforms::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Transforms, CallFunc_BreakTransform_Location) == 0x000130, "Member 'BPFL_IG_Math_C_Add_Transforms::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Transforms, CallFunc_BreakTransform_Rotation) == 0x000148, "Member 'BPFL_IG_Math_C_Add_Transforms::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Transforms, CallFunc_BreakTransform_Scale) == 0x000160, "Member 'BPFL_IG_Math_C_Add_Transforms::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Transforms, CallFunc_BreakTransform_Location_1) == 0x000178, "Member 'BPFL_IG_Math_C_Add_Transforms::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Transforms, CallFunc_BreakTransform_Rotation_1) == 0x000190, "Member 'BPFL_IG_Math_C_Add_Transforms::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Transforms, CallFunc_BreakTransform_Scale_1) == 0x0001A8, "Member 'BPFL_IG_Math_C_Add_Transforms::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Transforms, CallFunc_Add_VectorVector_ReturnValue) == 0x0001C0, "Member 'BPFL_IG_Math_C_Add_Transforms::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Transforms, CallFunc_Add_Rotators_Value) == 0x0001D8, "Member 'BPFL_IG_Math_C_Add_Transforms::CallFunc_Add_Rotators_Value' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Add_Transforms, CallFunc_MakeTransform_ReturnValue) == 0x0001F0, "Member 'BPFL_IG_Math_C_Add_Transforms::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BPFL_IG_Math.BPFL_IG_Math_C.Custom Float Spring Interp
// 0x0068 (0x0068 - 0x0000)
struct BPFL_IG_Math_C_Custom_Float_Spring_Interp final
{
public:
	double                                        Current;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Target;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Delta_Time;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSSpringInterpVector                   Data;                                              // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatSpringState                      Spring_State;                                      // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSSpringInterpVector                   Local_Data;                                        // 0x0040(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_ReturnValue;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_Target_ImplicitCast;    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_Current_ImplicitCast;   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_DeltaTime_ImplicitCast; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_IG_Math_C_Custom_Float_Spring_Interp) == 0x000008, "Wrong alignment on BPFL_IG_Math_C_Custom_Float_Spring_Interp");
static_assert(sizeof(BPFL_IG_Math_C_Custom_Float_Spring_Interp) == 0x000068, "Wrong size on BPFL_IG_Math_C_Custom_Float_Spring_Interp");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Float_Spring_Interp, Current) == 0x000000, "Member 'BPFL_IG_Math_C_Custom_Float_Spring_Interp::Current' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Float_Spring_Interp, Target) == 0x000008, "Member 'BPFL_IG_Math_C_Custom_Float_Spring_Interp::Target' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Float_Spring_Interp, Delta_Time) == 0x000010, "Member 'BPFL_IG_Math_C_Custom_Float_Spring_Interp::Delta_Time' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Float_Spring_Interp, Data) == 0x000018, "Member 'BPFL_IG_Math_C_Custom_Float_Spring_Interp::Data' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Float_Spring_Interp, Spring_State) == 0x000024, "Member 'BPFL_IG_Math_C_Custom_Float_Spring_Interp::Spring_State' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Float_Spring_Interp, __WorldContext) == 0x000030, "Member 'BPFL_IG_Math_C_Custom_Float_Spring_Interp::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Float_Spring_Interp, ReturnValue) == 0x000038, "Member 'BPFL_IG_Math_C_Custom_Float_Spring_Interp::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Float_Spring_Interp, Local_Data) == 0x000040, "Member 'BPFL_IG_Math_C_Custom_Float_Spring_Interp::Local_Data' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Float_Spring_Interp, CallFunc_FloatSpringInterp_ReturnValue) == 0x00004C, "Member 'BPFL_IG_Math_C_Custom_Float_Spring_Interp::CallFunc_FloatSpringInterp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Float_Spring_Interp, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000050, "Member 'BPFL_IG_Math_C_Custom_Float_Spring_Interp::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Float_Spring_Interp, CallFunc_FloatSpringInterp_Target_ImplicitCast) == 0x000058, "Member 'BPFL_IG_Math_C_Custom_Float_Spring_Interp::CallFunc_FloatSpringInterp_Target_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Float_Spring_Interp, CallFunc_FloatSpringInterp_Current_ImplicitCast) == 0x00005C, "Member 'BPFL_IG_Math_C_Custom_Float_Spring_Interp::CallFunc_FloatSpringInterp_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Float_Spring_Interp, CallFunc_FloatSpringInterp_DeltaTime_ImplicitCast) == 0x000060, "Member 'BPFL_IG_Math_C_Custom_Float_Spring_Interp::CallFunc_FloatSpringInterp_DeltaTime_ImplicitCast' has a wrong offset!");

// Function BPFL_IG_Math.BPFL_IG_Math_C.Custom Vector Spring Interp
// 0x00D0 (0x00D0 - 0x0000)
struct BPFL_IG_Math_C_Custom_Vector_Spring_Interp final
{
public:
	struct FVector                                Current;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target;                                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Delta_Time;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSSpringInterpVector                   Data;                                              // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorSpringState                     Spring_State;                                      // 0x0048(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0088(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSSpringInterpVector                   Local_Data;                                        // 0x00A0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VectorSpringInterp_ReturnValue;           // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VectorSpringInterp_DeltaTime_ImplicitCast; // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_IG_Math_C_Custom_Vector_Spring_Interp) == 0x000008, "Wrong alignment on BPFL_IG_Math_C_Custom_Vector_Spring_Interp");
static_assert(sizeof(BPFL_IG_Math_C_Custom_Vector_Spring_Interp) == 0x0000D0, "Wrong size on BPFL_IG_Math_C_Custom_Vector_Spring_Interp");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Vector_Spring_Interp, Current) == 0x000000, "Member 'BPFL_IG_Math_C_Custom_Vector_Spring_Interp::Current' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Vector_Spring_Interp, Target) == 0x000018, "Member 'BPFL_IG_Math_C_Custom_Vector_Spring_Interp::Target' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Vector_Spring_Interp, Delta_Time) == 0x000030, "Member 'BPFL_IG_Math_C_Custom_Vector_Spring_Interp::Delta_Time' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Vector_Spring_Interp, Data) == 0x000038, "Member 'BPFL_IG_Math_C_Custom_Vector_Spring_Interp::Data' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Vector_Spring_Interp, Spring_State) == 0x000048, "Member 'BPFL_IG_Math_C_Custom_Vector_Spring_Interp::Spring_State' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Vector_Spring_Interp, __WorldContext) == 0x000080, "Member 'BPFL_IG_Math_C_Custom_Vector_Spring_Interp::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Vector_Spring_Interp, ReturnValue) == 0x000088, "Member 'BPFL_IG_Math_C_Custom_Vector_Spring_Interp::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Vector_Spring_Interp, Local_Data) == 0x0000A0, "Member 'BPFL_IG_Math_C_Custom_Vector_Spring_Interp::Local_Data' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Vector_Spring_Interp, CallFunc_VectorSpringInterp_ReturnValue) == 0x0000B0, "Member 'BPFL_IG_Math_C_Custom_Vector_Spring_Interp::CallFunc_VectorSpringInterp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Custom_Vector_Spring_Interp, CallFunc_VectorSpringInterp_DeltaTime_ImplicitCast) == 0x0000C8, "Member 'BPFL_IG_Math_C_Custom_Vector_Spring_Interp::CallFunc_VectorSpringInterp_DeltaTime_ImplicitCast' has a wrong offset!");

// Function BPFL_IG_Math.BPFL_IG_Math_C.Negate Rotator
// 0x0050 (0x0050 - 0x0000)
struct BPFL_IG_Math_C_Negate_Rotator final
{
public:
	struct FRotator                               A;                                                 // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Multiply_RotatorFloat_ReturnValue;        // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_IG_Math_C_Negate_Rotator) == 0x000008, "Wrong alignment on BPFL_IG_Math_C_Negate_Rotator");
static_assert(sizeof(BPFL_IG_Math_C_Negate_Rotator) == 0x000050, "Wrong size on BPFL_IG_Math_C_Negate_Rotator");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Rotator, A) == 0x000000, "Member 'BPFL_IG_Math_C_Negate_Rotator::A' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Rotator, __WorldContext) == 0x000018, "Member 'BPFL_IG_Math_C_Negate_Rotator::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Rotator, ReturnValue) == 0x000020, "Member 'BPFL_IG_Math_C_Negate_Rotator::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Rotator, CallFunc_Multiply_RotatorFloat_ReturnValue) == 0x000038, "Member 'BPFL_IG_Math_C_Negate_Rotator::CallFunc_Multiply_RotatorFloat_ReturnValue' has a wrong offset!");

// Function BPFL_IG_Math.BPFL_IG_Math_C.Negate Transform
// 0x01E0 (0x01E0 - 0x0000)
struct BPFL_IG_Math_C_Negate_Transform final
{
public:
	struct FTransform                             In;                                                // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ignore_Scale;                                      // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Out;                                               // 0x0070(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue_1;               // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Negate_Rotator_ReturnValue;               // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0180(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_IG_Math_C_Negate_Transform) == 0x000010, "Wrong alignment on BPFL_IG_Math_C_Negate_Transform");
static_assert(sizeof(BPFL_IG_Math_C_Negate_Transform) == 0x0001E0, "Wrong size on BPFL_IG_Math_C_Negate_Transform");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Transform, In) == 0x000000, "Member 'BPFL_IG_Math_C_Negate_Transform::In' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Transform, Ignore_Scale) == 0x000060, "Member 'BPFL_IG_Math_C_Negate_Transform::Ignore_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Transform, __WorldContext) == 0x000068, "Member 'BPFL_IG_Math_C_Negate_Transform::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Transform, Out) == 0x000070, "Member 'BPFL_IG_Math_C_Negate_Transform::Out' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Transform, CallFunc_BreakTransform_Location) == 0x0000D0, "Member 'BPFL_IG_Math_C_Negate_Transform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Transform, CallFunc_BreakTransform_Rotation) == 0x0000E8, "Member 'BPFL_IG_Math_C_Negate_Transform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Transform, CallFunc_BreakTransform_Scale) == 0x000100, "Member 'BPFL_IG_Math_C_Negate_Transform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Transform, Temp_bool_Variable) == 0x000118, "Member 'BPFL_IG_Math_C_Negate_Transform::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Transform, CallFunc_NegateVector_ReturnValue) == 0x000120, "Member 'BPFL_IG_Math_C_Negate_Transform::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Transform, CallFunc_NegateVector_ReturnValue_1) == 0x000138, "Member 'BPFL_IG_Math_C_Negate_Transform::CallFunc_NegateVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Transform, K2Node_Select_Default) == 0x000150, "Member 'BPFL_IG_Math_C_Negate_Transform::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Transform, CallFunc_Negate_Rotator_ReturnValue) == 0x000168, "Member 'BPFL_IG_Math_C_Negate_Transform::CallFunc_Negate_Rotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Negate_Transform, CallFunc_MakeTransform_ReturnValue) == 0x000180, "Member 'BPFL_IG_Math_C_Negate_Transform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BPFL_IG_Math.BPFL_IG_Math_C.Random Float In Vector Range
// 0x0038 (0x0038 - 0x0000)
struct BPFL_IG_Math_C_Random_Float_In_Vector_Range final
{
public:
	struct FVector2D                              Range;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_IG_Math_C_Random_Float_In_Vector_Range) == 0x000008, "Wrong alignment on BPFL_IG_Math_C_Random_Float_In_Vector_Range");
static_assert(sizeof(BPFL_IG_Math_C_Random_Float_In_Vector_Range) == 0x000038, "Wrong size on BPFL_IG_Math_C_Random_Float_In_Vector_Range");
static_assert(offsetof(BPFL_IG_Math_C_Random_Float_In_Vector_Range, Range) == 0x000000, "Member 'BPFL_IG_Math_C_Random_Float_In_Vector_Range::Range' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Random_Float_In_Vector_Range, __WorldContext) == 0x000010, "Member 'BPFL_IG_Math_C_Random_Float_In_Vector_Range::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Random_Float_In_Vector_Range, ReturnValue) == 0x000018, "Member 'BPFL_IG_Math_C_Random_Float_In_Vector_Range::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Random_Float_In_Vector_Range, CallFunc_BreakVector2D_X) == 0x000020, "Member 'BPFL_IG_Math_C_Random_Float_In_Vector_Range::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Random_Float_In_Vector_Range, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'BPFL_IG_Math_C_Random_Float_In_Vector_Range::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Random_Float_In_Vector_Range, CallFunc_RandomFloatInRange_ReturnValue) == 0x000030, "Member 'BPFL_IG_Math_C_Random_Float_In_Vector_Range::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");

// Function BPFL_IG_Math.BPFL_IG_Math_C.Random Integer In Vector Range
// 0x0040 (0x0040 - 0x0000)
struct BPFL_IG_Math_C_Random_Integer_In_Vector_Range final
{
public:
	struct FVector2D                              Range;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_IG_Math_C_Random_Integer_In_Vector_Range) == 0x000008, "Wrong alignment on BPFL_IG_Math_C_Random_Integer_In_Vector_Range");
static_assert(sizeof(BPFL_IG_Math_C_Random_Integer_In_Vector_Range) == 0x000040, "Wrong size on BPFL_IG_Math_C_Random_Integer_In_Vector_Range");
static_assert(offsetof(BPFL_IG_Math_C_Random_Integer_In_Vector_Range, Range) == 0x000000, "Member 'BPFL_IG_Math_C_Random_Integer_In_Vector_Range::Range' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Random_Integer_In_Vector_Range, __WorldContext) == 0x000010, "Member 'BPFL_IG_Math_C_Random_Integer_In_Vector_Range::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Random_Integer_In_Vector_Range, ReturnValue) == 0x000018, "Member 'BPFL_IG_Math_C_Random_Integer_In_Vector_Range::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Random_Integer_In_Vector_Range, CallFunc_BreakVector2D_X) == 0x000020, "Member 'BPFL_IG_Math_C_Random_Integer_In_Vector_Range::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Random_Integer_In_Vector_Range, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'BPFL_IG_Math_C_Random_Integer_In_Vector_Range::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Random_Integer_In_Vector_Range, CallFunc_FTrunc_ReturnValue) == 0x000030, "Member 'BPFL_IG_Math_C_Random_Integer_In_Vector_Range::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Random_Integer_In_Vector_Range, CallFunc_FTrunc_ReturnValue_1) == 0x000034, "Member 'BPFL_IG_Math_C_Random_Integer_In_Vector_Range::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Random_Integer_In_Vector_Range, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000038, "Member 'BPFL_IG_Math_C_Random_Integer_In_Vector_Range::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");

// Function BPFL_IG_Math.BPFL_IG_Math_C.Rotator To Vector
// 0x0078 (0x0078 - 0x0000)
struct BPFL_IG_Math_C_Rotator_To_Vector final
{
public:
	struct FRotator                               Value;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_X_ImplicitCast;                // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Y_ImplicitCast;                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Z_ImplicitCast;                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_IG_Math_C_Rotator_To_Vector) == 0x000008, "Wrong alignment on BPFL_IG_Math_C_Rotator_To_Vector");
static_assert(sizeof(BPFL_IG_Math_C_Rotator_To_Vector) == 0x000078, "Wrong size on BPFL_IG_Math_C_Rotator_To_Vector");
static_assert(offsetof(BPFL_IG_Math_C_Rotator_To_Vector, Value) == 0x000000, "Member 'BPFL_IG_Math_C_Rotator_To_Vector::Value' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Rotator_To_Vector, __WorldContext) == 0x000018, "Member 'BPFL_IG_Math_C_Rotator_To_Vector::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Rotator_To_Vector, ReturnValue) == 0x000020, "Member 'BPFL_IG_Math_C_Rotator_To_Vector::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Rotator_To_Vector, CallFunc_BreakRotator_Roll) == 0x000038, "Member 'BPFL_IG_Math_C_Rotator_To_Vector::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Rotator_To_Vector, CallFunc_BreakRotator_Pitch) == 0x00003C, "Member 'BPFL_IG_Math_C_Rotator_To_Vector::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Rotator_To_Vector, CallFunc_BreakRotator_Yaw) == 0x000040, "Member 'BPFL_IG_Math_C_Rotator_To_Vector::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Rotator_To_Vector, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'BPFL_IG_Math_C_Rotator_To_Vector::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Rotator_To_Vector, CallFunc_MakeVector_X_ImplicitCast) == 0x000060, "Member 'BPFL_IG_Math_C_Rotator_To_Vector::CallFunc_MakeVector_X_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Rotator_To_Vector, CallFunc_MakeVector_Y_ImplicitCast) == 0x000068, "Member 'BPFL_IG_Math_C_Rotator_To_Vector::CallFunc_MakeVector_Y_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Rotator_To_Vector, CallFunc_MakeVector_Z_ImplicitCast) == 0x000070, "Member 'BPFL_IG_Math_C_Rotator_To_Vector::CallFunc_MakeVector_Z_ImplicitCast' has a wrong offset!");

// Function BPFL_IG_Math.BPFL_IG_Math_C.Subtract Rotators
// 0x00F8 (0x00F8 - 0x0000)
struct BPFL_IG_Math_C_Subtract_Rotators final
{
public:
	struct FRotator                               A;                                                 // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               B;                                                 // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Negate_Rotator_ReturnValue;               // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_2;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_1;        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_2;        // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_IG_Math_C_Subtract_Rotators) == 0x000008, "Wrong alignment on BPFL_IG_Math_C_Subtract_Rotators");
static_assert(sizeof(BPFL_IG_Math_C_Subtract_Rotators) == 0x0000F8, "Wrong size on BPFL_IG_Math_C_Subtract_Rotators");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, A) == 0x000000, "Member 'BPFL_IG_Math_C_Subtract_Rotators::A' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, B) == 0x000018, "Member 'BPFL_IG_Math_C_Subtract_Rotators::B' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, __WorldContext) == 0x000030, "Member 'BPFL_IG_Math_C_Subtract_Rotators::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, ReturnValue) == 0x000038, "Member 'BPFL_IG_Math_C_Subtract_Rotators::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_BreakRotator_Roll) == 0x000050, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_BreakRotator_Pitch) == 0x000054, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_BreakRotator_Yaw) == 0x000058, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_Negate_Rotator_ReturnValue) == 0x000060, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_Negate_Rotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_BreakRotator_Roll_1) == 0x000078, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_BreakRotator_Pitch_1) == 0x00007C, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_BreakRotator_Yaw_1) == 0x000080, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000088, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000090, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000098, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_MakeRotator_ReturnValue) == 0x0000A0, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x0000B8, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x0000C0, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_Add_DoubleDouble_A_ImplicitCast_2) == 0x0000C8, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_Add_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x0000D0, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_Add_DoubleDouble_B_ImplicitCast_1) == 0x0000D8, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_Add_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_Add_DoubleDouble_B_ImplicitCast_2) == 0x0000E0, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_Add_DoubleDouble_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x0000E8, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0000EC, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Subtract_Rotators, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0000F0, "Member 'BPFL_IG_Math_C_Subtract_Rotators::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function BPFL_IG_Math.BPFL_IG_Math_C.Vector To Rotator
// 0x0078 (0x0078 - 0x0000)
struct BPFL_IG_Math_C_Vector_To_Rotator final
{
public:
	struct FVector                                In;                                                // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Out;                                               // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector_X;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_IG_Math_C_Vector_To_Rotator) == 0x000008, "Wrong alignment on BPFL_IG_Math_C_Vector_To_Rotator");
static_assert(sizeof(BPFL_IG_Math_C_Vector_To_Rotator) == 0x000078, "Wrong size on BPFL_IG_Math_C_Vector_To_Rotator");
static_assert(offsetof(BPFL_IG_Math_C_Vector_To_Rotator, In) == 0x000000, "Member 'BPFL_IG_Math_C_Vector_To_Rotator::In' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Vector_To_Rotator, __WorldContext) == 0x000018, "Member 'BPFL_IG_Math_C_Vector_To_Rotator::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Vector_To_Rotator, Out) == 0x000020, "Member 'BPFL_IG_Math_C_Vector_To_Rotator::Out' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Vector_To_Rotator, CallFunc_BreakVector_X) == 0x000038, "Member 'BPFL_IG_Math_C_Vector_To_Rotator::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Vector_To_Rotator, CallFunc_BreakVector_Y) == 0x000040, "Member 'BPFL_IG_Math_C_Vector_To_Rotator::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Vector_To_Rotator, CallFunc_BreakVector_Z) == 0x000048, "Member 'BPFL_IG_Math_C_Vector_To_Rotator::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Vector_To_Rotator, CallFunc_MakeRotator_ReturnValue) == 0x000050, "Member 'BPFL_IG_Math_C_Vector_To_Rotator::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Vector_To_Rotator, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000068, "Member 'BPFL_IG_Math_C_Vector_To_Rotator::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Vector_To_Rotator, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x00006C, "Member 'BPFL_IG_Math_C_Vector_To_Rotator::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_IG_Math_C_Vector_To_Rotator, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000070, "Member 'BPFL_IG_Math_C_Vector_To_Rotator::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

}

