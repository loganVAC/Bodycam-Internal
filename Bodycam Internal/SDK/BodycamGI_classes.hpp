#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BodycamGI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "STR_Rank_structs.hpp"
#include "E_Team_structs.hpp"
#include "STR_PCInfo_structs.hpp"
#include "STR_PCStats_structs.hpp"
#include "GameMode_structs.hpp"
#include "SteamCorePro_structs.hpp"
#include "STR_TEST_structs.hpp"
#include "STR_Score_structs.hpp"
#include "ST_DefaultSteamItem_structs.hpp"
#include "LeaderboardClass_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BodycamGI.BodycamGI_C
// 0x0518 (0x06D8 - 0x01C0)
class UBodycamGI_C final : public UGameInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        CurrentPlayTimeTimer;                              // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           PlayTimeTimerHandle;                               // 0x01D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPDA_MenuSystemConfig_C*                MenuSystemConfig;                                  // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UBP_SaveGameManager_C>   SaveGameManager;                                   // 0x01E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UBP_SettingsManager_C>   SettingsManager;                                   // 0x0210(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	E_Team                                        Team;                                              // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_PCStats                           MyStats;                                           // 0x0244(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTR_Score                             Score;                                             // 0x0254(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTR_PCInfo>                    WinningPlayer;                                     // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EGameMode                                     GameMode;                                          // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GainReissad;                                       // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameLaunch_;                                       // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USG_PlayerInfo_C*                       SG_Player_Body;                                    // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSTR_Rank>                      RankArrayMultiplayer;                              // 0x0288(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         REISSAD_Min;                                       // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GainRank;                                          // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTR_TEST                              Player_Body__Client_;                              // 0x02A0(0x02E0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FLeaderboardFindResult                 Reissad_Leaderboard;                               // 0x0580(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FLeaderboardFindResult                 Ranks_Leaderboard;                                 // 0x0590(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TArray<struct FST_DefaultSteamItem>           Player_Custom_List_Temporary;                      // 0x05A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FST_DefaultSteamItem>           Default_Skin;                                      // 0x05B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         Reissad_Stats_Score;                               // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C4[0x4];                                      // 0x05C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamItemDef>                  User_Item_Definitions;                             // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSteamItemDef>                  Game_Item_Definitions;                             // 0x05D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSteamItemDef                          RewardItemDefinition;                              // 0x05E8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_5EC[0x4];                                      // 0x05EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionToJoin__Client_;                            // 0x05F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         LobbyAccess;                                       // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         FriendsIDLobby;                                    // 0x0608(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HostAlone_;                                        // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_619[0x7];                                      // 0x0619(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PlayerRank;                                        // 0x0620(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Rank_Integer;                                      // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63C[0x4];                                      // 0x063C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamItemDef>                  Item_with_Prices_Defs;                             // 0x0640(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FST_DefaultSteamItem>           Player_Weapons_List_Temporary;                     // 0x0650(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FST_DefaultSteamItem>           Player_Skin_List_Temporary;                        // 0x0660(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FLeaderboardFindResult                 Ranks_Zombie;                                      // 0x0670(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TArray<struct FST_DefaultSteamItem>           FinalPlayerSkinTemp;                               // 0x0680(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	ELeaderboardClass                             EN_Leadboard_Class;                                // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_691[0x7];                                      // 0x0691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTR_Rank>                      RankArrayZombie;                                   // 0x0698(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLeaderboardFindResult                 Ranks_Reissad;                                     // 0x06A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         Leaderboard_Entry_Score;                           // 0x06B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Leaderboard_Entry_Global_Rank;                     // 0x06BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Leaderboard_Entry_Global_Rank_Zombie;              // 0x06C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Leaderboard_Entry_Score_Zombie;                    // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Currency;                                          // 0x06C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void BreakTimer();
	void CanCreateKickVote(bool* CanCreateKickVote_);
	void CanKickThisPlayer_(const class FString& PlayerID, bool* True_);
	void Change_Leaderboard(int32 Amount, ELeaderboardClass EN_LeadboardClass, ESteamLeaderboardUploadScoreMethod UploadScoreMethod);
	void CHANGE_LOBBY_ACCESS(int32 InInt);
	void ClearMap();
	void Completed_F233AEC544D6A9F4EDF74FB6412FDE9B(class USaveGame* SaveGame, bool bSuccess);
	void Event_Ragdoll_End();
	void EventRagdollStart();
	void ExecuteUbergraph_BodycamGI(int32 EntryPoint);
	void Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component);
	void Get_Stamina(double* Stamina);
	void GetBlured(double* Blured);
	void GetBurnedRef(class USceneComponent** BurnedMesh);
	void GetCurrentLevel(class FName* CurrentLevelName);
	void GetCurrentPlayTime(double* PlayTimeInSeconds);
	void GetCurrentRank(int32* RankScore, int32* Rank_, class FText* CurrentRank);
	void GetDivision(int32 Min, int32* RankDivision);
	void GetFlashBangEffect(double* FlashEffect);
	void GetGameMode(struct FSTR_GamemodeWinInfo* GameMode_0);
	void GetHealth(double* Health);
	void GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote);
	void GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController);
	void GetMutePlayer(TArray<class FString>* MutePlayer);
	void GetNewRank(class FText* Name_0, class UTexture2D** Image, int32* RankScore, int32* RankPosition, int32* RankDivision, double* PreviousRankProgress, double* RankProgress, bool* NewRank_, struct FSlateColor* Color, int32* Rank_Integer_0);
	void GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected);
	void GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer);
	void GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_);
	void GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System);
	void GetReady_(bool* IsReady_);
	void GetSaveGameManager(TSoftObjectPtr<class UBP_SaveGameManager_C>* SaveGameManager_0);
	void GetServerSteamID(class FString* SteamID);
	void GetSettingsManager(TSoftObjectPtr<class UBP_SettingsManager_C>* SettingsManager_0);
	void GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons);
	void GetSteamID(class FString* SteamID);
	void GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant);
	void GetTeam(E_Team* Team_0);
	void GetTeamList(E_Team Team_0, TArray<struct FSTR_PCInfo>* Info);
	void GetTopScore(TArray<struct FSTR_PCInfo>* TopScore);
	void InitScoreBoard();
	void IsBetterRank(const class FText& RankName, const class FText& CompareRank, bool* Better_);
	void IsDead(bool* Dead_);
	void IsDestroyabe_(bool* Destroyable_);
	void IsReady_(bool IsReady__0);
	void IsStress(bool* Yes_);
	void IsTalking_(bool* IsTalking__0);
	void Kick_(const struct FSTR_PCInfo& Target);
	void KickPlayer(const struct FSTR_KickVote& PlayerInfo);
	void MuteID(const class FString& SteamID);
	void NewKickVote(const struct FSTR_PCInfo& Target);
	void OnCallback_14422F8F4FAEF0FD819CBCAD8B67F553(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_37ABCC8340610DE7D42B0EBEFB5030C0(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_3D0F1A7E49FAFB12AD430490CC27377E(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_3D565AAD4E1E0A31349B73BA5911716E(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_572D510341F33EC02CB311A586001F5C();
	void OnCallback_57E02E1341206D50DB3C2A8AB2C6CE59(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful);
	void OnCallback_5E60B24B4BDDE9F449901D961EA63D8D(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_6050162946503729C3AF108539A23FB2(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful);
	void OnCallback_613F6AC641C022E5A380C3A7E2D6D60C(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful);
	void OnCallback_62628FD94C105BE4EE41BCB36E746283(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful);
	void OnCallback_6BD2B9C145A4A207BC6713BAD6D904D1(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_7EE4358249E47135EA7AE78AC01D0C77(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_908721444BA6222764FC1A87F92B947D(const struct FSteamInventoryRequestPricesResult& Data, bool bWasSuccessful);
	void OnCallback_BFA341194010E09EECFCC5A7F5740AA7(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful);
	void OnCallback_D6C1080040183509923E559C6D9A1D93(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful);
	void OnCallback_E72BC2774F0EF830005D5ABEB65A0BE9(const struct FRequestCurrentStatsData& Data, bool bWasSuccessful);
	void OnCallback_F975C1334044DDFB802DE98A9328E71C(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnIncreasePlayTimer();
	void OnLoadSettingsFromFile(const struct FFilePath& FilePath);
	void OnOpenLevel(class FName LevelName, bool bAbsolute, const class FString& Options);
	void OnPlayerDeath(class APlayerController* PC);
	void OnSaveSettingsToFile(const struct FJsonObjectWrapper& JsonObject, const struct FFilePath& FilePath);
	void OnSetCurrentPlayTime(double PlayTimeInSeconds);
	void OnSetSoundClassVolume(class USoundClass* SoundClass, double Volume);
	void OnTrySelectTeam(E_Team Team_0);
	void RankMath(int32 RankScore, int32 Rank_, ELeaderboardClass EN_Leadboard_Class_0, class FText* Rank, class UTexture2D** Image, int32* RankDivision, double* RankProgress, int32* Rank_Integer_0, struct FSlateColor* Color);
	void ReceiveInit();
	void ReceiveShutdown();
	void Refresh_Reissad_Score();
	void Refresh_Steam_Items_Definitions();
	void ReissadAddScore(int32 Value);
	void ServerTravel(double Delay);
	void Set_Achievement(const class FString& Name_0);
	void Slomo(double Slomo_0);
	void SteamInventoryDefinitionUpdate_Event();
	void Talk(bool IsTalking);
	void Update_Death(int32 Death, bool Set);
	void Update_Kill(int32 Kill_);
	void UpdateGamemode(EGameMode GameMode_0);
	void UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_);
	void UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0);
	void UpdateModeInfo();
	void UpdateScore(const struct FSTR_Score& Score_0);
	void UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamXP(bool Win_);
	void UpdateTimer(double TimeCount, const class FText& NewParam);
	void UpdateTransitionMap();
	void UpdateWarning(const class FString& String);
	void UpdateXp(int32 Xp);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BodycamGI_C">();
	}
	static class UBodycamGI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodycamGI_C>();
	}
};
static_assert(alignof(UBodycamGI_C) == 0x000008, "Wrong alignment on UBodycamGI_C");
static_assert(sizeof(UBodycamGI_C) == 0x0006D8, "Wrong size on UBodycamGI_C");
static_assert(offsetof(UBodycamGI_C, UberGraphFrame) == 0x0001C0, "Member 'UBodycamGI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, CurrentPlayTimeTimer) == 0x0001C8, "Member 'UBodycamGI_C::CurrentPlayTimeTimer' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, PlayTimeTimerHandle) == 0x0001D0, "Member 'UBodycamGI_C::PlayTimeTimerHandle' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, MenuSystemConfig) == 0x0001D8, "Member 'UBodycamGI_C::MenuSystemConfig' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, SaveGameManager) == 0x0001E0, "Member 'UBodycamGI_C::SaveGameManager' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, SettingsManager) == 0x000210, "Member 'UBodycamGI_C::SettingsManager' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Team) == 0x000240, "Member 'UBodycamGI_C::Team' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, MyStats) == 0x000244, "Member 'UBodycamGI_C::MyStats' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Score) == 0x000254, "Member 'UBodycamGI_C::Score' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, WinningPlayer) == 0x000260, "Member 'UBodycamGI_C::WinningPlayer' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, GameMode) == 0x000270, "Member 'UBodycamGI_C::GameMode' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, GainReissad) == 0x000274, "Member 'UBodycamGI_C::GainReissad' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, GameLaunch_) == 0x000278, "Member 'UBodycamGI_C::GameLaunch_' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, SG_Player_Body) == 0x000280, "Member 'UBodycamGI_C::SG_Player_Body' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, RankArrayMultiplayer) == 0x000288, "Member 'UBodycamGI_C::RankArrayMultiplayer' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, REISSAD_Min) == 0x000298, "Member 'UBodycamGI_C::REISSAD_Min' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, GainRank) == 0x00029C, "Member 'UBodycamGI_C::GainRank' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Player_Body__Client_) == 0x0002A0, "Member 'UBodycamGI_C::Player_Body__Client_' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Reissad_Leaderboard) == 0x000580, "Member 'UBodycamGI_C::Reissad_Leaderboard' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Ranks_Leaderboard) == 0x000590, "Member 'UBodycamGI_C::Ranks_Leaderboard' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Player_Custom_List_Temporary) == 0x0005A0, "Member 'UBodycamGI_C::Player_Custom_List_Temporary' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Default_Skin) == 0x0005B0, "Member 'UBodycamGI_C::Default_Skin' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Reissad_Stats_Score) == 0x0005C0, "Member 'UBodycamGI_C::Reissad_Stats_Score' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, User_Item_Definitions) == 0x0005C8, "Member 'UBodycamGI_C::User_Item_Definitions' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Game_Item_Definitions) == 0x0005D8, "Member 'UBodycamGI_C::Game_Item_Definitions' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, RewardItemDefinition) == 0x0005E8, "Member 'UBodycamGI_C::RewardItemDefinition' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, SessionToJoin__Client_) == 0x0005F0, "Member 'UBodycamGI_C::SessionToJoin__Client_' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, LobbyAccess) == 0x000600, "Member 'UBodycamGI_C::LobbyAccess' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, FriendsIDLobby) == 0x000608, "Member 'UBodycamGI_C::FriendsIDLobby' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, HostAlone_) == 0x000618, "Member 'UBodycamGI_C::HostAlone_' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, PlayerRank) == 0x000620, "Member 'UBodycamGI_C::PlayerRank' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Rank_Integer) == 0x000638, "Member 'UBodycamGI_C::Rank_Integer' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Item_with_Prices_Defs) == 0x000640, "Member 'UBodycamGI_C::Item_with_Prices_Defs' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Player_Weapons_List_Temporary) == 0x000650, "Member 'UBodycamGI_C::Player_Weapons_List_Temporary' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Player_Skin_List_Temporary) == 0x000660, "Member 'UBodycamGI_C::Player_Skin_List_Temporary' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Ranks_Zombie) == 0x000670, "Member 'UBodycamGI_C::Ranks_Zombie' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, FinalPlayerSkinTemp) == 0x000680, "Member 'UBodycamGI_C::FinalPlayerSkinTemp' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, EN_Leadboard_Class) == 0x000690, "Member 'UBodycamGI_C::EN_Leadboard_Class' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, RankArrayZombie) == 0x000698, "Member 'UBodycamGI_C::RankArrayZombie' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Ranks_Reissad) == 0x0006A8, "Member 'UBodycamGI_C::Ranks_Reissad' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Leaderboard_Entry_Score) == 0x0006B8, "Member 'UBodycamGI_C::Leaderboard_Entry_Score' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Leaderboard_Entry_Global_Rank) == 0x0006BC, "Member 'UBodycamGI_C::Leaderboard_Entry_Global_Rank' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Leaderboard_Entry_Global_Rank_Zombie) == 0x0006C0, "Member 'UBodycamGI_C::Leaderboard_Entry_Global_Rank_Zombie' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Leaderboard_Entry_Score_Zombie) == 0x0006C4, "Member 'UBodycamGI_C::Leaderboard_Entry_Score_Zombie' has a wrong offset!");
static_assert(offsetof(UBodycamGI_C, Currency) == 0x0006C8, "Member 'UBodycamGI_C::Currency' has a wrong offset!");

}

