#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Xp

#include "Basic.hpp"

#include "BPI_Xp_classes.hpp"
#include "BPI_Xp_parameters.hpp"


namespace SDK
{

// Function BPI_Xp.BPI_Xp_C.GetCurrentRank
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RankScore                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Rank_                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             CurrentRank                                            (Parm, OutParm)

void IBPI_Xp_C::GetCurrentRank(int32* RankScore, int32* Rank_, class FText* CurrentRank)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Xp_C", "GetCurrentRank");

	Params::BPI_Xp_C_GetCurrentRank Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RankScore != nullptr)
		*RankScore = Parms.RankScore;

	if (Rank_ != nullptr)
		*Rank_ = Parms.Rank_;

	if (CurrentRank != nullptr)
		*CurrentRank = std::move(Parms.CurrentRank);
}


// Function BPI_Xp.BPI_Xp_C.GetNewRank
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Name_0                                                 (Parm, OutParm)
// class UTexture2D*                       Image                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   RankScore                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RankPosition                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RankDivision                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PreviousRankProgress                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RankProgress                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewRank_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      Color                                                  (Parm, OutParm)
// int32                                   Rank_Integer                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Xp_C::GetNewRank(class FText* Name_0, class UTexture2D** Image, int32* RankScore, int32* RankPosition, int32* RankDivision, double* PreviousRankProgress, double* RankProgress, bool* NewRank_, struct FSlateColor* Color, int32* Rank_Integer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Xp_C", "GetNewRank");

	Params::BPI_Xp_C_GetNewRank Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);

	if (Image != nullptr)
		*Image = Parms.Image;

	if (RankScore != nullptr)
		*RankScore = Parms.RankScore;

	if (RankPosition != nullptr)
		*RankPosition = Parms.RankPosition;

	if (RankDivision != nullptr)
		*RankDivision = Parms.RankDivision;

	if (PreviousRankProgress != nullptr)
		*PreviousRankProgress = Parms.PreviousRankProgress;

	if (RankProgress != nullptr)
		*RankProgress = Parms.RankProgress;

	if (NewRank_ != nullptr)
		*NewRank_ = Parms.NewRank_;

	if (Color != nullptr)
		*Color = std::move(Parms.Color);

	if (Rank_Integer != nullptr)
		*Rank_Integer = Parms.Rank_Integer;
}


// Function BPI_Xp.BPI_Xp_C.Update Death
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Death                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Set                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Xp_C::Update_Death(int32 Death, bool Set)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Xp_C", "Update Death");

	Params::BPI_Xp_C_Update_Death Parms{};

	Parms.Death = Death;
	Parms.Set = Set;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Xp.BPI_Xp_C.Update Kill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Kill_                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Xp_C::Update_Kill(int32 Kill_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Xp_C", "Update Kill");

	Params::BPI_Xp_C_Update_Kill Parms{};

	Parms.Kill_ = Kill_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Xp.BPI_Xp_C.UpdateXp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Xp                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Xp_C::UpdateXp(int32 Xp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Xp_C", "UpdateXp");

	Params::BPI_Xp_C_UpdateXp Parms{};

	Parms.Xp = Xp;

	UObject::ProcessEvent(Func, &Parms);
}

}

