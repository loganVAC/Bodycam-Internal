#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GM_Zombie

#include "Basic.hpp"

#include "GM_Zombie_classes.hpp"
#include "GM_Zombie_parameters.hpp"


namespace SDK
{

// Function GM_Zombie.GM_Zombie_C.BreakTimer
// (Public, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::BreakTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "BreakTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.CanCreateKickVote
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanCreateKickVote_                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::CanCreateKickVote(bool* CanCreateKickVote_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "CanCreateKickVote");

	Params::GM_Zombie_C_CanCreateKickVote Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanCreateKickVote_ != nullptr)
		*CanCreateKickVote_ = Parms.CanCreateKickVote_;
}


// Function GM_Zombie.GM_Zombie_C.CanKickThisPlayer?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    True_                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::CanKickThisPlayer_(const class FString& PlayerID, bool* True_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "CanKickThisPlayer?");

	Params::GM_Zombie_C_CanKickThisPlayer_ Parms{};

	Parms.PlayerID = std::move(PlayerID);

	UObject::ProcessEvent(Func, &Parms);

	if (True_ != nullptr)
		*True_ = Parms.True_;
}


// Function GM_Zombie.GM_Zombie_C.CanReachDestination
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          PathStart                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PathEnd                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AGM_Zombie_C::CanReachDestination(const struct FVector& PathStart, const struct FVector& PathEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "CanReachDestination");

	Params::GM_Zombie_C_CanReachDestination Parms{};

	Parms.PathStart = std::move(PathStart);
	Parms.PathEnd = std::move(PathEnd);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GM_Zombie.GM_Zombie_C.ClearMap
// (Public, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::ClearMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "ClearMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.ConnectionInfos
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::ConnectionInfos(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "ConnectionInfos");

	Params::GM_Zombie_C_ConnectionInfos Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.DeleteZombies
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::DeleteZombies(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "DeleteZombies");

	Params::GM_Zombie_C_DeleteZombies Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.DestroyAllDeadbodies
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::DestroyAllDeadbodies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "DestroyAllDeadbodies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.ElectricalAction
// (Public, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::ElectricalAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "ElectricalAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.EndWave
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Wave_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_WaveClass                            EN_WaveClass_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::EndWave(int32 Wave_0, EN_WaveClass EN_WaveClass_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "EndWave");

	Params::GM_Zombie_C_EndWave Parms{};

	Parms.Wave_0 = Wave_0;
	Parms.EN_WaveClass_0 = EN_WaveClass_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.Event Ragdoll End
// (Public, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::Event_Ragdoll_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "Event Ragdoll End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.EventRagdollStart
// (Public, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::EventRagdollStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "EventRagdollStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.ExecuteUbergraph_GM_Zombie
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::ExecuteUbergraph_GM_Zombie(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "ExecuteUbergraph_GM_Zombie");

	Params::GM_Zombie_C_ExecuteUbergraph_GM_Zombie Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.Get BP Menu Controller Component
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MenuControllerComponent_C*    BP_Menu_Controller_Component                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "Get BP Menu Controller Component");

	Params::GM_Zombie_C_Get_BP_Menu_Controller_Component Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BP_Menu_Controller_Component != nullptr)
		*BP_Menu_Controller_Component = Parms.BP_Menu_Controller_Component;
}


// Function GM_Zombie.GM_Zombie_C.Get Stamina
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Stamina                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::Get_Stamina(double* Stamina)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "Get Stamina");

	Params::GM_Zombie_C_Get_Stamina Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Stamina != nullptr)
		*Stamina = Parms.Stamina;
}


// Function GM_Zombie.GM_Zombie_C.GetAvailableSpawn
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AZombieSpawnVolume_C*>     AvailableSpawn_Return                                  (Parm, OutParm)

void AGM_Zombie_C::GetAvailableSpawn(TArray<class AZombieSpawnVolume_C*>* AvailableSpawn_Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetAvailableSpawn");

	Params::GM_Zombie_C_GetAvailableSpawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AvailableSpawn_Return != nullptr)
		*AvailableSpawn_Return = std::move(Parms.AvailableSpawn_Return);
}


// Function GM_Zombie.GM_Zombie_C.GetBlured
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Blured                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::GetBlured(double* Blured)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetBlured");

	Params::GM_Zombie_C_GetBlured Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Blured != nullptr)
		*Blured = Parms.Blured;
}


// Function GM_Zombie.GM_Zombie_C.GetBurnedRef
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  BurnedMesh                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::GetBurnedRef(class USceneComponent** BurnedMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetBurnedRef");

	Params::GM_Zombie_C_GetBurnedRef Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BurnedMesh != nullptr)
		*BurnedMesh = Parms.BurnedMesh;
}


// Function GM_Zombie.GM_Zombie_C.GetFlashBangEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  FlashEffect                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::GetFlashBangEffect(double* FlashEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetFlashBangEffect");

	Params::GM_Zombie_C_GetFlashBangEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FlashEffect != nullptr)
		*FlashEffect = Parms.FlashEffect;
}


// Function GM_Zombie.GM_Zombie_C.GetGameMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_GamemodeWinInfo             GameMode                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::GetGameMode(struct FSTR_GamemodeWinInfo* GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetGameMode");

	Params::GM_Zombie_C_GetGameMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GameMode != nullptr)
		*GameMode = std::move(Parms.GameMode);
}


// Function GM_Zombie.GM_Zombie_C.GetHealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Health                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::GetHealth(double* Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetHealth");

	Params::GM_Zombie_C_GetHealth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Health != nullptr)
		*Health = Parms.Health;
}


// Function GM_Zombie.GM_Zombie_C.GetKickedPlayerVoted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   KickplayerAlreadyVote                                  (Parm, OutParm)

void AGM_Zombie_C::GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetKickedPlayerVoted");

	Params::GM_Zombie_C_GetKickedPlayerVoted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KickplayerAlreadyVote != nullptr)
		*KickplayerAlreadyVote = std::move(Parms.KickplayerAlreadyVote);
}


// Function GM_Zombie.GM_Zombie_C.GetMenuSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MenuControllerComponent_C*    Bp_MenuController                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetMenuSettings");

	Params::GM_Zombie_C_GetMenuSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bp_MenuController != nullptr)
		*Bp_MenuController = Parms.Bp_MenuController;
}


// Function GM_Zombie.GM_Zombie_C.GetMutePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   MutePlayer                                             (Parm, OutParm)

void AGM_Zombie_C::GetMutePlayer(TArray<class FString>* MutePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetMutePlayer");

	Params::GM_Zombie_C_GetMutePlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MutePlayer != nullptr)
		*MutePlayer = std::move(Parms.MutePlayer);
}


// Function GM_Zombie.GM_Zombie_C.GetPlayerAlives
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AALS_AnimMan_CharacterBP_C*>Players_Alives_Return                                  (Parm, OutParm)

void AGM_Zombie_C::GetPlayerAlives(TArray<class AALS_AnimMan_CharacterBP_C*>* Players_Alives_Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetPlayerAlives");

	Params::GM_Zombie_C_GetPlayerAlives Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Players_Alives_Return != nullptr)
		*Players_Alives_Return = std::move(Parms.Players_Alives_Return);
}


// Function GM_Zombie.GM_Zombie_C.GetPlayerConnected
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_PCInfo>              PlayerConnected                                        (Parm, OutParm)

void AGM_Zombie_C::GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetPlayerConnected");

	Params::GM_Zombie_C_GetPlayerConnected Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerConnected != nullptr)
		*PlayerConnected = std::move(Parms.PlayerConnected);
}


// Function GM_Zombie.GM_Zombie_C.GetPlayerKickVote
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_KickVote>            KickVotePlayer                                         (Parm, OutParm)

void AGM_Zombie_C::GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetPlayerKickVote");

	Params::GM_Zombie_C_GetPlayerKickVote Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KickVotePlayer != nullptr)
		*KickVotePlayer = std::move(Parms.KickVotePlayer);
}


// Function GM_Zombie.GM_Zombie_C.GetPlayersDeaths
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class APC_Zombie_C*>             Players_Alives_Return                                  (Parm, OutParm)

void AGM_Zombie_C::GetPlayersDeaths(TArray<class APC_Zombie_C*>* Players_Alives_Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetPlayersDeaths");

	Params::GM_Zombie_C_GetPlayersDeaths Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Players_Alives_Return != nullptr)
		*Players_Alives_Return = std::move(Parms.Players_Alives_Return);
}


// Function GM_Zombie.GM_Zombie_C.GetPlayerSkin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_TEST                        Player_Skin                                            (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Valid_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetPlayerSkin");

	Params::GM_Zombie_C_GetPlayerSkin Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player_Skin != nullptr)
		*Player_Skin = std::move(Parms.Player_Skin);

	if (Valid_ != nullptr)
		*Valid_ = Parms.Valid_;
}


// Function GM_Zombie.GM_Zombie_C.GetRagdollSystem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWW_RagdollSystem_C*              Ragdoll_System                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetRagdollSystem");

	Params::GM_Zombie_C_GetRagdollSystem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ragdoll_System != nullptr)
		*Ragdoll_System = Parms.Ragdoll_System;
}


// Function GM_Zombie.GM_Zombie_C.GetRandomSpeedForZombies
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::GetRandomSpeedForZombies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetRandomSpeedForZombies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.GetReady?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReady_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::GetReady_(bool* IsReady_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetReady?");

	Params::GM_Zombie_C_GetReady_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsReady_ != nullptr)
		*IsReady_ = Parms.IsReady_;
}


// Function GM_Zombie.GM_Zombie_C.GetServerSteamID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AGM_Zombie_C::GetServerSteamID(class FString* SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetServerSteamID");

	Params::GM_Zombie_C_GetServerSteamID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SteamID != nullptr)
		*SteamID = std::move(Parms.SteamID);
}


// Function GM_Zombie.GM_Zombie_C.GetStarterWeapons
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_Actor>               Weapons                                                (Parm, OutParm)

void AGM_Zombie_C::GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetStarterWeapons");

	Params::GM_Zombie_C_GetStarterWeapons Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Weapons != nullptr)
		*Weapons = std::move(Parms.Weapons);
}


// Function GM_Zombie.GM_Zombie_C.GetSteamID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AGM_Zombie_C::GetSteamID(class FString* SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetSteamID");

	Params::GM_Zombie_C_GetSteamID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SteamID != nullptr)
		*SteamID = std::move(Parms.SteamID);
}


// Function GM_Zombie.GM_Zombie_C.GetSurvivorStatuts
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWW_SurvivorStatus_C*             SurvivorComponant                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetSurvivorStatuts");

	Params::GM_Zombie_C_GetSurvivorStatuts Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SurvivorComponant != nullptr)
		*SurvivorComponant = Parms.SurvivorComponant;
}


// Function GM_Zombie.GM_Zombie_C.GetTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::GetTeam(E_Team* Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetTeam");

	Params::GM_Zombie_C_GetTeam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Team != nullptr)
		*Team = Parms.Team;
}


// Function GM_Zombie.GM_Zombie_C.GetTeamList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSTR_PCInfo>              Info                                                   (Parm, OutParm)

void AGM_Zombie_C::GetTeamList(E_Team Team, TArray<struct FSTR_PCInfo>* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetTeamList");

	Params::GM_Zombie_C_GetTeamList Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (Info != nullptr)
		*Info = std::move(Parms.Info);
}


// Function GM_Zombie.GM_Zombie_C.GetTopScore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_PCInfo>              TopScore                                               (Parm, OutParm)

void AGM_Zombie_C::GetTopScore(TArray<struct FSTR_PCInfo>* TopScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetTopScore");

	Params::GM_Zombie_C_GetTopScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TopScore != nullptr)
		*TopScore = std::move(Parms.TopScore);
}


// Function GM_Zombie.GM_Zombie_C.GetZombiesAlives
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AZombie_C*>                ZombiesAlives_Return                                   (Parm, OutParm)

void AGM_Zombie_C::GetZombiesAlives(TArray<class AZombie_C*>* ZombiesAlives_Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetZombiesAlives");

	Params::GM_Zombie_C_GetZombiesAlives Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ZombiesAlives_Return != nullptr)
		*ZombiesAlives_Return = std::move(Parms.ZombiesAlives_Return);
}


// Function GM_Zombie.GM_Zombie_C.GetZombiesDeaths
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AZombie_C*>                ZombiesDeaths_Return                                   (Parm, OutParm)

void AGM_Zombie_C::GetZombiesDeaths(TArray<class AZombie_C*>* ZombiesDeaths_Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "GetZombiesDeaths");

	Params::GM_Zombie_C_GetZombiesDeaths Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ZombiesDeaths_Return != nullptr)
		*ZombiesDeaths_Return = std::move(Parms.ZombiesDeaths_Return);
}


// Function GM_Zombie.GM_Zombie_C.InitScoreBoard
// (Public, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::InitScoreBoard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "InitScoreBoard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.Is All Players Dead
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    AllPlayersDead_Return                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::Is_All_Players_Dead(bool* AllPlayersDead_Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "Is All Players Dead");

	Params::GM_Zombie_C_Is_All_Players_Dead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllPlayersDead_Return != nullptr)
		*AllPlayersDead_Return = Parms.AllPlayersDead_Return;
}


// Function GM_Zombie.GM_Zombie_C.IsDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dead_                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::IsDead(bool* Dead_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "IsDead");

	Params::GM_Zombie_C_IsDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dead_ != nullptr)
		*Dead_ = Parms.Dead_;
}


// Function GM_Zombie.GM_Zombie_C.IsDestroyabe?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Destroyable_                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::IsDestroyabe_(bool* Destroyable_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "IsDestroyabe?");

	Params::GM_Zombie_C_IsDestroyabe_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Destroyable_ != nullptr)
		*Destroyable_ = Parms.Destroyable_;
}


// Function GM_Zombie.GM_Zombie_C.IsReady?
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReady__0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::IsReady_(bool IsReady__0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "IsReady?");

	Params::GM_Zombie_C_IsReady_ Parms{};

	Parms.IsReady__0 = IsReady__0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.IsStress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Yes_                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::IsStress(bool* Yes_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "IsStress");

	Params::GM_Zombie_C_IsStress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Yes_ != nullptr)
		*Yes_ = Parms.Yes_;
}


// Function GM_Zombie.GM_Zombie_C.IsTalking?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTalking__0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::IsTalking_(bool* IsTalking__0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "IsTalking?");

	Params::GM_Zombie_C_IsTalking_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTalking__0 != nullptr)
		*IsTalking__0 = Parms.IsTalking__0;
}


// Function GM_Zombie.GM_Zombie_C.K2_OnLogout
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      ExitingController                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::K2_OnLogout(class AController* ExitingController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "K2_OnLogout");

	Params::GM_Zombie_C_K2_OnLogout Parms{};

	Parms.ExitingController = ExitingController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.Kick?
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGM_Zombie_C::Kick_(const struct FSTR_PCInfo& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "Kick?");

	Params::GM_Zombie_C_Kick_ Parms{};

	Parms.Target = std::move(Target);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.KickPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_KickVote                    PlayerInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGM_Zombie_C::KickPlayer(const struct FSTR_KickVote& PlayerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "KickPlayer");

	Params::GM_Zombie_C_KickPlayer Parms{};

	Parms.PlayerInfo = std::move(PlayerInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.KillAllZombies
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::KillAllZombies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "KillAllZombies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.MuteID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGM_Zombie_C::MuteID(const class FString& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "MuteID");

	Params::GM_Zombie_C_MuteID Parms{};

	Parms.SteamID = std::move(SteamID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.NewKickVote
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGM_Zombie_C::NewKickVote(const struct FSTR_PCInfo& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "NewKickVote");

	Params::GM_Zombie_C_NewKickVote Parms{};

	Parms.Target = std::move(Target);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.NewWaves
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Wave_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_WaveClass                            EN_WaveClass_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::NewWaves(int32 Wave_0, EN_WaveClass EN_WaveClass_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "NewWaves");

	Params::GM_Zombie_C_NewWaves Parms{};

	Parms.Wave_0 = Wave_0;
	Parms.EN_WaveClass_0 = EN_WaveClass_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.OnPlayerDeath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PC                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::OnPlayerDeath(class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "OnPlayerDeath");

	Params::GM_Zombie_C_OnPlayerDeath Parms{};

	Parms.PC = PC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.OnTrySelectTeam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::OnTrySelectTeam(E_Team Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "OnTrySelectTeam");

	Params::GM_Zombie_C_OnTrySelectTeam Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AGM_Zombie_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "ReceiveTick");

	Params::GM_Zombie_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.RegisterZombiesUpdates
// (BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::RegisterZombiesUpdates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "RegisterZombiesUpdates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.RespawnDeadPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::RespawnDeadPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "RespawnDeadPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.ServerTravel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::ServerTravel(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "ServerTravel");

	Params::GM_Zombie_C_ServerTravel Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.Slomo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Slomo_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::Slomo(double Slomo_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "Slomo");

	Params::GM_Zombie_C_Slomo Parms{};

	Parms.Slomo_0 = Slomo_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.SpawnScreamer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Destroy_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::SpawnScreamer(bool Destroy_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "SpawnScreamer");

	Params::GM_Zombie_C_SpawnScreamer Parms{};

	Parms.Destroy_ = Destroy_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.SpawnZombieEvent
// (Public, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::SpawnZombieEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "SpawnZombieEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.Start Wave
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FirstWave_                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::Start_Wave(bool FirstWave_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "Start Wave");

	Params::GM_Zombie_C_Start_Wave Parms{};

	Parms.FirstWave_ = FirstWave_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.Talk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTalking                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::Talk(bool IsTalking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "Talk");

	Params::GM_Zombie_C_Talk Parms{};

	Parms.IsTalking = IsTalking;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.Try Start Wave
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::Try_Start_Wave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "Try Start Wave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.TryToSpawn
// (BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::TryToSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "TryToSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.UpdateChrono
// (BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::UpdateChrono()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "UpdateChrono");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.UpdateGamemode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameMode                               GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::UpdateGamemode(EGameMode GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "UpdateGamemode");

	Params::GM_Zombie_C_UpdateGamemode Parms{};

	Parms.GameMode = GameMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.UpdateKickVote
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Yes_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "UpdateKickVote");

	Params::GM_Zombie_C_UpdateKickVote Parms{};

	Parms.Target = std::move(Target);
	Parms.Yes_ = Yes_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.UpdateMapSelection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Selected_Level_Name                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "UpdateMapSelection");

	Params::GM_Zombie_C_UpdateMapSelection Parms{};

	Parms.Selected_Level_Name = Selected_Level_Name;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.UpdateModeInfo
// (Public, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::UpdateModeInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "UpdateModeInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.UpdatePower
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On_                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::UpdatePower(bool On_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "UpdatePower");

	Params::GM_Zombie_C_UpdatePower Parms{};

	Parms.On_ = On_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.UpdateScore
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_Score                       Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::UpdateScore(const struct FSTR_Score& Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "UpdateScore");

	Params::GM_Zombie_C_UpdateScore Parms{};

	Parms.Score = std::move(Score);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.UpdateTeamIndex (PlayerKilled)
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team_PlayerKilled_                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MilitaryIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TerroristIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Team                                  WiiningTeam                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "UpdateTeamIndex (PlayerKilled)");

	Params::GM_Zombie_C_UpdateTeamIndex__PlayerKilled_ Parms{};

	Parms.Team_PlayerKilled_ = Team_PlayerKilled_;
	Parms.MilitaryIndex = MilitaryIndex;
	Parms.TerroristIndex = TerroristIndex;
	Parms.WiiningTeam = WiiningTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.UpdateTeamXP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Win_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_Zombie_C::UpdateTeamXP(bool Win_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "UpdateTeamXP");

	Params::GM_Zombie_C_UpdateTeamXP Parms{};

	Parms.Win_ = Win_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.UpdateTimer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TimeCount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void AGM_Zombie_C::UpdateTimer(double TimeCount, const class FText& NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "UpdateTimer");

	Params::GM_Zombie_C_UpdateTimer Parms{};

	Parms.TimeCount = TimeCount;
	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_Zombie.GM_Zombie_C.UpdateTransitionMap
// (Public, BlueprintCallable, BlueprintEvent)

void AGM_Zombie_C::UpdateTransitionMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "UpdateTransitionMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_Zombie.GM_Zombie_C.UpdateWarning
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           String                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGM_Zombie_C::UpdateWarning(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_Zombie_C", "UpdateWarning");

	Params::GM_Zombie_C_UpdateWarning Parms{};

	Parms.String = std::move(String);

	UObject::ProcessEvent(Func, &Parms);
}

}

