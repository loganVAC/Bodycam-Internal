#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Drone

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Team_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Drone.BP_Drone_C
// 0x0150 (0x0780 - 0x0630)
class ABP_Drone_C final : public ACharacter
{
public:
	uint8                                         Pad_628[0x8];                                      // 0x0628(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0630(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Drone_Cue;                                         // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ArrowVelocity;                                     // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       HitSpehre;                                         // 0x0648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere;                                            // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Drone;                                             // 0x0668(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DJI_FVP_ELICE5;                                    // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DJI_FVP_ELICE4;                                    // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DJI_FVP_ELICE3;                                    // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DJI_FVP_ELICE2;                                    // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DJI_FVP_ELICE1;                                    // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  VisionPP;                                          // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        TurnCurrent;                                       // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LookCurrent;                                       // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RightTarget;                                       // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RightCurrent;                                      // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetDistance;                                    // 0x06C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C4[0x4];                                      // 0x06C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetFOV;                                         // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NightVision_;                                      // 0x06D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D1[0x7];                                      // 0x06D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxBatteryTime;                                    // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CheckSignalAndBattery;                             // 0x06E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        MaxSignalDistance;                                 // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInputMappingContext*                   Mapping_Context;                                   // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Look;                                              // 0x0700(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Movement;                                          // 0x0710(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Destroy_;                                          // 0x0720(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_721[0x3];                                      // 0x0721(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VisionIndex;                                       // 0x0724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FWeightedBlendable>             Post_Process_Materials_Array;                      // 0x0728(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         RespawnDuration;                                   // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Team                                        Team;                                              // 0x073C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73D[0x3];                                      // 0x073D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Blured;                                            // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVOIPTalker*                            Voip;                                              // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTalking;                                         // 0x0750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_751[0x7];                                      // 0x0751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0758(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_DroneInterface_C*                  WBP_Drone_Ref;                                     // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Sound;                                             // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Blur(double Distance);
	void BndEvt__BP_Drone_Drone_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BreakTimer();
	void BulletFly(double Distance, const struct FVector& Location);
	void CanCreateKickVote(bool* CanCreateKickVote_);
	void CanKickThisPlayer_(const class FString& PlayerID, bool* True_);
	void CheckSignalAndBattery__DelegateSignature();
	void ClearMap();
	void DestoyDrone();
	void DestroyVOIP();
	void Event_Ragdoll_End();
	void EventRagdollStart();
	void ExecuteUbergraph_BP_Drone(int32 EntryPoint);
	void Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component);
	void Get_Stamina(double* Stamina);
	void GetBlured(double* Blured_0);
	void GetBurnedRef(class USceneComponent** BurnedMesh);
	void GetFlashBangEffect(double* FlashEffect);
	void GetGameMode(struct FSTR_GamemodeWinInfo* GameMode);
	void GetHealth(double* Health);
	void GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote);
	void GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController);
	void GetMutePlayer(TArray<class FString>* MutePlayer);
	void GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected);
	void GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer);
	void GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_);
	void GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System);
	void GetReady_(bool* IsReady_);
	void GetServerSteamID(class FString* SteamID);
	void GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons);
	void GetSteamID(class FString* SteamID);
	void GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant);
	void GetTeam(E_Team* Team_0);
	void GetTeamList(E_Team Team_0, TArray<struct FSTR_PCInfo>* Info);
	void GetTopScore(TArray<struct FSTR_PCInfo>* TopScore);
	void Init_Hud();
	void Init_Team();
	void InitScoreBoard();
	void InitVOIP();
	void InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Fire_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Look_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Look_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_10(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_9(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_ToggleFlashLight_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void IsDead(bool* Dead_);
	void IsDestroyabe_(bool* Destroyable_);
	void IsReady_(bool IsReady__0);
	void IsStress(bool* Yes_);
	void IsTalking_(bool* IsTalking__0);
	void IsTalking___Server_(bool IsTalking__0);
	void Kick_(const struct FSTR_PCInfo& Target);
	void KickPlayer(const struct FSTR_KickVote& PlayerInfo);
	void Kill_HUD();
	void LineTraceLenght(double Lenght, struct FVector* Start, struct FVector* End);
	void M_ImpulsePhysics(const struct FVector& Impulse, const struct FVector& Location);
	void MuteID(const class FString& SteamID);
	void NewKickVote(const struct FSTR_PCInfo& Target);
	void OnPlayerDeath(class APlayerController* PC);
	void OnTrySelectTeam(E_Team Team_0);
	void Play_Sounds__Client_(class USoundBase* Sound_0);
	void R_Movement(const struct FVector2D& Movement_0);
	void ReceiveBeginPlay();
	void ReceivePointDamage(float Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceivePossessed(class AController* NewController);
	void ReceiveRadialDamage(float DamageReceived, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveTick(float DeltaSeconds);
	void Respawn();
	void ServerTravel(double Delay);
	void SetTeam__Server_(E_Team Team_0);
	void Slomo(double Slomo_0);
	void SmoothFOVChanger();
	void Talk(bool IsTalking_0);
	void ToggleFlashLight__Multicast_();
	void ToggleFlashLight__Server_();
	void Update_Light_Sphere_Scale();
	void UpdateDroneLed(E_Team Team_0);
	void UpdateGamemode(EGameMode GameMode);
	void UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_);
	void UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0);
	void UpdateModeInfo();
	void UpdateScore(const struct FSTR_Score& Score);
	void UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamXP(bool Win_);
	void UpdateTimer(double TimeCount, const class FText& NewParam);
	void UpdateTransitionMap();
	void UpdateWarning(const class FString& String);
	void WindCamera();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Drone_C">();
	}
	static class ABP_Drone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Drone_C>();
	}
};
static_assert(alignof(ABP_Drone_C) == 0x000010, "Wrong alignment on ABP_Drone_C");
static_assert(sizeof(ABP_Drone_C) == 0x000780, "Wrong size on ABP_Drone_C");
static_assert(offsetof(ABP_Drone_C, UberGraphFrame) == 0x000630, "Member 'ABP_Drone_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Drone_Cue) == 0x000638, "Member 'ABP_Drone_C::Drone_Cue' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, ArrowVelocity) == 0x000640, "Member 'ABP_Drone_C::ArrowVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, HitSpehre) == 0x000648, "Member 'ABP_Drone_C::HitSpehre' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Sphere) == 0x000650, "Member 'ABP_Drone_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, SpotLight) == 0x000658, "Member 'ABP_Drone_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Camera) == 0x000660, "Member 'ABP_Drone_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Drone) == 0x000668, "Member 'ABP_Drone_C::Drone' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, DJI_FVP_ELICE5) == 0x000670, "Member 'ABP_Drone_C::DJI_FVP_ELICE5' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, DJI_FVP_ELICE4) == 0x000678, "Member 'ABP_Drone_C::DJI_FVP_ELICE4' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, DJI_FVP_ELICE3) == 0x000680, "Member 'ABP_Drone_C::DJI_FVP_ELICE3' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, DJI_FVP_ELICE2) == 0x000688, "Member 'ABP_Drone_C::DJI_FVP_ELICE2' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, DJI_FVP_ELICE1) == 0x000690, "Member 'ABP_Drone_C::DJI_FVP_ELICE1' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, VisionPP) == 0x000698, "Member 'ABP_Drone_C::VisionPP' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, TurnCurrent) == 0x0006A0, "Member 'ABP_Drone_C::TurnCurrent' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, LookCurrent) == 0x0006A8, "Member 'ABP_Drone_C::LookCurrent' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, RightTarget) == 0x0006B0, "Member 'ABP_Drone_C::RightTarget' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, RightCurrent) == 0x0006B8, "Member 'ABP_Drone_C::RightCurrent' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, TargetDistance) == 0x0006C0, "Member 'ABP_Drone_C::TargetDistance' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, TargetFOV) == 0x0006C8, "Member 'ABP_Drone_C::TargetFOV' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, NightVision_) == 0x0006D0, "Member 'ABP_Drone_C::NightVision_' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, MaxBatteryTime) == 0x0006D8, "Member 'ABP_Drone_C::MaxBatteryTime' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, CheckSignalAndBattery) == 0x0006E0, "Member 'ABP_Drone_C::CheckSignalAndBattery' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, MaxSignalDistance) == 0x0006F0, "Member 'ABP_Drone_C::MaxSignalDistance' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Mapping_Context) == 0x0006F8, "Member 'ABP_Drone_C::Mapping_Context' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Look) == 0x000700, "Member 'ABP_Drone_C::Look' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Movement) == 0x000710, "Member 'ABP_Drone_C::Movement' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Destroy_) == 0x000720, "Member 'ABP_Drone_C::Destroy_' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, VisionIndex) == 0x000724, "Member 'ABP_Drone_C::VisionIndex' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Post_Process_Materials_Array) == 0x000728, "Member 'ABP_Drone_C::Post_Process_Materials_Array' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, RespawnDuration) == 0x000738, "Member 'ABP_Drone_C::RespawnDuration' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Team) == 0x00073C, "Member 'ABP_Drone_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Blured) == 0x000740, "Member 'ABP_Drone_C::Blured' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Voip) == 0x000748, "Member 'ABP_Drone_C::Voip' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, IsTalking) == 0x000750, "Member 'ABP_Drone_C::IsTalking' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Velocity) == 0x000758, "Member 'ABP_Drone_C::Velocity' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, WBP_Drone_Ref) == 0x000770, "Member 'ABP_Drone_C::WBP_Drone_Ref' has a wrong offset!");
static_assert(offsetof(ABP_Drone_C, Sound) == 0x000778, "Member 'ABP_Drone_C::Sound' has a wrong offset!");

}

