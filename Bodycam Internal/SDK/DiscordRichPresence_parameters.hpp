#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DiscordRichPresence

#include "Basic.hpp"

#include "DiscordRichPresence_structs.hpp"


namespace SDK::Params
{

// Function DiscordRichPresence.DiscordInterface.BindEvents
// 0x0040 (0x0040 - 0x0000)
struct DiscordInterface_BindEvents final
{
public:
	TDelegate<void(const class FString& JoinSecret)> OnDiscordUserJoin;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& SpectateSecret)> OnDiscordUserSpectate;                             // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FDiscordUser& User)> OnDiscordUserJoinRequest;                          // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EDiscordPresenceActivityActionType Type, const struct FDiscordUser& User, const struct FDiscordActivityInfo& Activity)> OnDiscordInvite;                                   // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscordInterface_BindEvents) == 0x000004, "Wrong alignment on DiscordInterface_BindEvents");
static_assert(sizeof(DiscordInterface_BindEvents) == 0x000040, "Wrong size on DiscordInterface_BindEvents");
static_assert(offsetof(DiscordInterface_BindEvents, OnDiscordUserJoin) == 0x000000, "Member 'DiscordInterface_BindEvents::OnDiscordUserJoin' has a wrong offset!");
static_assert(offsetof(DiscordInterface_BindEvents, OnDiscordUserSpectate) == 0x000010, "Member 'DiscordInterface_BindEvents::OnDiscordUserSpectate' has a wrong offset!");
static_assert(offsetof(DiscordInterface_BindEvents, OnDiscordUserJoinRequest) == 0x000020, "Member 'DiscordInterface_BindEvents::OnDiscordUserJoinRequest' has a wrong offset!");
static_assert(offsetof(DiscordInterface_BindEvents, OnDiscordInvite) == 0x000030, "Member 'DiscordInterface_BindEvents::OnDiscordInvite' has a wrong offset!");

// Function DiscordRichPresence.DiscordInterface.BindOnUserInvite
// 0x0010 (0x0010 - 0x0000)
struct DiscordInterface_BindOnUserInvite final
{
public:
	TDelegate<void(EDiscordPresenceActivityActionType Type, const struct FDiscordUser& User, const struct FDiscordActivityInfo& Activity)> OnDiscordInvite;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscordInterface_BindOnUserInvite) == 0x000004, "Wrong alignment on DiscordInterface_BindOnUserInvite");
static_assert(sizeof(DiscordInterface_BindOnUserInvite) == 0x000010, "Wrong size on DiscordInterface_BindOnUserInvite");
static_assert(offsetof(DiscordInterface_BindOnUserInvite, OnDiscordInvite) == 0x000000, "Member 'DiscordInterface_BindOnUserInvite::OnDiscordInvite' has a wrong offset!");

// Function DiscordRichPresence.DiscordInterface.BindOnUserJoin
// 0x0010 (0x0010 - 0x0000)
struct DiscordInterface_BindOnUserJoin final
{
public:
	TDelegate<void(const class FString& JoinSecret)> OnDiscordUserJoin;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscordInterface_BindOnUserJoin) == 0x000004, "Wrong alignment on DiscordInterface_BindOnUserJoin");
static_assert(sizeof(DiscordInterface_BindOnUserJoin) == 0x000010, "Wrong size on DiscordInterface_BindOnUserJoin");
static_assert(offsetof(DiscordInterface_BindOnUserJoin, OnDiscordUserJoin) == 0x000000, "Member 'DiscordInterface_BindOnUserJoin::OnDiscordUserJoin' has a wrong offset!");

// Function DiscordRichPresence.DiscordInterface.BindOnUserJoinRequest
// 0x0010 (0x0010 - 0x0000)
struct DiscordInterface_BindOnUserJoinRequest final
{
public:
	TDelegate<void(const struct FDiscordUser& User)> OnDiscordUserJoinRequest;                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscordInterface_BindOnUserJoinRequest) == 0x000004, "Wrong alignment on DiscordInterface_BindOnUserJoinRequest");
static_assert(sizeof(DiscordInterface_BindOnUserJoinRequest) == 0x000010, "Wrong size on DiscordInterface_BindOnUserJoinRequest");
static_assert(offsetof(DiscordInterface_BindOnUserJoinRequest, OnDiscordUserJoinRequest) == 0x000000, "Member 'DiscordInterface_BindOnUserJoinRequest::OnDiscordUserJoinRequest' has a wrong offset!");

// Function DiscordRichPresence.DiscordInterface.BindOnUserSpectate
// 0x0010 (0x0010 - 0x0000)
struct DiscordInterface_BindOnUserSpectate final
{
public:
	TDelegate<void(const class FString& SpectateSecret)> OnDiscordUserSpectate;                             // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscordInterface_BindOnUserSpectate) == 0x000004, "Wrong alignment on DiscordInterface_BindOnUserSpectate");
static_assert(sizeof(DiscordInterface_BindOnUserSpectate) == 0x000010, "Wrong size on DiscordInterface_BindOnUserSpectate");
static_assert(offsetof(DiscordInterface_BindOnUserSpectate, OnDiscordUserSpectate) == 0x000000, "Member 'DiscordInterface_BindOnUserSpectate::OnDiscordUserSpectate' has a wrong offset!");

// Function DiscordRichPresence.DiscordInterface.InitializeDiscord
// 0x0018 (0x0018 - 0x0000)
struct DiscordInterface_InitializeDiscord final
{
public:
	class FString                                 ClientID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DiscordInterface_InitializeDiscord) == 0x000008, "Wrong alignment on DiscordInterface_InitializeDiscord");
static_assert(sizeof(DiscordInterface_InitializeDiscord) == 0x000018, "Wrong size on DiscordInterface_InitializeDiscord");
static_assert(offsetof(DiscordInterface_InitializeDiscord, ClientID) == 0x000000, "Member 'DiscordInterface_InitializeDiscord::ClientID' has a wrong offset!");
static_assert(offsetof(DiscordInterface_InitializeDiscord, ReturnValue) == 0x000010, "Member 'DiscordInterface_InitializeDiscord::ReturnValue' has a wrong offset!");

// Function DiscordRichPresence.DiscordInterface.RegisterApplication
// 0x0010 (0x0010 - 0x0000)
struct DiscordInterface_RegisterApplication final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscordInterface_RegisterApplication) == 0x000008, "Wrong alignment on DiscordInterface_RegisterApplication");
static_assert(sizeof(DiscordInterface_RegisterApplication) == 0x000010, "Wrong size on DiscordInterface_RegisterApplication");
static_assert(offsetof(DiscordInterface_RegisterApplication, Command) == 0x000000, "Member 'DiscordInterface_RegisterApplication::Command' has a wrong offset!");

// Function DiscordRichPresence.DiscordInterface.SetActivity
// 0x00A8 (0x00A8 - 0x0000)
struct DiscordInterface_SetActivity final
{
public:
	struct FDiscordActivityInfo                   Activity;                                          // 0x0000(0x00A8)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscordInterface_SetActivity) == 0x000008, "Wrong alignment on DiscordInterface_SetActivity");
static_assert(sizeof(DiscordInterface_SetActivity) == 0x0000A8, "Wrong size on DiscordInterface_SetActivity");
static_assert(offsetof(DiscordInterface_SetActivity, Activity) == 0x000000, "Member 'DiscordInterface_SetActivity::Activity' has a wrong offset!");

}

