#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Bodycam_Interface

#include "Basic.hpp"

#include "E_Team_structs.hpp"
#include "GameMode_structs.hpp"
#include "STR_TEST_structs.hpp"
#include "STR_PCInfo_structs.hpp"
#include "STR_Actor_structs.hpp"
#include "STR_KickVote_structs.hpp"
#include "STR_Score_structs.hpp"
#include "STR_GamemodeWinInfo_structs.hpp"


namespace SDK::Params
{

// Function Bodycam_Interface.Bodycam_Interface_C.CanCreateKickVote
// 0x0001 (0x0001 - 0x0000)
struct Bodycam_Interface_C_CanCreateKickVote final
{
public:
	bool                                          CanCreateKickVote_;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_CanCreateKickVote) == 0x000001, "Wrong alignment on Bodycam_Interface_C_CanCreateKickVote");
static_assert(sizeof(Bodycam_Interface_C_CanCreateKickVote) == 0x000001, "Wrong size on Bodycam_Interface_C_CanCreateKickVote");
static_assert(offsetof(Bodycam_Interface_C_CanCreateKickVote, CanCreateKickVote_) == 0x000000, "Member 'Bodycam_Interface_C_CanCreateKickVote::CanCreateKickVote_' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.CanKickThisPlayer?
// 0x0018 (0x0018 - 0x0000)
struct Bodycam_Interface_C_CanKickThisPlayer_ final
{
public:
	class FString                                 PlayerID;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          True_;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_CanKickThisPlayer_) == 0x000008, "Wrong alignment on Bodycam_Interface_C_CanKickThisPlayer_");
static_assert(sizeof(Bodycam_Interface_C_CanKickThisPlayer_) == 0x000018, "Wrong size on Bodycam_Interface_C_CanKickThisPlayer_");
static_assert(offsetof(Bodycam_Interface_C_CanKickThisPlayer_, PlayerID) == 0x000000, "Member 'Bodycam_Interface_C_CanKickThisPlayer_::PlayerID' has a wrong offset!");
static_assert(offsetof(Bodycam_Interface_C_CanKickThisPlayer_, True_) == 0x000010, "Member 'Bodycam_Interface_C_CanKickThisPlayer_::True_' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.Get BP Menu Controller Component
// 0x0008 (0x0008 - 0x0000)
struct Bodycam_Interface_C_Get_BP_Menu_Controller_Component final
{
public:
	class UBP_MenuControllerComponent_C*          BP_Menu_Controller_Component;                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_Get_BP_Menu_Controller_Component) == 0x000008, "Wrong alignment on Bodycam_Interface_C_Get_BP_Menu_Controller_Component");
static_assert(sizeof(Bodycam_Interface_C_Get_BP_Menu_Controller_Component) == 0x000008, "Wrong size on Bodycam_Interface_C_Get_BP_Menu_Controller_Component");
static_assert(offsetof(Bodycam_Interface_C_Get_BP_Menu_Controller_Component, BP_Menu_Controller_Component) == 0x000000, "Member 'Bodycam_Interface_C_Get_BP_Menu_Controller_Component::BP_Menu_Controller_Component' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.Get Stamina
// 0x0008 (0x0008 - 0x0000)
struct Bodycam_Interface_C_Get_Stamina final
{
public:
	double                                        Stamina;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_Get_Stamina) == 0x000008, "Wrong alignment on Bodycam_Interface_C_Get_Stamina");
static_assert(sizeof(Bodycam_Interface_C_Get_Stamina) == 0x000008, "Wrong size on Bodycam_Interface_C_Get_Stamina");
static_assert(offsetof(Bodycam_Interface_C_Get_Stamina, Stamina) == 0x000000, "Member 'Bodycam_Interface_C_Get_Stamina::Stamina' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetBlured
// 0x0008 (0x0008 - 0x0000)
struct Bodycam_Interface_C_GetBlured final
{
public:
	double                                        Blured;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_GetBlured) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetBlured");
static_assert(sizeof(Bodycam_Interface_C_GetBlured) == 0x000008, "Wrong size on Bodycam_Interface_C_GetBlured");
static_assert(offsetof(Bodycam_Interface_C_GetBlured, Blured) == 0x000000, "Member 'Bodycam_Interface_C_GetBlured::Blured' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetBurnedRef
// 0x0008 (0x0008 - 0x0000)
struct Bodycam_Interface_C_GetBurnedRef final
{
public:
	class USceneComponent*                        BurnedMesh;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_GetBurnedRef) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetBurnedRef");
static_assert(sizeof(Bodycam_Interface_C_GetBurnedRef) == 0x000008, "Wrong size on Bodycam_Interface_C_GetBurnedRef");
static_assert(offsetof(Bodycam_Interface_C_GetBurnedRef, BurnedMesh) == 0x000000, "Member 'Bodycam_Interface_C_GetBurnedRef::BurnedMesh' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetFlashBangEffect
// 0x0008 (0x0008 - 0x0000)
struct Bodycam_Interface_C_GetFlashBangEffect final
{
public:
	double                                        FlashEffect;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_GetFlashBangEffect) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetFlashBangEffect");
static_assert(sizeof(Bodycam_Interface_C_GetFlashBangEffect) == 0x000008, "Wrong size on Bodycam_Interface_C_GetFlashBangEffect");
static_assert(offsetof(Bodycam_Interface_C_GetFlashBangEffect, FlashEffect) == 0x000000, "Member 'Bodycam_Interface_C_GetFlashBangEffect::FlashEffect' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetGameMode
// 0x0040 (0x0040 - 0x0000)
struct Bodycam_Interface_C_GetGameMode final
{
public:
	struct FSTR_GamemodeWinInfo                   GameMode;                                          // 0x0000(0x0040)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_GetGameMode) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetGameMode");
static_assert(sizeof(Bodycam_Interface_C_GetGameMode) == 0x000040, "Wrong size on Bodycam_Interface_C_GetGameMode");
static_assert(offsetof(Bodycam_Interface_C_GetGameMode, GameMode) == 0x000000, "Member 'Bodycam_Interface_C_GetGameMode::GameMode' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetHealth
// 0x0008 (0x0008 - 0x0000)
struct Bodycam_Interface_C_GetHealth final
{
public:
	double                                        Health;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_GetHealth) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetHealth");
static_assert(sizeof(Bodycam_Interface_C_GetHealth) == 0x000008, "Wrong size on Bodycam_Interface_C_GetHealth");
static_assert(offsetof(Bodycam_Interface_C_GetHealth, Health) == 0x000000, "Member 'Bodycam_Interface_C_GetHealth::Health' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetKickedPlayerVoted
// 0x0010 (0x0010 - 0x0000)
struct Bodycam_Interface_C_GetKickedPlayerVoted final
{
public:
	TArray<class FString>                         KickplayerAlreadyVote;                             // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(Bodycam_Interface_C_GetKickedPlayerVoted) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetKickedPlayerVoted");
static_assert(sizeof(Bodycam_Interface_C_GetKickedPlayerVoted) == 0x000010, "Wrong size on Bodycam_Interface_C_GetKickedPlayerVoted");
static_assert(offsetof(Bodycam_Interface_C_GetKickedPlayerVoted, KickplayerAlreadyVote) == 0x000000, "Member 'Bodycam_Interface_C_GetKickedPlayerVoted::KickplayerAlreadyVote' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetMenuSettings
// 0x0008 (0x0008 - 0x0000)
struct Bodycam_Interface_C_GetMenuSettings final
{
public:
	class UBP_MenuControllerComponent_C*          Bp_MenuController;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_GetMenuSettings) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetMenuSettings");
static_assert(sizeof(Bodycam_Interface_C_GetMenuSettings) == 0x000008, "Wrong size on Bodycam_Interface_C_GetMenuSettings");
static_assert(offsetof(Bodycam_Interface_C_GetMenuSettings, Bp_MenuController) == 0x000000, "Member 'Bodycam_Interface_C_GetMenuSettings::Bp_MenuController' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetMutePlayer
// 0x0010 (0x0010 - 0x0000)
struct Bodycam_Interface_C_GetMutePlayer final
{
public:
	TArray<class FString>                         MutePlayer;                                        // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(Bodycam_Interface_C_GetMutePlayer) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetMutePlayer");
static_assert(sizeof(Bodycam_Interface_C_GetMutePlayer) == 0x000010, "Wrong size on Bodycam_Interface_C_GetMutePlayer");
static_assert(offsetof(Bodycam_Interface_C_GetMutePlayer, MutePlayer) == 0x000000, "Member 'Bodycam_Interface_C_GetMutePlayer::MutePlayer' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetPlayerConnected
// 0x0010 (0x0010 - 0x0000)
struct Bodycam_Interface_C_GetPlayerConnected final
{
public:
	TArray<struct FSTR_PCInfo>                    PlayerConnected;                                   // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(Bodycam_Interface_C_GetPlayerConnected) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetPlayerConnected");
static_assert(sizeof(Bodycam_Interface_C_GetPlayerConnected) == 0x000010, "Wrong size on Bodycam_Interface_C_GetPlayerConnected");
static_assert(offsetof(Bodycam_Interface_C_GetPlayerConnected, PlayerConnected) == 0x000000, "Member 'Bodycam_Interface_C_GetPlayerConnected::PlayerConnected' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetPlayerKickVote
// 0x0010 (0x0010 - 0x0000)
struct Bodycam_Interface_C_GetPlayerKickVote final
{
public:
	TArray<struct FSTR_KickVote>                  KickVotePlayer;                                    // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(Bodycam_Interface_C_GetPlayerKickVote) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetPlayerKickVote");
static_assert(sizeof(Bodycam_Interface_C_GetPlayerKickVote) == 0x000010, "Wrong size on Bodycam_Interface_C_GetPlayerKickVote");
static_assert(offsetof(Bodycam_Interface_C_GetPlayerKickVote, KickVotePlayer) == 0x000000, "Member 'Bodycam_Interface_C_GetPlayerKickVote::KickVotePlayer' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetPlayerSkin
// 0x02E8 (0x02E8 - 0x0000)
struct Bodycam_Interface_C_GetPlayerSkin final
{
public:
	struct FSTR_TEST                              Player_Skin;                                       // 0x0000(0x02E0)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          Valid_;                                            // 0x02E0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_GetPlayerSkin) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetPlayerSkin");
static_assert(sizeof(Bodycam_Interface_C_GetPlayerSkin) == 0x0002E8, "Wrong size on Bodycam_Interface_C_GetPlayerSkin");
static_assert(offsetof(Bodycam_Interface_C_GetPlayerSkin, Player_Skin) == 0x000000, "Member 'Bodycam_Interface_C_GetPlayerSkin::Player_Skin' has a wrong offset!");
static_assert(offsetof(Bodycam_Interface_C_GetPlayerSkin, Valid_) == 0x0002E0, "Member 'Bodycam_Interface_C_GetPlayerSkin::Valid_' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetRagdollSystem
// 0x0008 (0x0008 - 0x0000)
struct Bodycam_Interface_C_GetRagdollSystem final
{
public:
	class UWW_RagdollSystem_C*                    Ragdoll_System;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_GetRagdollSystem) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetRagdollSystem");
static_assert(sizeof(Bodycam_Interface_C_GetRagdollSystem) == 0x000008, "Wrong size on Bodycam_Interface_C_GetRagdollSystem");
static_assert(offsetof(Bodycam_Interface_C_GetRagdollSystem, Ragdoll_System) == 0x000000, "Member 'Bodycam_Interface_C_GetRagdollSystem::Ragdoll_System' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetReady?
// 0x0001 (0x0001 - 0x0000)
struct Bodycam_Interface_C_GetReady_ final
{
public:
	bool                                          IsReady_;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_GetReady_) == 0x000001, "Wrong alignment on Bodycam_Interface_C_GetReady_");
static_assert(sizeof(Bodycam_Interface_C_GetReady_) == 0x000001, "Wrong size on Bodycam_Interface_C_GetReady_");
static_assert(offsetof(Bodycam_Interface_C_GetReady_, IsReady_) == 0x000000, "Member 'Bodycam_Interface_C_GetReady_::IsReady_' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetServerSteamID
// 0x0010 (0x0010 - 0x0000)
struct Bodycam_Interface_C_GetServerSteamID final
{
public:
	class FString                                 SteamID;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_GetServerSteamID) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetServerSteamID");
static_assert(sizeof(Bodycam_Interface_C_GetServerSteamID) == 0x000010, "Wrong size on Bodycam_Interface_C_GetServerSteamID");
static_assert(offsetof(Bodycam_Interface_C_GetServerSteamID, SteamID) == 0x000000, "Member 'Bodycam_Interface_C_GetServerSteamID::SteamID' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetStarterWeapons
// 0x0010 (0x0010 - 0x0000)
struct Bodycam_Interface_C_GetStarterWeapons final
{
public:
	TArray<struct FSTR_Actor>                     Weapons;                                           // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(Bodycam_Interface_C_GetStarterWeapons) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetStarterWeapons");
static_assert(sizeof(Bodycam_Interface_C_GetStarterWeapons) == 0x000010, "Wrong size on Bodycam_Interface_C_GetStarterWeapons");
static_assert(offsetof(Bodycam_Interface_C_GetStarterWeapons, Weapons) == 0x000000, "Member 'Bodycam_Interface_C_GetStarterWeapons::Weapons' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetSteamID
// 0x0010 (0x0010 - 0x0000)
struct Bodycam_Interface_C_GetSteamID final
{
public:
	class FString                                 SteamID;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_GetSteamID) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetSteamID");
static_assert(sizeof(Bodycam_Interface_C_GetSteamID) == 0x000010, "Wrong size on Bodycam_Interface_C_GetSteamID");
static_assert(offsetof(Bodycam_Interface_C_GetSteamID, SteamID) == 0x000000, "Member 'Bodycam_Interface_C_GetSteamID::SteamID' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetSurvivorStatuts
// 0x0008 (0x0008 - 0x0000)
struct Bodycam_Interface_C_GetSurvivorStatuts final
{
public:
	class UWW_SurvivorStatus_C*                   SurvivorComponant;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_GetSurvivorStatuts) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetSurvivorStatuts");
static_assert(sizeof(Bodycam_Interface_C_GetSurvivorStatuts) == 0x000008, "Wrong size on Bodycam_Interface_C_GetSurvivorStatuts");
static_assert(offsetof(Bodycam_Interface_C_GetSurvivorStatuts, SurvivorComponant) == 0x000000, "Member 'Bodycam_Interface_C_GetSurvivorStatuts::SurvivorComponant' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct Bodycam_Interface_C_GetTeam final
{
public:
	E_Team                                        Team;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_GetTeam) == 0x000001, "Wrong alignment on Bodycam_Interface_C_GetTeam");
static_assert(sizeof(Bodycam_Interface_C_GetTeam) == 0x000001, "Wrong size on Bodycam_Interface_C_GetTeam");
static_assert(offsetof(Bodycam_Interface_C_GetTeam, Team) == 0x000000, "Member 'Bodycam_Interface_C_GetTeam::Team' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetTeamList
// 0x0018 (0x0018 - 0x0000)
struct Bodycam_Interface_C_GetTeamList final
{
public:
	E_Team                                        Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTR_PCInfo>                    Info;                                              // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(Bodycam_Interface_C_GetTeamList) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetTeamList");
static_assert(sizeof(Bodycam_Interface_C_GetTeamList) == 0x000018, "Wrong size on Bodycam_Interface_C_GetTeamList");
static_assert(offsetof(Bodycam_Interface_C_GetTeamList, Team) == 0x000000, "Member 'Bodycam_Interface_C_GetTeamList::Team' has a wrong offset!");
static_assert(offsetof(Bodycam_Interface_C_GetTeamList, Info) == 0x000008, "Member 'Bodycam_Interface_C_GetTeamList::Info' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.GetTopScore
// 0x0010 (0x0010 - 0x0000)
struct Bodycam_Interface_C_GetTopScore final
{
public:
	TArray<struct FSTR_PCInfo>                    TopScore;                                          // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(Bodycam_Interface_C_GetTopScore) == 0x000008, "Wrong alignment on Bodycam_Interface_C_GetTopScore");
static_assert(sizeof(Bodycam_Interface_C_GetTopScore) == 0x000010, "Wrong size on Bodycam_Interface_C_GetTopScore");
static_assert(offsetof(Bodycam_Interface_C_GetTopScore, TopScore) == 0x000000, "Member 'Bodycam_Interface_C_GetTopScore::TopScore' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.IsDead
// 0x0001 (0x0001 - 0x0000)
struct Bodycam_Interface_C_IsDead final
{
public:
	bool                                          Dead_;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_IsDead) == 0x000001, "Wrong alignment on Bodycam_Interface_C_IsDead");
static_assert(sizeof(Bodycam_Interface_C_IsDead) == 0x000001, "Wrong size on Bodycam_Interface_C_IsDead");
static_assert(offsetof(Bodycam_Interface_C_IsDead, Dead_) == 0x000000, "Member 'Bodycam_Interface_C_IsDead::Dead_' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.IsDestroyabe?
// 0x0001 (0x0001 - 0x0000)
struct Bodycam_Interface_C_IsDestroyabe_ final
{
public:
	bool                                          Destroyable_;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_IsDestroyabe_) == 0x000001, "Wrong alignment on Bodycam_Interface_C_IsDestroyabe_");
static_assert(sizeof(Bodycam_Interface_C_IsDestroyabe_) == 0x000001, "Wrong size on Bodycam_Interface_C_IsDestroyabe_");
static_assert(offsetof(Bodycam_Interface_C_IsDestroyabe_, Destroyable_) == 0x000000, "Member 'Bodycam_Interface_C_IsDestroyabe_::Destroyable_' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.IsReady?
// 0x0001 (0x0001 - 0x0000)
struct Bodycam_Interface_C_IsReady_ final
{
public:
	bool                                          IsReady__0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_IsReady_) == 0x000001, "Wrong alignment on Bodycam_Interface_C_IsReady_");
static_assert(sizeof(Bodycam_Interface_C_IsReady_) == 0x000001, "Wrong size on Bodycam_Interface_C_IsReady_");
static_assert(offsetof(Bodycam_Interface_C_IsReady_, IsReady__0) == 0x000000, "Member 'Bodycam_Interface_C_IsReady_::IsReady__0' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.IsStress
// 0x0001 (0x0001 - 0x0000)
struct Bodycam_Interface_C_IsStress final
{
public:
	bool                                          Yes_;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_IsStress) == 0x000001, "Wrong alignment on Bodycam_Interface_C_IsStress");
static_assert(sizeof(Bodycam_Interface_C_IsStress) == 0x000001, "Wrong size on Bodycam_Interface_C_IsStress");
static_assert(offsetof(Bodycam_Interface_C_IsStress, Yes_) == 0x000000, "Member 'Bodycam_Interface_C_IsStress::Yes_' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.IsTalking?
// 0x0001 (0x0001 - 0x0000)
struct Bodycam_Interface_C_IsTalking_ final
{
public:
	bool                                          IsTalking__0;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_IsTalking_) == 0x000001, "Wrong alignment on Bodycam_Interface_C_IsTalking_");
static_assert(sizeof(Bodycam_Interface_C_IsTalking_) == 0x000001, "Wrong size on Bodycam_Interface_C_IsTalking_");
static_assert(offsetof(Bodycam_Interface_C_IsTalking_, IsTalking__0) == 0x000000, "Member 'Bodycam_Interface_C_IsTalking_::IsTalking__0' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.Kick?
// 0x0040 (0x0040 - 0x0000)
struct Bodycam_Interface_C_Kick_ final
{
public:
	struct FSTR_PCInfo                            Target;                                            // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_Kick_) == 0x000008, "Wrong alignment on Bodycam_Interface_C_Kick_");
static_assert(sizeof(Bodycam_Interface_C_Kick_) == 0x000040, "Wrong size on Bodycam_Interface_C_Kick_");
static_assert(offsetof(Bodycam_Interface_C_Kick_, Target) == 0x000000, "Member 'Bodycam_Interface_C_Kick_::Target' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.KickPlayer
// 0x0048 (0x0048 - 0x0000)
struct Bodycam_Interface_C_KickPlayer final
{
public:
	struct FSTR_KickVote                          PlayerInfo;                                        // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_KickPlayer) == 0x000008, "Wrong alignment on Bodycam_Interface_C_KickPlayer");
static_assert(sizeof(Bodycam_Interface_C_KickPlayer) == 0x000048, "Wrong size on Bodycam_Interface_C_KickPlayer");
static_assert(offsetof(Bodycam_Interface_C_KickPlayer, PlayerInfo) == 0x000000, "Member 'Bodycam_Interface_C_KickPlayer::PlayerInfo' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.MuteID
// 0x0010 (0x0010 - 0x0000)
struct Bodycam_Interface_C_MuteID final
{
public:
	class FString                                 SteamID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_MuteID) == 0x000008, "Wrong alignment on Bodycam_Interface_C_MuteID");
static_assert(sizeof(Bodycam_Interface_C_MuteID) == 0x000010, "Wrong size on Bodycam_Interface_C_MuteID");
static_assert(offsetof(Bodycam_Interface_C_MuteID, SteamID) == 0x000000, "Member 'Bodycam_Interface_C_MuteID::SteamID' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.NewKickVote
// 0x0040 (0x0040 - 0x0000)
struct Bodycam_Interface_C_NewKickVote final
{
public:
	struct FSTR_PCInfo                            Target;                                            // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_NewKickVote) == 0x000008, "Wrong alignment on Bodycam_Interface_C_NewKickVote");
static_assert(sizeof(Bodycam_Interface_C_NewKickVote) == 0x000040, "Wrong size on Bodycam_Interface_C_NewKickVote");
static_assert(offsetof(Bodycam_Interface_C_NewKickVote, Target) == 0x000000, "Member 'Bodycam_Interface_C_NewKickVote::Target' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.OnPlayerDeath
// 0x0008 (0x0008 - 0x0000)
struct Bodycam_Interface_C_OnPlayerDeath final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_OnPlayerDeath) == 0x000008, "Wrong alignment on Bodycam_Interface_C_OnPlayerDeath");
static_assert(sizeof(Bodycam_Interface_C_OnPlayerDeath) == 0x000008, "Wrong size on Bodycam_Interface_C_OnPlayerDeath");
static_assert(offsetof(Bodycam_Interface_C_OnPlayerDeath, PC) == 0x000000, "Member 'Bodycam_Interface_C_OnPlayerDeath::PC' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.OnTrySelectTeam
// 0x0001 (0x0001 - 0x0000)
struct Bodycam_Interface_C_OnTrySelectTeam final
{
public:
	E_Team                                        Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_OnTrySelectTeam) == 0x000001, "Wrong alignment on Bodycam_Interface_C_OnTrySelectTeam");
static_assert(sizeof(Bodycam_Interface_C_OnTrySelectTeam) == 0x000001, "Wrong size on Bodycam_Interface_C_OnTrySelectTeam");
static_assert(offsetof(Bodycam_Interface_C_OnTrySelectTeam, Team) == 0x000000, "Member 'Bodycam_Interface_C_OnTrySelectTeam::Team' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.ServerTravel
// 0x0008 (0x0008 - 0x0000)
struct Bodycam_Interface_C_ServerTravel final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_ServerTravel) == 0x000008, "Wrong alignment on Bodycam_Interface_C_ServerTravel");
static_assert(sizeof(Bodycam_Interface_C_ServerTravel) == 0x000008, "Wrong size on Bodycam_Interface_C_ServerTravel");
static_assert(offsetof(Bodycam_Interface_C_ServerTravel, Delay) == 0x000000, "Member 'Bodycam_Interface_C_ServerTravel::Delay' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.Slomo
// 0x0008 (0x0008 - 0x0000)
struct Bodycam_Interface_C_Slomo final
{
public:
	double                                        Slomo_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_Slomo) == 0x000008, "Wrong alignment on Bodycam_Interface_C_Slomo");
static_assert(sizeof(Bodycam_Interface_C_Slomo) == 0x000008, "Wrong size on Bodycam_Interface_C_Slomo");
static_assert(offsetof(Bodycam_Interface_C_Slomo, Slomo_0) == 0x000000, "Member 'Bodycam_Interface_C_Slomo::Slomo_0' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.Talk
// 0x0001 (0x0001 - 0x0000)
struct Bodycam_Interface_C_Talk final
{
public:
	bool                                          IsTalking;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_Talk) == 0x000001, "Wrong alignment on Bodycam_Interface_C_Talk");
static_assert(sizeof(Bodycam_Interface_C_Talk) == 0x000001, "Wrong size on Bodycam_Interface_C_Talk");
static_assert(offsetof(Bodycam_Interface_C_Talk, IsTalking) == 0x000000, "Member 'Bodycam_Interface_C_Talk::IsTalking' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.UpdateGamemode
// 0x0001 (0x0001 - 0x0000)
struct Bodycam_Interface_C_UpdateGamemode final
{
public:
	EGameMode                                     GameMode;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_UpdateGamemode) == 0x000001, "Wrong alignment on Bodycam_Interface_C_UpdateGamemode");
static_assert(sizeof(Bodycam_Interface_C_UpdateGamemode) == 0x000001, "Wrong size on Bodycam_Interface_C_UpdateGamemode");
static_assert(offsetof(Bodycam_Interface_C_UpdateGamemode, GameMode) == 0x000000, "Member 'Bodycam_Interface_C_UpdateGamemode::GameMode' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.UpdateKickVote
// 0x0048 (0x0048 - 0x0000)
struct Bodycam_Interface_C_UpdateKickVote final
{
public:
	struct FSTR_PCInfo                            Target;                                            // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Yes_;                                              // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_UpdateKickVote) == 0x000008, "Wrong alignment on Bodycam_Interface_C_UpdateKickVote");
static_assert(sizeof(Bodycam_Interface_C_UpdateKickVote) == 0x000048, "Wrong size on Bodycam_Interface_C_UpdateKickVote");
static_assert(offsetof(Bodycam_Interface_C_UpdateKickVote, Target) == 0x000000, "Member 'Bodycam_Interface_C_UpdateKickVote::Target' has a wrong offset!");
static_assert(offsetof(Bodycam_Interface_C_UpdateKickVote, Yes_) == 0x000040, "Member 'Bodycam_Interface_C_UpdateKickVote::Yes_' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.UpdateMapSelection
// 0x000C (0x000C - 0x0000)
struct Bodycam_Interface_C_UpdateMapSelection final
{
public:
	class FName                                   Selected_Level_Name;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_UpdateMapSelection) == 0x000004, "Wrong alignment on Bodycam_Interface_C_UpdateMapSelection");
static_assert(sizeof(Bodycam_Interface_C_UpdateMapSelection) == 0x00000C, "Wrong size on Bodycam_Interface_C_UpdateMapSelection");
static_assert(offsetof(Bodycam_Interface_C_UpdateMapSelection, Selected_Level_Name) == 0x000000, "Member 'Bodycam_Interface_C_UpdateMapSelection::Selected_Level_Name' has a wrong offset!");
static_assert(offsetof(Bodycam_Interface_C_UpdateMapSelection, Index_0) == 0x000008, "Member 'Bodycam_Interface_C_UpdateMapSelection::Index_0' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.UpdateScore
// 0x0008 (0x0008 - 0x0000)
struct Bodycam_Interface_C_UpdateScore final
{
public:
	struct FSTR_Score                             Score;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_UpdateScore) == 0x000004, "Wrong alignment on Bodycam_Interface_C_UpdateScore");
static_assert(sizeof(Bodycam_Interface_C_UpdateScore) == 0x000008, "Wrong size on Bodycam_Interface_C_UpdateScore");
static_assert(offsetof(Bodycam_Interface_C_UpdateScore, Score) == 0x000000, "Member 'Bodycam_Interface_C_UpdateScore::Score' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.UpdateTeamIndex (PlayerKilled)
// 0x0010 (0x0010 - 0x0000)
struct Bodycam_Interface_C_UpdateTeamIndex__PlayerKilled_ final
{
public:
	E_Team                                        Team_PlayerKilled_;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MilitaryIndex;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TerroristIndex;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Team                                        WiiningTeam;                                       // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_UpdateTeamIndex__PlayerKilled_) == 0x000004, "Wrong alignment on Bodycam_Interface_C_UpdateTeamIndex__PlayerKilled_");
static_assert(sizeof(Bodycam_Interface_C_UpdateTeamIndex__PlayerKilled_) == 0x000010, "Wrong size on Bodycam_Interface_C_UpdateTeamIndex__PlayerKilled_");
static_assert(offsetof(Bodycam_Interface_C_UpdateTeamIndex__PlayerKilled_, Team_PlayerKilled_) == 0x000000, "Member 'Bodycam_Interface_C_UpdateTeamIndex__PlayerKilled_::Team_PlayerKilled_' has a wrong offset!");
static_assert(offsetof(Bodycam_Interface_C_UpdateTeamIndex__PlayerKilled_, MilitaryIndex) == 0x000004, "Member 'Bodycam_Interface_C_UpdateTeamIndex__PlayerKilled_::MilitaryIndex' has a wrong offset!");
static_assert(offsetof(Bodycam_Interface_C_UpdateTeamIndex__PlayerKilled_, TerroristIndex) == 0x000008, "Member 'Bodycam_Interface_C_UpdateTeamIndex__PlayerKilled_::TerroristIndex' has a wrong offset!");
static_assert(offsetof(Bodycam_Interface_C_UpdateTeamIndex__PlayerKilled_, WiiningTeam) == 0x00000C, "Member 'Bodycam_Interface_C_UpdateTeamIndex__PlayerKilled_::WiiningTeam' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.UpdateTeamXP
// 0x0001 (0x0001 - 0x0000)
struct Bodycam_Interface_C_UpdateTeamXP final
{
public:
	bool                                          Win_;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_UpdateTeamXP) == 0x000001, "Wrong alignment on Bodycam_Interface_C_UpdateTeamXP");
static_assert(sizeof(Bodycam_Interface_C_UpdateTeamXP) == 0x000001, "Wrong size on Bodycam_Interface_C_UpdateTeamXP");
static_assert(offsetof(Bodycam_Interface_C_UpdateTeamXP, Win_) == 0x000000, "Member 'Bodycam_Interface_C_UpdateTeamXP::Win_' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.UpdateTimer
// 0x0020 (0x0020 - 0x0000)
struct Bodycam_Interface_C_UpdateTimer final
{
public:
	double                                        TimeCount;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   NewParam;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(Bodycam_Interface_C_UpdateTimer) == 0x000008, "Wrong alignment on Bodycam_Interface_C_UpdateTimer");
static_assert(sizeof(Bodycam_Interface_C_UpdateTimer) == 0x000020, "Wrong size on Bodycam_Interface_C_UpdateTimer");
static_assert(offsetof(Bodycam_Interface_C_UpdateTimer, TimeCount) == 0x000000, "Member 'Bodycam_Interface_C_UpdateTimer::TimeCount' has a wrong offset!");
static_assert(offsetof(Bodycam_Interface_C_UpdateTimer, NewParam) == 0x000008, "Member 'Bodycam_Interface_C_UpdateTimer::NewParam' has a wrong offset!");

// Function Bodycam_Interface.Bodycam_Interface_C.UpdateWarning
// 0x0010 (0x0010 - 0x0000)
struct Bodycam_Interface_C_UpdateWarning final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Bodycam_Interface_C_UpdateWarning) == 0x000008, "Wrong alignment on Bodycam_Interface_C_UpdateWarning");
static_assert(sizeof(Bodycam_Interface_C_UpdateWarning) == 0x000010, "Wrong size on Bodycam_Interface_C_UpdateWarning");
static_assert(offsetof(Bodycam_Interface_C_UpdateWarning, String) == 0x000000, "Member 'Bodycam_Interface_C_UpdateWarning::String' has a wrong offset!");

}

