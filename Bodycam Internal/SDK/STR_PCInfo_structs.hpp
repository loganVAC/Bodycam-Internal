#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STR_PCInfo

#include "Basic.hpp"

#include "E_Team_structs.hpp"
#include "STR_PCStats_structs.hpp"


namespace SDK
{

// UserDefinedStruct STR_PCInfo.STR_PCInfo
// 0x0040 (0x0040 - 0x0000)
struct FSTR_PCInfo final
{
public:
	class APlayerController*                      PC_19_393D49BA423796C6CE182396A61CA949;            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Character_25_054F93D3456196A189B1F6BE68D0395A;     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class FString                                 SteamID_20_1905245F451316EA19D5B58CCEF5A603;       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	E_Team                                        Team_14_AF2247D6483E6C47508527A8BDC6C4C0;          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_PCStats                           Stats_12_FD62BAB94FFB55C395137EB4917BAF35;         // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Avatar_28_F3D7B3EF479BCBD0F78892B1F14C12F1;        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FSTR_PCInfo) == 0x000008, "Wrong alignment on FSTR_PCInfo");
static_assert(sizeof(FSTR_PCInfo) == 0x000040, "Wrong size on FSTR_PCInfo");
static_assert(offsetof(FSTR_PCInfo, PC_19_393D49BA423796C6CE182396A61CA949) == 0x000000, "Member 'FSTR_PCInfo::PC_19_393D49BA423796C6CE182396A61CA949' has a wrong offset!");
static_assert(offsetof(FSTR_PCInfo, Character_25_054F93D3456196A189B1F6BE68D0395A) == 0x000008, "Member 'FSTR_PCInfo::Character_25_054F93D3456196A189B1F6BE68D0395A' has a wrong offset!");
static_assert(offsetof(FSTR_PCInfo, SteamID_20_1905245F451316EA19D5B58CCEF5A603) == 0x000010, "Member 'FSTR_PCInfo::SteamID_20_1905245F451316EA19D5B58CCEF5A603' has a wrong offset!");
static_assert(offsetof(FSTR_PCInfo, Team_14_AF2247D6483E6C47508527A8BDC6C4C0) == 0x000020, "Member 'FSTR_PCInfo::Team_14_AF2247D6483E6C47508527A8BDC6C4C0' has a wrong offset!");
static_assert(offsetof(FSTR_PCInfo, Stats_12_FD62BAB94FFB55C395137EB4917BAF35) == 0x000024, "Member 'FSTR_PCInfo::Stats_12_FD62BAB94FFB55C395137EB4917BAF35' has a wrong offset!");
static_assert(offsetof(FSTR_PCInfo, Avatar_28_F3D7B3EF479BCBD0F78892B1F14C12F1) == 0x000038, "Member 'FSTR_PCInfo::Avatar_28_F3D7B3EF479BCBD0F78892B1F14C12F1' has a wrong offset!");

}

