#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ultra_Dynamic_Weather

#include "Basic.hpp"

#include "Ultra_Dynamic_Weather_classes.hpp"
#include "Ultra_Dynamic_Weather_parameters.hpp"


namespace SDK
{

// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Add Weather Override Volume to Array
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AWeather_Override_Volume_C*       Weather_Override_Volume                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Add_Weather_Override_Volume_to_Array(class AWeather_Override_Volume_C* Weather_Override_Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Add Weather Override Volume to Array");

	Params::Ultra_Dynamic_Weather_C_Add_Weather_Override_Volume_to_Array Parms{};

	Parms.Weather_Override_Volume = Weather_Override_Volume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C. Local Weather
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUDS_Weather_Settings_C*          Target_State_Object                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Test_Location                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::_Local_Weather(class UUDS_Weather_Settings_C* Target_State_Object, const struct FVector& Test_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", " Local Weather");

	Params::Ultra_Dynamic_Weather_C__Local_Weather Parms{};

	Parms.Target_State_Object = Target_State_Object;
	Parms.Test_Location = std::move(Test_Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Apply Interior Temperature with Occlusion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Temp                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Occlusion                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Apply_Interior_Temperature_with_Occlusion(double Temp, double Occlusion, double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Apply Interior Temperature with Occlusion");

	Params::Ultra_Dynamic_Weather_C_Apply_Interior_Temperature_with_Occlusion Parms{};

	Parms.Temp = Temp;
	Parms.Occlusion = Occlusion;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Apply Max to Material Effects
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UUDS_Weather_Settings_C*          Weather_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Snow_Coverage                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Wetness                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Dust_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Apply_Max_to_Material_Effects(class UUDS_Weather_Settings_C* Weather_0, double* Snow_Coverage, double* Wetness, double* Param_Dust_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Apply Max to Material Effects");

	Params::Ultra_Dynamic_Weather_C_Apply_Max_to_Material_Effects Parms{};

	Parms.Weather_0 = Weather_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Snow_Coverage != nullptr)
		*Snow_Coverage = Parms.Snow_Coverage;

	if (Wetness != nullptr)
		*Wetness = Parms.Wetness;

	if (Param_Dust_0 != nullptr)
		*Param_Dust_0 = Parms.Param_Dust_0;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Apply State
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FUDS_and_UDW_State               State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Apply_State(const struct FUDS_and_UDW_State& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Apply State");

	Params::Ultra_Dynamic_Weather_C_Apply_State Parms{};

	Parms.State = std::move(State);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Approximate Weather Mask Brush Effect
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AWeather_Mask_Brush_C*            Brush                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Cancel                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Approximate_Weather_Mask_Brush_Effect(class AWeather_Mask_Brush_C* Brush, const struct FVector2D& Location, double Height, double* Out, bool* Cancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Approximate Weather Mask Brush Effect");

	Params::Ultra_Dynamic_Weather_C_Approximate_Weather_Mask_Brush_Effect Parms{};

	Parms.Brush = Brush;
	Parms.Location = std::move(Location);
	Parms.Height = Height;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;

	if (Cancel != nullptr)
		*Cancel = Parms.Cancel;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Audio Update
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Audio_Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Audio Update");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Cache Float
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDW_CachedProperties                   Property                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Set_Value                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Cache_Float(EUDW_CachedProperties Property, double Set_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Cache Float");

	Params::Ultra_Dynamic_Weather_C_Cache_Float Parms{};

	Parms.Property = Property;
	Parms.Set_Value = Set_Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Cache Properties
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Cache_Properties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Cache Properties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Cache Vector
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDW_CachedProperties                   Property                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Set_Value                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Cache_Vector(EUDW_CachedProperties Property, const struct FVector& Set_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Cache Vector");

	Params::Ultra_Dynamic_Weather_C_Cache_Vector Parms{};

	Parms.Property = Property;
	Parms.Set_Value = std::move(Set_Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Cached Wind Rotation
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         Rot                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AUltra_Dynamic_Weather_C::Cached_Wind_Rotation(struct FRotator* Rot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Cached Wind Rotation");

	Params::Ultra_Dynamic_Weather_C_Cached_Wind_Rotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rot != nullptr)
		*Rot = std::move(Parms.Rot);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Change to Random Weather
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time_to_Transition_to_Random_Weather__Seconds_         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Reset_Particle_Emitters                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Change_to_Random_Weather(double Time_to_Transition_to_Random_Weather__Seconds_, bool Reset_Particle_Emitters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Change to Random Weather");

	Params::Ultra_Dynamic_Weather_C_Change_to_Random_Weather Parms{};

	Parms.Time_to_Transition_to_Random_Weather__Seconds_ = Time_to_Transition_to_Random_Weather__Seconds_;
	Parms.Reset_Particle_Emitters = Reset_Particle_Emitters;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Change Weather
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUDS_Weather_Settings_C*          New_Weather_Type                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Time_To_Transition_To_New_Weather__Seconds_            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Reset_Particle_Emitters                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Change_Weather(class UUDS_Weather_Settings_C* New_Weather_Type, double Time_To_Transition_To_New_Weather__Seconds_, bool Reset_Particle_Emitters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Change Weather");

	Params::Ultra_Dynamic_Weather_C_Change_Weather Parms{};

	Parms.New_Weather_Type = New_Weather_Type;
	Parms.Time_To_Transition_To_New_Weather__Seconds_ = Time_To_Transition_To_New_Weather__Seconds_;
	Parms.Reset_Particle_Emitters = Reset_Particle_Emitters;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Check for DLWE Recenter
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Check_for_DLWE_Recenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Check for DLWE Recenter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Check for Events to Dispatch
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Check_for_Events_to_Dispatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Check for Events to Dispatch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Check Point for Puddles Snow Or Dust
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Ground_Normal                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPhysicalMaterial*                Physical_Material                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Puddle_Depth                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Snow_Depth_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Dust_Depth_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Check_Point_for_Puddles_Snow_Or_Dust(const struct FVector& Location, const struct FVector& Ground_Normal, class UPhysicalMaterial* Physical_Material, double* Puddle_Depth, double* Snow_Depth_0, double* Dust_Depth_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Check Point for Puddles Snow Or Dust");

	Params::Ultra_Dynamic_Weather_C_Check_Point_for_Puddles_Snow_Or_Dust Parms{};

	Parms.Location = std::move(Location);
	Parms.Ground_Normal = std::move(Ground_Normal);
	Parms.Physical_Material = Physical_Material;

	UObject::ProcessEvent(Func, &Parms);

	if (Puddle_Depth != nullptr)
		*Puddle_Depth = Parms.Puddle_Depth;

	if (Snow_Depth_0 != nullptr)
		*Snow_Depth_0 = Parms.Snow_Depth_0;

	if (Dust_Depth_0 != nullptr)
		*Dust_Depth_0 = Parms.Dust_Depth_0;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Check to change DLWE Mode
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Check_to_change_DLWE_Mode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Check to change DLWE Mode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Check to Change Temperature Scale
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Check_to_Change_Temperature_Scale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Check to Change Temperature Scale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Check To Limit Construction
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Check_To_Limit_Construction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Check To Limit Construction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Check to Recenter Weather Override Volume Target
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Check_to_Recenter_Weather_Override_Volume_Target()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Check to Recenter Weather Override Volume Target");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Check to Redraw Weather Mask Target
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Check_to_Redraw_Weather_Mask_Target()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Check to Redraw Weather Mask Target");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Check to Turn on UDS Rainbow
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Check_to_Turn_on_UDS_Rainbow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Check to Turn on UDS Rainbow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Check UDS Version
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Check_UDS_Version()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Check UDS Version");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Clients Transition Start
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Clients_Transition_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Clients Transition Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Close Thunder Sound Delay
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Delay                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Close_Thunder_Sound_Delay(double* Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Close Thunder Sound Delay");

	Params::Ultra_Dynamic_Weather_C_Close_Thunder_Sound_Delay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Delay != nullptr)
		*Delay = Parms.Delay;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Clouds Clearing__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Clouds_Clearing__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Clouds Clearing__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Combined Wind Direction
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Weather_C::Combined_Wind_Direction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Combined Wind Direction");

	Params::Ultra_Dynamic_Weather_C_Combined_Wind_Direction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Compare Weather States
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUDS_Weather_Settings_C*          A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UUDS_Weather_Settings_C*          B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Difference                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Compare_Weather_States(class UUDS_Weather_Settings_C* A, class UUDS_Weather_Settings_C* B, double* Difference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Compare Weather States");

	Params::Ultra_Dynamic_Weather_C_Compare_Weather_States Parms{};

	Parms.A = A;
	Parms.B = B;

	UObject::ProcessEvent(Func, &Parms);

	if (Difference != nullptr)
		*Difference = Parms.Difference;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Compress DLWE Snow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Compress_DLWE_Snow(const struct FVector& Location, double Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Compress DLWE Snow");

	Params::Ultra_Dynamic_Weather_C_Compress_DLWE_Snow Parms{};

	Parms.Location = std::move(Location);
	Parms.Size = Size;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.ConstructionScript_Function
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Run_By_Counterpart_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::ConstructionScript_Function(bool Run_By_Counterpart_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "ConstructionScript_Function");

	Params::Ultra_Dynamic_Weather_C_ConstructionScript_Function Parms{};

	Parms.Run_By_Counterpart_0 = Run_By_Counterpart_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Convert Temperature Scale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EUDS_TemperatureType                    In_Scale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EUDS_TemperatureType                    Out_Scale                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Relative_Degrees                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Snap                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Convert_Temperature_Scale(double Input, EUDS_TemperatureType In_Scale, EUDS_TemperatureType Out_Scale, bool Relative_Degrees, bool Snap, double* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Convert Temperature Scale");

	Params::Ultra_Dynamic_Weather_C_Convert_Temperature_Scale Parms{};

	Parms.Input = Input;
	Parms.In_Scale = In_Scale;
	Parms.Out_Scale = Out_Scale;
	Parms.Relative_Degrees = Relative_Degrees;
	Parms.Snap = Snap;

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Copy Weather State
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUDS_Weather_Settings_C*          Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UUDS_Weather_Settings_C*          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Set_Material_Effects                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Copy_Weather_State(class UUDS_Weather_Settings_C* Source, class UUDS_Weather_Settings_C* Target, bool Set_Material_Effects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Copy Weather State");

	Params::Ultra_Dynamic_Weather_C_Copy_Weather_State Parms{};

	Parms.Source = Source;
	Parms.Target = Target;
	Parms.Set_Material_Effects = Set_Material_Effects;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Create Cloud Reference Array
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Create_Cloud_Reference_Array()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Create Cloud Reference Array");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Create Weather State Objects
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Create_Weather_State_Objects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Create Weather State Objects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Current Dust Velocity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Current_Dust_Velocity(struct FVector* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Current Dust Velocity");

	Params::Ultra_Dynamic_Weather_C_Current_Dust_Velocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Current Lightning Period and Status
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Lightning_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Period                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enabled                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Current_Lightning_Period_and_Status(double Param_Lightning_0, double* Period, bool* Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Current Lightning Period and Status");

	Params::Ultra_Dynamic_Weather_C_Current_Lightning_Period_and_Status Parms{};

	Parms.Param_Lightning_0 = Param_Lightning_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Period != nullptr)
		*Period = Parms.Period;

	if (Enabled != nullptr)
		*Enabled = Parms.Enabled;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Current Normalized Wind Direction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Wind_Vector                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Current_Normalized_Wind_Direction(struct FVector* Wind_Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Current Normalized Wind Direction");

	Params::Ultra_Dynamic_Weather_C_Current_Normalized_Wind_Direction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Wind_Vector != nullptr)
		*Wind_Vector = std::move(Parms.Wind_Vector);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Current PPWF Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Current_PPWF_Intensity(double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Current PPWF Intensity");

	Params::Ultra_Dynamic_Weather_C_Current_PPWF_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Current Rain Snow Spawn Rate
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Spawn_Rate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Wind_Bonus                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Current_Rain_Snow_Spawn_Rate(double Intensity, double Spawn_Rate, double Wind_Bonus, double* Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Current Rain Snow Spawn Rate");

	Params::Ultra_Dynamic_Weather_C_Current_Rain_Snow_Spawn_Rate Parms{};

	Parms.Intensity = Intensity;
	Parms.Spawn_Rate = Spawn_Rate;
	Parms.Wind_Bonus = Wind_Bonus;

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Current Rain Velocity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Current_Rain_Velocity(struct FVector* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Current Rain Velocity");

	Params::Ultra_Dynamic_Weather_C_Current_Rain_Velocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Current Snow Velocity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Current_Snow_Velocity(struct FVector* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Current Snow Velocity");

	Params::Ultra_Dynamic_Weather_C_Current_Snow_Velocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Current Wind Debris Velocity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Current_Wind_Debris_Velocity(struct FVector* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Current Wind Debris Velocity");

	Params::Ultra_Dynamic_Weather_C_Current_Wind_Debris_Velocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Currently Cloudy
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Yes                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Currently_Cloudy(bool* Yes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Currently Cloudy");

	Params::Ultra_Dynamic_Weather_C_Currently_Cloudy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Yes != nullptr)
		*Yes = Parms.Yes;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Currently Dusty
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Yes                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Currently_Dusty(bool* Yes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Currently Dusty");

	Params::Ultra_Dynamic_Weather_C_Currently_Dusty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Yes != nullptr)
		*Yes = Parms.Yes;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Currently Raining
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Yes                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Currently_Raining(bool* Yes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Currently Raining");

	Params::Ultra_Dynamic_Weather_C_Currently_Raining Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Yes != nullptr)
		*Yes = Parms.Yes;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Currently Snowing
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Yes                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Currently_Snowing(bool* Yes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Currently Snowing");

	Params::Ultra_Dynamic_Weather_C_Currently_Snowing Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Yes != nullptr)
		*Yes = Parms.Yes;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Delta Time with Tick Set
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Delta                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Delta_Time_with_Tick_Set(double* Delta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Delta Time with Tick Set");

	Params::Ultra_Dynamic_Weather_C_Delta_Time_with_Tick_Set Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Delta != nullptr)
		*Delta = Parms.Delta;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Destroy Close Thunder Component
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Destroy_Close_Thunder_Component(class USceneComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Destroy Close Thunder Component");

	Params::Ultra_Dynamic_Weather_C_Destroy_Close_Thunder_Component Parms{};

	Parms.Component = Component;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Distant Thunder Sound Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Int                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Distant_Thunder_Sound_Intensity(double* Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Distant Thunder Sound Intensity");

	Params::Ultra_Dynamic_Weather_C_Distant_Thunder_Sound_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Int != nullptr)
		*Int = Parms.Int;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.DLWE Compression Brush
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Resolution                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Spread                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Corner_Position                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Brush_Size                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::DLWE_Compression_Brush(const struct FVector& Location, double Size, int32 Resolution, double Spread, struct FVector2D* Corner_Position, struct FVector2D* Brush_Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "DLWE Compression Brush");

	Params::Ultra_Dynamic_Weather_C_DLWE_Compression_Brush Parms{};

	Parms.Location = std::move(Location);
	Parms.Size = Size;
	Parms.Resolution = Resolution;
	Parms.Spread = Spread;

	UObject::ProcessEvent(Func, &Parms);

	if (Corner_Position != nullptr)
		*Corner_Position = std::move(Parms.Corner_Position);

	if (Brush_Size != nullptr)
		*Brush_Size = std::move(Parms.Brush_Size);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.DLWE Render Target Area
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Area                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::DLWE_Render_Target_Area(double* Area)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "DLWE Render Target Area");

	Params::Ultra_Dynamic_Weather_C_DLWE_Render_Target_Area Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Area != nullptr)
		*Area = Parms.Area;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.DLWE_Render Target Mapping
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     Mapping                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::DLWE_Render_Target_Mapping(struct FLinearColor* Mapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "DLWE_Render Target Mapping");

	Params::Ultra_Dynamic_Weather_C_DLWE_Render_Target_Mapping Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mapping != nullptr)
		*Mapping = std::move(Parms.Mapping);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Does DLWE Need Recentering
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Needs_X_Axis_Recenter                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Needs_Y_Axis_Recenter                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Does_DLWE_Need_Recentering(bool* Needs_X_Axis_Recenter, bool* Needs_Y_Axis_Recenter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Does DLWE Need Recentering");

	Params::Ultra_Dynamic_Weather_C_Does_DLWE_Need_Recentering Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Needs_X_Axis_Recenter != nullptr)
		*Needs_X_Axis_Recenter = Parms.Needs_X_Axis_Recenter;

	if (Needs_Y_Axis_Recenter != nullptr)
		*Needs_Y_Axis_Recenter = Parms.Needs_Y_Axis_Recenter;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Draw Weather Mask Brush Target
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Use_Editor_Location                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Draw_Weather_Mask_Brush_Target(bool Use_Editor_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Draw Weather Mask Brush Target");

	Params::Ultra_Dynamic_Weather_C_Draw_Weather_Mask_Brush_Target Parms{};

	Parms.Use_Editor_Location = Use_Editor_Location;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Draw Weather Override Volume Target
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Draw_Weather_Override_Volume_Target()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Draw Weather Override Volume Target");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Sand Clearing__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Sand_Clearing__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Sand Clearing__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Sand Forming__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Sand_Forming__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Sand Forming__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.End Lightning Flash
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::End_Lightning_Flash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "End Lightning Flash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.ExecuteUbergraph_Ultra_Dynamic_Weather
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::ExecuteUbergraph_Ultra_Dynamic_Weather(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "ExecuteUbergraph_Ultra_Dynamic_Weather");

	Params::Ultra_Dynamic_Weather_C_ExecuteUbergraph_Ultra_Dynamic_Weather Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Fade DLWE Target Over Time
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Fade_DLWE_Target_Over_Time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Fade DLWE Target Over Time");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Filter Probability Map
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class UUDS_Weather_Settings_C*, double>Probability_Map                                        (BlueprintVisible, BlueprintReadOnly, Parm)
// class UUDS_Weather_Settings_C*          Current_Random_Type                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TMap<class UUDS_Weather_Settings_C*, double>Filtered_Probability_Map                               (Parm, OutParm)

void AUltra_Dynamic_Weather_C::Filter_Probability_Map(const TMap<class UUDS_Weather_Settings_C*, double>& Probability_Map, class UUDS_Weather_Settings_C* Current_Random_Type, TMap<class UUDS_Weather_Settings_C*, double>* Filtered_Probability_Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Filter Probability Map");

	Params::Ultra_Dynamic_Weather_C_Filter_Probability_Map Parms{};

	Parms.Probability_Map = std::move(Probability_Map);
	Parms.Current_Random_Type = Current_Random_Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Filtered_Probability_Map != nullptr)
		*Filtered_Probability_Map = std::move(Parms.Filtered_Probability_Map);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Finished Raining__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Finished_Raining__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Finished Raining__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Finished Snowing__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Finished_Snowing__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Finished Snowing__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Flash Lightning
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_Custom_Lightning_Location_0                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Custom_Lightning_Location_0                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Custom_Target_Location                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Flash_Lightning(double Angle, bool Use_Custom_Lightning_Location_0, const struct FVector& Custom_Lightning_Location_0, const struct FVector& Custom_Target_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Flash Lightning");

	Params::Ultra_Dynamic_Weather_C_Flash_Lightning Parms{};

	Parms.Angle = Angle;
	Parms.Use_Custom_Lightning_Location_0 = Use_Custom_Lightning_Location_0;
	Parms.Custom_Lightning_Location_0 = std::move(Custom_Lightning_Location_0);
	Parms.Custom_Target_Location = std::move(Custom_Target_Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Force All Clients Cache
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Force_All_Clients_Cache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Force All Clients Cache");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Force Tick
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Force_Tick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Force Tick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Cached Float
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDW_CachedProperties                   Property                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Cached_Float(EUDW_CachedProperties Property, double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Cached Float");

	Params::Ultra_Dynamic_Weather_C_Get_Cached_Float Parms{};

	Parms.Property = Property;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Cached Vector
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDW_CachedProperties                   Property                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Cached_Vector(EUDW_CachedProperties Property, struct FVector* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Cached Vector");

	Params::Ultra_Dynamic_Weather_C_Get_Cached_Vector Parms{};

	Parms.Property = Property;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = std::move(Parms.Value);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Close Thunder Sound Occlusion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Volume                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  LPF                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Close_Thunder_Sound_Occlusion(double* Volume, double* LPF)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Close Thunder Sound Occlusion");

	Params::Ultra_Dynamic_Weather_C_Get_Close_Thunder_Sound_Occlusion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Volume != nullptr)
		*Volume = Parms.Volume;

	if (LPF != nullptr)
		*LPF = Parms.LPF;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Current Temperature
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Apply_Interior_Temperature                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUDS_Weather_Settings_C*          Custom_Weather_State_Object                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Celsius                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Fahrenheit                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Current_Temperature(bool Apply_Interior_Temperature, class UUDS_Weather_Settings_C* Custom_Weather_State_Object, double* Celsius, double* Fahrenheit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Current Temperature");

	Params::Ultra_Dynamic_Weather_C_Get_Current_Temperature Parms{};

	Parms.Apply_Interior_Temperature = Apply_Interior_Temperature;
	Parms.Custom_Weather_State_Object = Custom_Weather_State_Object;

	UObject::ProcessEvent(Func, &Parms);

	if (Celsius != nullptr)
		*Celsius = Parms.Celsius;

	if (Fahrenheit != nullptr)
		*Fahrenheit = Parms.Fahrenheit;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Display Name for Current Weather
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           As_String                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// EUDS_Weather_Display_Names              As_Enumerator                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Display_Name_for_Current_Weather(class FString* As_String, EUDS_Weather_Display_Names* As_Enumerator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Display Name for Current Weather");

	Params::Ultra_Dynamic_Weather_C_Get_Display_Name_for_Current_Weather Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (As_String != nullptr)
		*As_String = std::move(Parms.As_String);

	if (As_Enumerator != nullptr)
		*As_Enumerator = Parms.As_Enumerator;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Intended Cloud Direction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Intended_Cloud_Direction_0                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Intended_Cloud_Direction(double* Intended_Cloud_Direction_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Intended Cloud Direction");

	Params::Ultra_Dynamic_Weather_C_Get_Intended_Cloud_Direction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Intended_Cloud_Direction_0 != nullptr)
		*Intended_Cloud_Direction_0 = Parms.Intended_Cloud_Direction_0;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Intended Cloud Speed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Intended_Cloud_Speed_0                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Intended_Cloud_Speed(double* Intended_Cloud_Speed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Intended Cloud Speed");

	Params::Ultra_Dynamic_Weather_C_Get_Intended_Cloud_Speed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Intended_Cloud_Speed_0 != nullptr)
		*Intended_Cloud_Speed_0 = Parms.Intended_Cloud_Speed_0;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Intended Water Level
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Using_Water_Level                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Water_Level_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Intended_Water_Level(bool* Using_Water_Level, double* Water_Level_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Intended Water Level");

	Params::Ultra_Dynamic_Weather_C_Get_Intended_Water_Level Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Using_Water_Level != nullptr)
		*Using_Water_Level = Parms.Using_Water_Level;

	if (Water_Level_0 != nullptr)
		*Water_Level_0 = Parms.Water_Level_0;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Starting Weather Override Volumes
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Get_Starting_Weather_Override_Volumes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Starting Weather Override Volumes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get State for Saving
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FUDS_and_UDW_State               UDW_State                                              (Parm, OutParm, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_State_for_Saving(struct FUDS_and_UDW_State* UDW_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get State for Saving");

	Params::Ultra_Dynamic_Weather_C_Get_State_for_Saving Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UDW_State != nullptr)
		*UDW_State = std::move(Parms.UDW_State);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Updated Control Point Location
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Get_Updated_Control_Point_Location()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Updated Control Point Location");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Weather Particle Collision Channel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECollisionChannel                       Channel                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Weather_Particle_Collision_Channel(ECollisionChannel* Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Weather Particle Collision Channel");

	Params::Ultra_Dynamic_Weather_C_Get_Weather_Particle_Collision_Channel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Channel != nullptr)
		*Channel = Parms.Channel;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Getting Cloudy__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Getting_Cloudy__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Getting Cloudy__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Global Lightning Internal
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Global_Lightning_Internal(double Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Global Lightning Internal");

	Params::Ultra_Dynamic_Weather_C_Global_Lightning_Internal Parms{};

	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Global Lightning Timer
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Global_Lightning_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Global Lightning Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Hard Refresh Cached Properties
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Hard_Refresh_Cached_Properties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Hard Refresh Cached Properties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Increment Cache Timer
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Increment_Cache_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Increment Cache Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Initialize Occlusion
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Initialize_Occlusion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Initialize Occlusion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Initialize Weather
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Initialize_Weather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Initialize Weather");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Initialize Weather Mask Target
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Initialize_Weather_Mask_Target()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Initialize Weather Mask Target");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Initialize Weather Override Volume Target
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Initialize_Weather_Override_Volume_Target()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Initialize Weather Override Volume Target");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Invalidate VHFM Level
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Threshold                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Buffer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Current                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Continue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Invalidate_VHFM_Level(double Threshold, double Distance, struct FVector& Buffer, const struct FVector& Current, bool* Continue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Invalidate VHFM Level");

	Params::Ultra_Dynamic_Weather_C_Invalidate_VHFM_Level Parms{};

	Parms.Threshold = Threshold;
	Parms.Distance = Distance;
	Parms.Buffer = std::move(Buffer);
	Parms.Current = std::move(Current);

	UObject::ProcessEvent(Func, &Parms);

	Buffer = std::move(Parms.Buffer);

	if (Continue != nullptr)
		*Continue = Parms.Continue;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Invalidate VHFM With Material States
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Invalidate_VHFM_With_Material_States()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Invalidate VHFM With Material States");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Is Cached Property Changing
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EUDW_CachedProperties                   Property                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Yes                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Is_Cached_Property_Changing(EUDW_CachedProperties Property, bool* Yes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Is Cached Property Changing");

	Params::Ultra_Dynamic_Weather_C_Is_Cached_Property_Changing Parms{};

	Parms.Property = Property;

	UObject::ProcessEvent(Func, &Parms);

	if (Yes != nullptr)
		*Yes = Parms.Yes;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Is Point in DLWE Space
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Yes                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Is_Point_in_DLWE_Space(const struct FVector& Point, bool* Yes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Is Point in DLWE Space");

	Params::Ultra_Dynamic_Weather_C_Is_Point_in_DLWE_Space Parms{};

	Parms.Point = std::move(Point);

	UObject::ProcessEvent(Func, &Parms);

	if (Yes != nullptr)
		*Yes = Parms.Yes;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Lerp Between Weather States
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUDS_Weather_Settings_C*          A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UUDS_Weather_Settings_C*          B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUDS_Weather_Settings_C*          Target_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Set_Material_Effects                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_Bias_for_Material_Effects                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Lerp_Between_Weather_States(class UUDS_Weather_Settings_C* A, class UUDS_Weather_Settings_C* B, double Alpha, class UUDS_Weather_Settings_C* Target_State, bool Set_Material_Effects, bool Use_Bias_for_Material_Effects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Lerp Between Weather States");

	Params::Ultra_Dynamic_Weather_C_Lerp_Between_Weather_States Parms{};

	Parms.A = A;
	Parms.B = B;
	Parms.Alpha = Alpha;
	Parms.Target_State = Target_State;
	Parms.Set_Material_Effects = Set_Material_Effects;
	Parms.Use_Bias_for_Material_Effects = Use_Bias_for_Material_Effects;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Lerp Yaw Angles
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Angle_A                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Angle_B                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Lerp_Yaw_Angles(double Angle_A, double Angle_B, double Alpha, double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Lerp Yaw Angles");

	Params::Ultra_Dynamic_Weather_C_Lerp_Yaw_Angles Parms{};

	Parms.Angle_A = Angle_A;
	Parms.Angle_B = Angle_B;
	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Light Rain Sound Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Int                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Light_Rain_Sound_Intensity(double* Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Light Rain Sound Intensity");

	Params::Ultra_Dynamic_Weather_C_Light_Rain_Sound_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Int != nullptr)
		*Int = Parms.Int;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Lightning Bolt Target Offset
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Lightning_Bolt_Target_Offset(struct FVector* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Lightning Bolt Target Offset");

	Params::Ultra_Dynamic_Weather_C_Lightning_Bolt_Target_Offset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Lightning Distance Range
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Range                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Lightning_Distance_Range(double* Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Lightning Distance Range");

	Params::Ultra_Dynamic_Weather_C_Lightning_Distance_Range Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Range != nullptr)
		*Range = Parms.Range;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Lightning Flash Location
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Loc                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Lightning_Flash_Location(struct FVector* Loc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Lightning Flash Location");

	Params::Ultra_Dynamic_Weather_C_Lightning_Flash_Location Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Loc != nullptr)
		*Loc = std::move(Parms.Loc);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Lightning World Height
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Height                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Lightning_World_Height(double* Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Lightning World Height");

	Params::Ultra_Dynamic_Weather_C_Lightning_World_Height Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Height != nullptr)
		*Height = Parms.Height;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Load Required Assets
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Load_Required_Assets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Load Required Assets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Local Lightning Internal
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AWeather_Override_Volume_C*       Volume                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Local_Lightning_Internal(class AWeather_Override_Volume_C* Volume, double Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Local Lightning Internal");

	Params::Ultra_Dynamic_Weather_C_Local_Lightning_Internal Parms{};

	Parms.Volume = Volume;
	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Make Manual State
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Make_Manual_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Make Manual State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Make Outdoor Sound Mix
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Make_Outdoor_Sound_Mix()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Make Outdoor Sound Mix");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.PPWF Velocity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AUltra_Dynamic_Weather_C::PPWF_Velocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "PPWF Velocity");

	Params::Ultra_Dynamic_Weather_C_PPWF_Velocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Print Current Status To Screen
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Print_Current_Status_To_Screen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Print Current Status To Screen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Query Project Settings
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Query_Project_Settings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Query Project Settings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Rain Sound Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Int                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Rain_Sound_Intensity(double* Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Rain Sound Intensity");

	Params::Ultra_Dynamic_Weather_C_Rain_Sound_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Int != nullptr)
		*Int = Parms.Int;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "ReceiveEndPlay");

	Params::Ultra_Dynamic_Weather_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "ReceiveTick");

	Params::Ultra_Dynamic_Weather_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Recenter DLWE Render Target
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextureRenderTarget2D*           Render_Target                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ETextureRenderTargetFormat              Format                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Clear_Color                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               EdgeFade_Material                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Resolution                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Draw_Edge_Fade                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Recenter_DLWE_Render_Target(class UTextureRenderTarget2D* Render_Target, ETextureRenderTargetFormat Format, const struct FLinearColor& Clear_Color, class UMaterialInterface* EdgeFade_Material, int32 Resolution, bool Draw_Edge_Fade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Recenter DLWE Render Target");

	Params::Ultra_Dynamic_Weather_C_Recenter_DLWE_Render_Target Parms{};

	Parms.Render_Target = Render_Target;
	Parms.Format = Format;
	Parms.Clear_Color = std::move(Clear_Color);
	Parms.EdgeFade_Material = EdgeFade_Material;
	Parms.Resolution = Resolution;
	Parms.Draw_Edge_Fade = Draw_Edge_Fade;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Recycle Render Targets
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Recycle_Render_Targets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Recycle Render Targets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Remove Old Drawing Actors
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Remove_Old_Drawing_Actors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Remove Old Drawing Actors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Report Removal of Drawing Actor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Report_Removal_of_Drawing_Actor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Report Removal of Drawing Actor");

	Params::Ultra_Dynamic_Weather_C_Report_Removal_of_Drawing_Actor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Reset All Emitters
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Reset_All_Emitters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Reset All Emitters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Restart Random Weather
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Restart_Random_Weather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Restart Random Weather");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Ripple DLWE Puddle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Strength                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Ripple_DLWE_Puddle(const struct FVector& Location, double Size, double Strength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Ripple DLWE Puddle");

	Params::Ultra_Dynamic_Weather_C_Ripple_DLWE_Puddle Parms{};

	Parms.Location = std::move(Location);
	Parms.Size = Size;
	Parms.Strength = Strength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Sample Current Sound Occlusion Values
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NonMinusDirectional_Occlusion                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XPlus_Occlusion                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  YPlus_Occlusion                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XMinus_Occlusion                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  YMinus_Occlusion                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Sample_Current_Sound_Occlusion_Values(double* NonMinusDirectional_Occlusion, double* XPlus_Occlusion, double* YPlus_Occlusion, double* XMinus_Occlusion, double* YMinus_Occlusion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Sample Current Sound Occlusion Values");

	Params::Ultra_Dynamic_Weather_C_Sample_Current_Sound_Occlusion_Values Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NonMinusDirectional_Occlusion != nullptr)
		*NonMinusDirectional_Occlusion = Parms.NonMinusDirectional_Occlusion;

	if (XPlus_Occlusion != nullptr)
		*XPlus_Occlusion = Parms.XPlus_Occlusion;

	if (YPlus_Occlusion != nullptr)
		*YPlus_Occlusion = Parms.YPlus_Occlusion;

	if (XMinus_Occlusion != nullptr)
		*XMinus_Occlusion = Parms.XMinus_Occlusion;

	if (YMinus_Occlusion != nullptr)
		*YMinus_Occlusion = Parms.YMinus_Occlusion;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Scale Cache Period
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AUltra_Dynamic_Weather_C::Scale_Cache_Period()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Scale Cache Period");

	Params::Ultra_Dynamic_Weather_C_Scale_Cache_Period Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Set Cache Alpha
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Set_Cache_Alpha()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Set Cache Alpha");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Set Project Mode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_Project_Mode                       Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Set_Project_Mode(EUDS_Project_Mode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Set Project Mode");

	Params::Ultra_Dynamic_Weather_C_Set_Project_Mode Parms{};

	Parms.Mode = Mode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Set Replicated Old Weather State
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Set_Replicated_Old_Weather_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Set Replicated Old Weather State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Set Season
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Set_Season()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Set Season");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Set Shared Weather Particle Parameters
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNiagaraComponent*                System                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Set_Shared_Weather_Particle_Parameters(class UNiagaraComponent* System)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Set Shared Weather Particle Parameters");

	Params::Ultra_Dynamic_Weather_C_Set_Shared_Weather_Particle_Parameters Parms{};

	Parms.System = System;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Set up Post Process Wind Fog
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Set_up_Post_Process_Wind_Fog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Set up Post Process Wind Fog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Set Up Rainbow
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Set_Up_Rainbow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Set Up Rainbow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Set Up Rainbow MID
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Set_Up_Rainbow_MID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Set Up Rainbow MID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Size Cache Arrays
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Size_Cache_Arrays()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Size Cache Arrays");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Sort Brushes by Height
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AWeather_Mask_Brush_C*>    Brushes                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class AWeather_Mask_Brush_C*>    Sorted_Brushes                                         (Parm, OutParm)

void AUltra_Dynamic_Weather_C::Sort_Brushes_by_Height(TArray<class AWeather_Mask_Brush_C*>& Brushes, TArray<class AWeather_Mask_Brush_C*>* Sorted_Brushes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Sort Brushes by Height");

	Params::Ultra_Dynamic_Weather_C_Sort_Brushes_by_Height Parms{};

	Parms.Brushes = std::move(Brushes);

	UObject::ProcessEvent(Func, &Parms);

	Brushes = std::move(Parms.Brushes);

	if (Sorted_Brushes != nullptr)
		*Sorted_Brushes = std::move(Parms.Sorted_Brushes);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Sort Weather Override Volumes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Sort_Weather_Override_Volumes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Sort Weather Override Volumes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C. Update DLWE Targets
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    First_Run                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::_Update_DLWE_Targets(bool First_Run)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", " Update DLWE Targets");

	Params::Ultra_Dynamic_Weather_C__Update_DLWE_Targets Parms{};

	Parms.First_Run = First_Run;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Start Screen Droplets
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Start_Screen_Droplets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Start Screen Droplets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Started Raining__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Started_Raining__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Started Raining__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Started Snowing__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Started_Snowing__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Started Snowing__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Test Actor for Weather Exposure
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Test_Colliding_Components_Only                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUDS_Weather_Settings_C*          Custom_Weather_State_Object                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Rain_Exposure                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Snow_Exposure                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Wind_Exposure                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Dust_Exposure                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Test_Actor_for_Weather_Exposure(class AActor* Actor, bool Test_Colliding_Components_Only, class UUDS_Weather_Settings_C* Custom_Weather_State_Object, double* Rain_Exposure, double* Snow_Exposure, double* Wind_Exposure, double* Dust_Exposure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Test Actor for Weather Exposure");

	Params::Ultra_Dynamic_Weather_C_Test_Actor_for_Weather_Exposure Parms{};

	Parms.Actor = Actor;
	Parms.Test_Colliding_Components_Only = Test_Colliding_Components_Only;
	Parms.Custom_Weather_State_Object = Custom_Weather_State_Object;

	UObject::ProcessEvent(Func, &Parms);

	if (Rain_Exposure != nullptr)
		*Rain_Exposure = Parms.Rain_Exposure;

	if (Snow_Exposure != nullptr)
		*Snow_Exposure = Parms.Snow_Exposure;

	if (Wind_Exposure != nullptr)
		*Wind_Exposure = Parms.Wind_Exposure;

	if (Dust_Exposure != nullptr)
		*Dust_Exposure = Parms.Dust_Exposure;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Test Component for Wind Exposure
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  Wind_Exposure                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Test_Component_for_Wind_Exposure(class UPrimitiveComponent* Component, double* Wind_Exposure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Test Component for Wind Exposure");

	Params::Ultra_Dynamic_Weather_C_Test_Component_for_Wind_Exposure Parms{};

	Parms.Component = Component;

	UObject::ProcessEvent(Func, &Parms);

	if (Wind_Exposure != nullptr)
		*Wind_Exposure = Parms.Wind_Exposure;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Tick Lightning Flash
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Tick_Lightning_Flash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Tick Lightning Flash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Timed Override with New Changes
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Timed_Override_with_New_Changes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Timed Override with New Changes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Trace Bounds for Exposure Values
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Bounds_Origin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Bounds_Extent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Actors_to_Ignore                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Test_Weather                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Exposure_Value                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Trace_Bounds_for_Exposure_Values(const struct FVector& Bounds_Origin, const struct FVector& Bounds_Extent, TArray<class AActor*>& Actors_to_Ignore, bool Test_Weather, double* Exposure_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Trace Bounds for Exposure Values");

	Params::Ultra_Dynamic_Weather_C_Trace_Bounds_for_Exposure_Values Parms{};

	Parms.Bounds_Origin = std::move(Bounds_Origin);
	Parms.Bounds_Extent = std::move(Bounds_Extent);
	Parms.Actors_to_Ignore = std::move(Actors_to_Ignore);
	Parms.Test_Weather = Test_Weather;

	UObject::ProcessEvent(Func, &Parms);

	Actors_to_Ignore = std::move(Parms.Actors_to_Ignore);

	if (Exposure_Value != nullptr)
		*Exposure_Value = Parms.Exposure_Value;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Active Dust Parameters
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Active_Dust_Parameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Active Dust Parameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Active Rain Parameters
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Active_Rain_Parameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Active Rain Parameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Active Snow Parameters
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Active_Snow_Parameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Active Snow Parameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Active Variables
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Active_Variables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Active Variables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Active Wind Debris Parameters
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Active_Wind_Debris_Parameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Active Wind Debris Parameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Audio Component Activity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAudioComponent*                  Tested_Component                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<class UAudioComponent*>          Affected_Components                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// double                                  Current_Sound_Intensity                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Start_Randomization                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enable_Bool                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Update_Audio_Component_Activity(class UAudioComponent* Tested_Component, TArray<class UAudioComponent*>& Affected_Components, double Current_Sound_Intensity, double Start_Randomization, bool Enable_Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Audio Component Activity");

	Params::Ultra_Dynamic_Weather_C_Update_Audio_Component_Activity Parms{};

	Parms.Tested_Component = Tested_Component;
	Parms.Affected_Components = std::move(Affected_Components);
	Parms.Current_Sound_Intensity = Current_Sound_Intensity;
	Parms.Start_Randomization = Start_Randomization;
	Parms.Enable_Bool = Enable_Bool;

	UObject::ProcessEvent(Func, &Parms);

	Affected_Components = std::move(Parms.Affected_Components);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Current Global and Local Weather State
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Current_Global_and_Local_Weather_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Current Global and Local Weather State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Current Material Effects
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Current_Material_Effects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Current Material Effects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update DLWE Component States
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_DLWE_Component_States()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update DLWE Component States");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update DLWE Parameters
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_DLWE_Parameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update DLWE Parameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update DLWE Puddle Ripples
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_DLWE_Puddle_Ripples()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update DLWE Puddle Ripples");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update DLWE Snow Compressions
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_DLWE_Snow_Compressions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update DLWE Snow Compressions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update DLWE State__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_DLWE_Mode                          Current_Mode                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Render_Target_Center                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Mapping_Space                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Update_DLWE_State__DelegateSignature(EUDS_DLWE_Mode Current_Mode, const struct FVector& Render_Target_Center, const struct FVector& Mapping_Space)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update DLWE State__DelegateSignature");

	Params::Ultra_Dynamic_Weather_C_Update_DLWE_State__DelegateSignature Parms{};

	Parms.Current_Mode = Current_Mode;
	Parms.Render_Target_Center = std::move(Render_Target_Center);
	Parms.Mapping_Space = std::move(Mapping_Space);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Enabled Sound Components
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Enabled_Sound_Components()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Enabled Sound Components");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Fog Particle Parameters
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFXSystemComponent*               Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  Max_Particle_Percentage                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Weather_Intensity                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Particle_Intensity                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Update_Fog_Particle_Parameters(class UFXSystemComponent* Target, double Max_Particle_Percentage, double Weather_Intensity, double Particle_Intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Fog Particle Parameters");

	Params::Ultra_Dynamic_Weather_C_Update_Fog_Particle_Parameters Parms{};

	Parms.Target = Target;
	Parms.Max_Particle_Percentage = Max_Particle_Percentage;
	Parms.Weather_Intensity = Weather_Intensity;
	Parms.Particle_Intensity = Particle_Intensity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Material Effect Parameters
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Material_Effect_Parameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Material Effect Parameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Material Effects
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Material_Effects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Material Effects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Obscured Lightning Glow
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Obscured_Lightning_Glow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Obscured Lightning Glow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Old State With Replicated Variables
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Old_State_With_Replicated_Variables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Old State With Replicated Variables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Outdoor Sound Mix
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Outdoor_Sound_Mix()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Outdoor Sound Mix");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Post Process Wind Fog
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Post_Process_Wind_Fog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Post Process Wind Fog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Rainbow
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Rainbow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Rainbow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Rainbow Intensity
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Rainbow_Intensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Rainbow Intensity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Screen Droplets
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Screen_Droplets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Screen Droplets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Season
// (Protected, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Season()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Season");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Static Variables
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Static_Variables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Static Variables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Weather Settings from UDS
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Cloud_Coverage_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Fog_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Dust_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Update_Weather_Settings_from_UDS(double Cloud_Coverage_0, double Param_Fog_0, double Param_Dust_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Weather Settings from UDS");

	Params::Ultra_Dynamic_Weather_C_Update_Weather_Settings_from_UDS Parms{};

	Parms.Cloud_Coverage_0 = Cloud_Coverage_0;
	Parms.Param_Fog_0 = Param_Fog_0;
	Parms.Param_Dust_0 = Param_Dust_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update WOV Target Coordinates
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Use_Editor_Location                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Update_WOV_Target_Coordinates(bool Use_Editor_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update WOV Target Coordinates");

	Params::Ultra_Dynamic_Weather_C_Update_WOV_Target_Coordinates Parms{};

	Parms.Use_Editor_Location = Use_Editor_Location;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Weather Display Name Changed__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_Weather_Display_Names              Weather_Name                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Weather_Display_Name_Changed__DelegateSignature(EUDS_Weather_Display_Names Weather_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Weather Display Name Changed__DelegateSignature");

	Params::Ultra_Dynamic_Weather_C_Weather_Display_Name_Changed__DelegateSignature Parms{};

	Parms.Weather_Name = Weather_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Wind Rotation
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         Rot                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AUltra_Dynamic_Weather_C::Wind_Rotation(struct FRotator* Rot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Wind Rotation");

	Params::Ultra_Dynamic_Weather_C_Wind_Rotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rot != nullptr)
		*Rot = std::move(Parms.Rot);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Wind Sound Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Int                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Wind_Sound_Intensity(double* Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Wind Sound Intensity");

	Params::Ultra_Dynamic_Weather_C_Wind_Sound_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Int != nullptr)
		*Int = Parms.Int;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Wind Whistling Sound Intensity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Int                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Wind_Whistling_Sound_Intensity(double* Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Wind Whistling Sound Intensity");

	Params::Ultra_Dynamic_Weather_C_Wind_Whistling_Sound_Intensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Int != nullptr)
		*Int = Parms.Int;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Rainbow MID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Rainbow_Enabled                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Rainbow_MID(bool* Rainbow_Enabled, class UMaterialInstanceDynamic** Mid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Rainbow MID");

	Params::Ultra_Dynamic_Weather_C_Get_Rainbow_MID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rainbow_Enabled != nullptr)
		*Rainbow_Enabled = Parms.Rainbow_Enabled;

	if (Mid != nullptr)
		*Mid = Parms.Mid;
}

}

