#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PC_Bodycam

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Team_structs.hpp"
#include "GameMode_structs.hpp"
#include "SteamCorePro_structs.hpp"
#include "E_Emote_structs.hpp"
#include "GM_Statue_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PC_Bodycam.PC_Bodycam_C
// 0x0128 (0x0978 - 0x0850)
class APC_Bodycam_C final : public APlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0850(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ChatComponent_C*                    BP_ChatComponent;                                  // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_MenuControllerComponent_C*          BP_MenuControllerComponent;                        // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UObject*                                UI_GameMenu;                                       // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UHUD_Character_C*                       HUD_Character;                                     // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitingState;                                      // 0x0878(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_879[0x7];                                      // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_TransitionLevels_C*                HUD_Transition;                                    // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          HasRespawn_;                                       // 0x0888(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_889[0x7];                                      // 0x0889(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_ScoreBoardMenu_C*                  HUD_ScoreBoard;                                    // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 SteamID__Server_;                                  // 0x0898(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class AGT_Bodycam_C*                          GT_Bodycam;                                        // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_Team                                        Team;                                              // 0x08B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B1[0x7];                                      // 0x08B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_Warning_C*                         HUD_Warning;                                       // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         SteamIDMuted;                                      // 0x08C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Kick_Reason;                                       // 0x08D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UKickOverlay_C*                         KickOverlay;                                       // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         PlayerVoteToKick;                                  // 0x08F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAudioComponent*                        EndRoundSounds;                                    // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         RankScore;                                         // 0x0908(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rank_;                                             // 0x090C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CurrentRank;                                       // 0x0910(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UVOIPTalker*                            Voip;                                              // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTalking;                                         // 0x0930(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_931[0x7];                                      // 0x0931(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_Rankinfo_C*                        WinHud;                                            // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         AttempsToSpawn;                                    // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_944[0x4];                                      // 0x0944(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PlayerWhoITriedToKick;                             // 0x0948(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsSwapingGun;                                      // 0x0958(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_959[0x3];                                      // 0x0959(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CurrentWeaponsGunGame;                             // 0x095C(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_964[0x4];                                      // 0x0964(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_ScoreBoardMenu_C*                  TeamMenu;                                          // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         FriendCount;                                       // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AssignTeam__Server_(E_Team Team_0);
	void BreakTimer();
	void BreakTimer__Client_();
	void CanCreateKickVote(bool* CanCreateKickVote_);
	void CanKickThisPlayer_(const class FString& PlayerID, bool* True_);
	void ClearMap();
	void ClearMap__Client_();
	void CustomEvent_1(E_Emote EmoteToPlay);
	void Event_Begin_Play_Chat();
	void Event_Ragdoll_End();
	void EventRagdollStart();
	void ExecuteUbergraph_PC_Bodycam(int32 EntryPoint);
	void Find_Best_Spawn_Point(const class FString& Name_0, double SpawnPointTreshold, struct FTransform* FarestTransform_return);
	void FindPlayerSpawn(const class FString& Name_0, struct FTransform* SpawnTransform);
	void FocusControlOnGame();
	void Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component);
	void Get_Stamina(double* Stamina);
	void GetBlured(double* Blured);
	void GetBurnedRef(class USceneComponent** BurnedMesh);
	void GetCurrentRank(int32* RankScore_0, int32* Rank__0, class FText* CurrentRank_0);
	void GetFlashBangEffect(double* FlashEffect);
	void GetFriensTeam(E_Team* Team_0);
	void GetGameMode(struct FSTR_GamemodeWinInfo* GameMode);
	void GetHealth(double* Health);
	void GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote);
	void GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController);
	void GetMutePlayer(TArray<class FString>* MutePlayer);
	void GetNewRank(class FText* Name_0, class UTexture2D** Image, int32* RankScore_0, int32* RankPosition, int32* RankDivision, double* PreviousRankProgress, double* RankProgress, bool* NewRank_, struct FSlateColor* Color, int32* Rank_Integer);
	void GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected);
	void GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer);
	void GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_);
	void GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System);
	void GetReady_(bool* IsReady_);
	void GetServerSteamID(class FString* SteamID);
	void GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons);
	void GetSteamID(class FString* SteamID);
	void GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant);
	void GetTeam(E_Team* Team_0);
	void GetTeamList(E_Team Team_0, TArray<struct FSTR_PCInfo>* Info);
	void GetTopScore(TArray<struct FSTR_PCInfo>* TopScore);
	void GunGameKill();
	void Init_SteamInfo();
	void InitHudCharacter();
	void InitHudPC();
	void InitPlayerRank__Client(const class FString& SteamID);
	void InitScoreBoard();
	void InpActEvt_Escape_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_IA_Chat_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Score_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Score_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_N_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Y_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void Is_Spawn_Point_Valid(const struct FTransform& Spawn_Transform, bool* Valid_);
	void IsDead(bool* Dead_);
	void IsDestroyabe_(bool* Destroyable_);
	void IsReady_(bool IsReady__0);
	void IsStress(bool* Yes_);
	void IsTalking_(bool* IsTalking__0);
	void Kick_Player__server_(const struct FSTR_KickVote& Player_info);
	void Kick_(const struct FSTR_PCInfo& Target);
	void KickPlayer(const struct FSTR_KickVote& PlayerInfo);
	void KickPlayer__Client_(const struct FSTR_KickVote& Player_info);
	void KickVote(bool Yes_);
	void KickVote__Server_(const struct FSTR_PCInfo& Player_info, bool Yes_);
	void MSG_AVP_GetPlayerUsername(bool* Success_, class FText* Username);
	void MSG_AVP_GetWidgetVoice(class UWidgetComponent** WidgetVoiceRef);
	void MSG_ChatGetConnectedPlayers(TArray<class AController*>* Players);
	void MSG_ChatGetPlayerID(int32* PlayerID);
	void MSG_ChatGetTeamID(int32* TeamID);
	void MSG_ChatGetUsername(bool* Success_, class FText* Username);
	void MSG_ChatPlayEmote(E_Emote EmoteToPlay);
	void MSG_ChatRequestPlayerID(int32* PlayerID, bool* Success_);
	void MuteID(const class FString& SteamID);
	void NewKickVote(const struct FSTR_PCInfo& Target);
	void OnPlayerDeath(class APlayerController* PC);
	void OnTrySelectTeam(E_Team Team_0);
	void OnTrySelectTeam__Client_(E_Team Team_0);
	void Stop_End_Round_Sound__Client_(bool Stop_);
	void ReceiveBeginPlay();
	void ReceivePossess(class APawn* PossessedPawn);
	void Refresh_ScoreBoard__HUD_();
	void Respawn__client_(float Duration, E_Team Team_0);
	void Respawn__Server_(EGM_Statue GM_Statue, E_Team Team_0);
	void ServerTravel(double Delay);
	void SetSteamID__Server_(const class FString& PCInfo, E_Team Team_0, const struct FSTR_PCStats& Item_Stats);
	void Slomo(double Slomo_0);
	void SpawnWinHud();
	void Talk(bool IsTalking_0);
	void TeamMenu_HUD_();
	void Update_ControlRotation(const struct FRotator& NewRotation);
	void Update_Death(int32 Death, bool Set);
	void Update_Death__server_(int32 Death, bool Set);
	void Update_Kill(int32 Kill_);
	void Update_Kill__server_(int32 Death);
	void Update_Score__Client_(const struct FSTR_Score& Score);
	void Update_ScoreBoard__HUD_(bool Remove_);
	void Update_StartingMatch__HUD_PC_();
	void Update_Team_XP__Client_(bool Win);
	void Update_Warning__Client_(const class FString& InputPin);
	void UpdateGamemode(EGameMode GameMode);
	void UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_);
	void UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0);
	void UpdateModeInfo();
	void UpdatePlayerRank__Server_(int32 Stats_Rank, int32 Stats_XP);
	void UpdateScore(const struct FSTR_Score& Score);
	void UpdateTeamIndex__Player_Killed___Client_(E_Team Team__PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamXP(bool Win_);
	void UpdateTimer(double TimeCount, const class FText& NewParam);
	void UpdateTimer__Client_(double Time, const class FText& FinalText);
	void UpdateTransitionHud__client_();
	void UpdateTransitionMap();
	void UpdateWarning(const class FString& String);
	void UpdateXp(int32 Xp);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PC_Bodycam_C">();
	}
	static class APC_Bodycam_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APC_Bodycam_C>();
	}
};
static_assert(alignof(APC_Bodycam_C) == 0x000008, "Wrong alignment on APC_Bodycam_C");
static_assert(sizeof(APC_Bodycam_C) == 0x000978, "Wrong size on APC_Bodycam_C");
static_assert(offsetof(APC_Bodycam_C, UberGraphFrame) == 0x000850, "Member 'APC_Bodycam_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, BP_ChatComponent) == 0x000858, "Member 'APC_Bodycam_C::BP_ChatComponent' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, BP_MenuControllerComponent) == 0x000860, "Member 'APC_Bodycam_C::BP_MenuControllerComponent' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, UI_GameMenu) == 0x000868, "Member 'APC_Bodycam_C::UI_GameMenu' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, HUD_Character) == 0x000870, "Member 'APC_Bodycam_C::HUD_Character' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, WaitingState) == 0x000878, "Member 'APC_Bodycam_C::WaitingState' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, HUD_Transition) == 0x000880, "Member 'APC_Bodycam_C::HUD_Transition' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, HasRespawn_) == 0x000888, "Member 'APC_Bodycam_C::HasRespawn_' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, HUD_ScoreBoard) == 0x000890, "Member 'APC_Bodycam_C::HUD_ScoreBoard' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, SteamID__Server_) == 0x000898, "Member 'APC_Bodycam_C::SteamID__Server_' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, GT_Bodycam) == 0x0008A8, "Member 'APC_Bodycam_C::GT_Bodycam' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, Team) == 0x0008B0, "Member 'APC_Bodycam_C::Team' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, HUD_Warning) == 0x0008B8, "Member 'APC_Bodycam_C::HUD_Warning' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, SteamIDMuted) == 0x0008C0, "Member 'APC_Bodycam_C::SteamIDMuted' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, Kick_Reason) == 0x0008D0, "Member 'APC_Bodycam_C::Kick_Reason' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, KickOverlay) == 0x0008E8, "Member 'APC_Bodycam_C::KickOverlay' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, PlayerVoteToKick) == 0x0008F0, "Member 'APC_Bodycam_C::PlayerVoteToKick' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, EndRoundSounds) == 0x000900, "Member 'APC_Bodycam_C::EndRoundSounds' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, RankScore) == 0x000908, "Member 'APC_Bodycam_C::RankScore' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, Rank_) == 0x00090C, "Member 'APC_Bodycam_C::Rank_' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, CurrentRank) == 0x000910, "Member 'APC_Bodycam_C::CurrentRank' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, Voip) == 0x000928, "Member 'APC_Bodycam_C::Voip' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, IsTalking) == 0x000930, "Member 'APC_Bodycam_C::IsTalking' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, WinHud) == 0x000938, "Member 'APC_Bodycam_C::WinHud' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, AttempsToSpawn) == 0x000940, "Member 'APC_Bodycam_C::AttempsToSpawn' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, PlayerWhoITriedToKick) == 0x000948, "Member 'APC_Bodycam_C::PlayerWhoITriedToKick' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, IsSwapingGun) == 0x000958, "Member 'APC_Bodycam_C::IsSwapingGun' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, CurrentWeaponsGunGame) == 0x00095C, "Member 'APC_Bodycam_C::CurrentWeaponsGunGame' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, TeamMenu) == 0x000968, "Member 'APC_Bodycam_C::TeamMenu' has a wrong offset!");
static_assert(offsetof(APC_Bodycam_C, FriendCount) == 0x000970, "Member 'APC_Bodycam_C::FriendCount' has a wrong offset!");

}

