#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HUD_Parallax_Component

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HUD_Parallax_Component.BP_HUD_Parallax_Component_C
// 0x0070 (0x0110 - 0x00A0)
class UBP_HUD_Parallax_Component_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ACharacter*                             Character;                                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MinMaxYaw;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinMaxPitch;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpCamRatesToTargetSpeed;                       // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpCamRatesToZeroSpeed;                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CameraRot;                                         // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        YawRate;                                           // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PitchRate;                                         // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PitchParallaxOffset;                               // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        YawParallaxOffset;                                 // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FirstPersonCamera;                                 // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HUD_Parallax_Component(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetRotationRates(const struct FRotator& Rotation);
	void UpdateParallax();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HUD_Parallax_Component_C">();
	}
	static class UBP_HUD_Parallax_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_HUD_Parallax_Component_C>();
	}
};
static_assert(alignof(UBP_HUD_Parallax_Component_C) == 0x000008, "Wrong alignment on UBP_HUD_Parallax_Component_C");
static_assert(sizeof(UBP_HUD_Parallax_Component_C) == 0x000110, "Wrong size on UBP_HUD_Parallax_Component_C");
static_assert(offsetof(UBP_HUD_Parallax_Component_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_HUD_Parallax_Component_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_HUD_Parallax_Component_C, Character) == 0x0000A8, "Member 'UBP_HUD_Parallax_Component_C::Character' has a wrong offset!");
static_assert(offsetof(UBP_HUD_Parallax_Component_C, MinMaxYaw) == 0x0000B0, "Member 'UBP_HUD_Parallax_Component_C::MinMaxYaw' has a wrong offset!");
static_assert(offsetof(UBP_HUD_Parallax_Component_C, MinMaxPitch) == 0x0000B8, "Member 'UBP_HUD_Parallax_Component_C::MinMaxPitch' has a wrong offset!");
static_assert(offsetof(UBP_HUD_Parallax_Component_C, InterpCamRatesToTargetSpeed) == 0x0000C0, "Member 'UBP_HUD_Parallax_Component_C::InterpCamRatesToTargetSpeed' has a wrong offset!");
static_assert(offsetof(UBP_HUD_Parallax_Component_C, InterpCamRatesToZeroSpeed) == 0x0000C8, "Member 'UBP_HUD_Parallax_Component_C::InterpCamRatesToZeroSpeed' has a wrong offset!");
static_assert(offsetof(UBP_HUD_Parallax_Component_C, CameraRot) == 0x0000D0, "Member 'UBP_HUD_Parallax_Component_C::CameraRot' has a wrong offset!");
static_assert(offsetof(UBP_HUD_Parallax_Component_C, YawRate) == 0x0000E8, "Member 'UBP_HUD_Parallax_Component_C::YawRate' has a wrong offset!");
static_assert(offsetof(UBP_HUD_Parallax_Component_C, PitchRate) == 0x0000F0, "Member 'UBP_HUD_Parallax_Component_C::PitchRate' has a wrong offset!");
static_assert(offsetof(UBP_HUD_Parallax_Component_C, PitchParallaxOffset) == 0x0000F8, "Member 'UBP_HUD_Parallax_Component_C::PitchParallaxOffset' has a wrong offset!");
static_assert(offsetof(UBP_HUD_Parallax_Component_C, YawParallaxOffset) == 0x000100, "Member 'UBP_HUD_Parallax_Component_C::YawParallaxOffset' has a wrong offset!");
static_assert(offsetof(UBP_HUD_Parallax_Component_C, FirstPersonCamera) == 0x000108, "Member 'UBP_HUD_Parallax_Component_C::FirstPersonCamera' has a wrong offset!");

}

