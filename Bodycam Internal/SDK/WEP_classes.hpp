#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WEP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SSpringInterpVector_structs.hpp"
#include "ST_DefaultSteamItem_structs.hpp"
#include "STR_WEP_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "Projectile_Size_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass WEP.WEP_C
// 0x0540 (0x07D0 - 0x0290)
class AWEP_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   LaserSphere;                                       // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LaserBeam;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       WidgetFocus;                                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightSphere;                                       // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Flashlight;                                        // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Wep_Body;                                          // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         BoltTimeline_BoltTime_F1910E7448A1A5DE706CB2B1803B6A76; // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoltTimeline__Direction_F1910E7448A1A5DE706CB2B1803B6A76; // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoltTimeline;                                      // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         FootstepShakeTimeline_FootstepShake_64D0B9E240D1AC200429F69B180C83AE; // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FootstepShakeTimeline__Direction_64D0B9E240D1AC200429F69B180C83AE; // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FootstepShakeTimeline;                             // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         LeanSwitchTimeline_LeanSwitch_A5946E0649E4CD447F8172A14302C1EB; // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LeanSwitchTimeline__Direction_A5946E0649E4CD447F8172A14302C1EB; // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LeanSwitchTimeline;                                // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         IdleLocTimeline_Recoil_Time_F540394D4E4918A7D2CE6B8043A73AB7; // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            IdleLocTimeline__Direction_F540394D4E4918A7D2CE6B8043A73AB7; // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     IdleLocTimeline;                                   // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Aim_Timeline_Recoil_Time_A7DE9D7443846522AFC2EA9C1AD08FCD; // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Aim_Timeline__Direction_A7DE9D7443846522AFC2EA9C1AD08FCD; // 0x0334(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Aim_Timeline;                                      // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Recoil_Timeline_Recoil_Time_18476778466273142BEA4C9775CED418; // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Recoil_Timeline__Direction_18476778466273142BEA4C9775CED418; // 0x0344(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Recoil_Timeline;                                   // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    DT_WEP;                                            // 0x0350(0x0010)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	struct FSTR_WEP                               Wep_Info;                                          // 0x0360(0x0228)(Edit, BlueprintVisible, Net, DisableEditOnInstance, HasGetValueTypeHash)
	class AWEP_MAG_C*                             Mag;                                               // 0x0588(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BulletDamage;                                      // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BulletIndex;                                       // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59C[0x4];                                      // 0x059C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Shot_Count_Arms;                                   // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Overheat;                                          // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RecoilRot;                                         // 0x05B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RecoilLoc;                                         // 0x05C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RecoilRandomloc;                                   // 0x05E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RecoilRandomRot;                                   // 0x05F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flashlight_ON_;                                    // 0x0610(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          BulletInChamber;                                   // 0x0611(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_612[0x2];                                      // 0x0612(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Projectile_Pellet;                                 // 0x0614(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AALS_AnimMan_CharacterBP_C*             PlayerAttached;                                    // 0x0618(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        RandomTime;                                        // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Aim_Loc;                                           // 0x0628(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Aim_Rot;                                           // 0x0640(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeCurrent;                                      // 0x0658(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IdleRot;                                           // 0x0670(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           Recoil_Spread;                                     // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Recoil_WepRotation;                                // 0x0690(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shot_count_;                                       // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spread_Multiplier;                                 // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOptic_C*                               Optic;                                             // 0x06B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SmoothRotIdle;                                     // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           LeanSwitchRotCurve;                                // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeanSwitchRot;                                     // 0x06D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeanSwitchLoc;                                     // 0x06E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           LeanSwitchLocCurve;                                // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           FootstepShakeLocCurve;                             // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FootstepShakeLoc;                                  // 0x0710(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FootstepShakeRot;                                  // 0x0728(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           FootstepShakeRotCurve;                             // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FST_DefaultSteamItem>           WeaponSkin;                                        // 0x0748(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, ContainsInstancedReference)
	struct FVector                                BoltLoc;                                           // 0x0758(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSSpringInterpVector                   Data;                                              // 0x0770(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77C[0x4];                                      // 0x077C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorSpringState                     Spring_State;                                      // 0x0780(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	double                                        BoltValueCurrent;                                  // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Bolt_Value_Target;                                 // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MontagePlaying_;                                   // 0x07C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fire_;                                             // 0x07C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Laser_ON_;                                         // 0x07CA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          FlashLightIsSparkling_;                            // 0x07CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         RandomSpawnProbability;                            // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void AddBullet(class UAnimMontage* BodyMontage, class UAnimMontage* WepMontage);
	void Aim();
	void Aim_Timeline__FinishedFunc();
	void Aim_Timeline__UpdateFunc();
	void BndEvt__WEP_Wep_Body_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BoltTimeline__FinishedFunc();
	void BoltTimeline__UpdateFunc();
	void CanInterract(bool* Interract_);
	void CanPickup(class AALS_AnimMan_CharacterBP_C* Player, bool* Pickup_);
	void CanSwap_(bool* IsItemSwap_);
	void Drop(double Delay);
	void Drop__Server_();
	void ExecuteUbergraph_WEP(int32 EntryPoint);
	void Fire_Event();
	void FireFunction();
	void FlashLight__Multicast_(bool Flashlight_ON__0);
	void FlashLightToggle__Server_();
	void FootstepShake(double Stenght);
	void FootstepShakeTimeline__FinishedFunc();
	void FootstepShakeTimeline__UpdateFunc();
	void GetItemPriority(int32* Priority);
	void GetOffset(struct FTransform* Offset);
	void GetOverlay(EALS_OverlayState* Overlay);
	void GetSocketToAttach(class FName* SocketToAttach);
	void Hit__Server_(const struct FHitResult& Hit, class APlayerController* KillerPC, double Damage);
	void IdleLocTimeline__FinishedFunc();
	void IdleLocTimeline__UpdateFunc();
	void InitOptic();
	void Interract(class APawn* Owner_0);
	void InterractDoor(double Z_Angle, bool ResetDoor);
	void IsDefaultHandle(bool* IsDefaultHandle_);
	void Item_Focus();
	void Laser__multicast_(bool Visibility);
	void LaserToggle__Server_();
	void LaserUpdate();
	void LeanSwitch();
	void LeanSwitchTimeline__FinishedFunc();
	void LeanSwitchTimeline__UpdateFunc();
	void LeftClickEvent();
	void LeftClickReleaseEvent();
	void LoopRotIdle();
	void OnBlendOut_4D1DB2E544F22CF0AD54A9AC65084DBC(class FName NotifyName);
	void OnBlendOut_5B4653B142F549DE2AB17E93C66A289F(class FName NotifyName);
	void OnBlendOut_678DF6314C200305E074F2BF7AEA32B9(class FName NotifyName);
	void OnCompleted_4D1DB2E544F22CF0AD54A9AC65084DBC(class FName NotifyName);
	void OnCompleted_5B4653B142F549DE2AB17E93C66A289F(class FName NotifyName);
	void OnCompleted_678DF6314C200305E074F2BF7AEA32B9(class FName NotifyName);
	void OnInterrupted_4D1DB2E544F22CF0AD54A9AC65084DBC(class FName NotifyName);
	void OnInterrupted_5B4653B142F549DE2AB17E93C66A289F(class FName NotifyName);
	void OnInterrupted_678DF6314C200305E074F2BF7AEA32B9(class FName NotifyName);
	void OnNotifyBegin_4D1DB2E544F22CF0AD54A9AC65084DBC(class FName NotifyName);
	void OnNotifyBegin_5B4653B142F549DE2AB17E93C66A289F(class FName NotifyName);
	void OnNotifyBegin_678DF6314C200305E074F2BF7AEA32B9(class FName NotifyName);
	void OnNotifyEnd_4D1DB2E544F22CF0AD54A9AC65084DBC(class FName NotifyName);
	void OnNotifyEnd_5B4653B142F549DE2AB17E93C66A289F(class FName NotifyName);
	void OnNotifyEnd_678DF6314C200305E074F2BF7AEA32B9(class FName NotifyName);
	void OnRep_Flashlight_ON_();
	void OnRep_Laser_ON_();
	void OnRep_PlayerAttached();
	void OnRep_WeaponSkin();
	void Pickup(class AALS_AnimMan_CharacterBP_C* Owner_0);
	void Pickup__Server_(class AALS_AnimMan_CharacterBP_C* PlayerAttached_0);
	void Play_Recoil(class UCurveVector* Recoil_Loc, class UCurveVector* Recoil_Rot);
	void Post_Shooting();
	void Pull_Slider__Multicast_(class UAnimMontage* MontageToPlay);
	void Pull_Slider__Server_();
	void PullSlider();
	void RandomRecoil(const struct FSTR_RANGE& RandomFloat, struct FVector* Final_Recoil);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void Recoil_Timeline__FinishedFunc();
	void Recoil_Timeline__UpdateFunc();
	void Reload__multicast_(class UAnimMontage* BodyMontage, class UAnimMontage* WepMontage);
	void Reload__Server_();
	void Set_Simulate_Physics__Multicast_(bool bSimulate);
	void Shake();
	void Spawn_Mag();
	void Spawn_Trail__Multicast_(const struct FRotator& Spawn_Transform_Rotation, int32 BulletIndex_0);
	void Spawn_Trail__Server_(const struct FRotator& Spawn_Transform_Rotation, int32 PenetrationCount);
	void SpawnImpact__Multicast_(const struct FHitResult& HitResult, bool ExitBullet, double BulletDamage_0, class APlayerController* PCOrigin);
	void SpawnShell();
	void SwitchAnimation(class UAnimMontage** In, class UAnimMontage** Out, class USoundCue** InSound, class USoundCue** OutSound);
	void Try_Spawn_Fire_Particles__Client_();
	void Try_Spawn_Fire_Particles__Multicast_();
	void Try_Spawn_Fire_Particles__Server_();
	void UnAim();
	void Update_Light_Sphere_Scale();
	double Update_Ragdoll_Force(double BulletDamage_0);
	void UserConstructionScript();
	void Weapons_Skin__Client_();
	void Weapons_Skin__Multicast_(TArray<struct FST_DefaultSteamItem>& WeaponSkin_0);
	void Weapons_Skin__Server_(TArray<struct FST_DefaultSteamItem>& WeaponSkin_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WEP_C">();
	}
	static class AWEP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWEP_C>();
	}
};
static_assert(alignof(AWEP_C) == 0x000008, "Wrong alignment on AWEP_C");
static_assert(sizeof(AWEP_C) == 0x0007D0, "Wrong size on AWEP_C");
static_assert(offsetof(AWEP_C, UberGraphFrame) == 0x000290, "Member 'AWEP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWEP_C, LaserSphere) == 0x000298, "Member 'AWEP_C::LaserSphere' has a wrong offset!");
static_assert(offsetof(AWEP_C, Decal) == 0x0002A0, "Member 'AWEP_C::Decal' has a wrong offset!");
static_assert(offsetof(AWEP_C, LaserBeam) == 0x0002A8, "Member 'AWEP_C::LaserBeam' has a wrong offset!");
static_assert(offsetof(AWEP_C, WidgetFocus) == 0x0002B0, "Member 'AWEP_C::WidgetFocus' has a wrong offset!");
static_assert(offsetof(AWEP_C, Box) == 0x0002B8, "Member 'AWEP_C::Box' has a wrong offset!");
static_assert(offsetof(AWEP_C, LightSphere) == 0x0002C0, "Member 'AWEP_C::LightSphere' has a wrong offset!");
static_assert(offsetof(AWEP_C, SpotLight) == 0x0002C8, "Member 'AWEP_C::SpotLight' has a wrong offset!");
static_assert(offsetof(AWEP_C, Flashlight) == 0x0002D0, "Member 'AWEP_C::Flashlight' has a wrong offset!");
static_assert(offsetof(AWEP_C, PointLight) == 0x0002D8, "Member 'AWEP_C::PointLight' has a wrong offset!");
static_assert(offsetof(AWEP_C, Arrow) == 0x0002E0, "Member 'AWEP_C::Arrow' has a wrong offset!");
static_assert(offsetof(AWEP_C, Wep_Body) == 0x0002E8, "Member 'AWEP_C::Wep_Body' has a wrong offset!");
static_assert(offsetof(AWEP_C, BoltTimeline_BoltTime_F1910E7448A1A5DE706CB2B1803B6A76) == 0x0002F0, "Member 'AWEP_C::BoltTimeline_BoltTime_F1910E7448A1A5DE706CB2B1803B6A76' has a wrong offset!");
static_assert(offsetof(AWEP_C, BoltTimeline__Direction_F1910E7448A1A5DE706CB2B1803B6A76) == 0x0002F4, "Member 'AWEP_C::BoltTimeline__Direction_F1910E7448A1A5DE706CB2B1803B6A76' has a wrong offset!");
static_assert(offsetof(AWEP_C, BoltTimeline) == 0x0002F8, "Member 'AWEP_C::BoltTimeline' has a wrong offset!");
static_assert(offsetof(AWEP_C, FootstepShakeTimeline_FootstepShake_64D0B9E240D1AC200429F69B180C83AE) == 0x000300, "Member 'AWEP_C::FootstepShakeTimeline_FootstepShake_64D0B9E240D1AC200429F69B180C83AE' has a wrong offset!");
static_assert(offsetof(AWEP_C, FootstepShakeTimeline__Direction_64D0B9E240D1AC200429F69B180C83AE) == 0x000304, "Member 'AWEP_C::FootstepShakeTimeline__Direction_64D0B9E240D1AC200429F69B180C83AE' has a wrong offset!");
static_assert(offsetof(AWEP_C, FootstepShakeTimeline) == 0x000308, "Member 'AWEP_C::FootstepShakeTimeline' has a wrong offset!");
static_assert(offsetof(AWEP_C, LeanSwitchTimeline_LeanSwitch_A5946E0649E4CD447F8172A14302C1EB) == 0x000310, "Member 'AWEP_C::LeanSwitchTimeline_LeanSwitch_A5946E0649E4CD447F8172A14302C1EB' has a wrong offset!");
static_assert(offsetof(AWEP_C, LeanSwitchTimeline__Direction_A5946E0649E4CD447F8172A14302C1EB) == 0x000314, "Member 'AWEP_C::LeanSwitchTimeline__Direction_A5946E0649E4CD447F8172A14302C1EB' has a wrong offset!");
static_assert(offsetof(AWEP_C, LeanSwitchTimeline) == 0x000318, "Member 'AWEP_C::LeanSwitchTimeline' has a wrong offset!");
static_assert(offsetof(AWEP_C, IdleLocTimeline_Recoil_Time_F540394D4E4918A7D2CE6B8043A73AB7) == 0x000320, "Member 'AWEP_C::IdleLocTimeline_Recoil_Time_F540394D4E4918A7D2CE6B8043A73AB7' has a wrong offset!");
static_assert(offsetof(AWEP_C, IdleLocTimeline__Direction_F540394D4E4918A7D2CE6B8043A73AB7) == 0x000324, "Member 'AWEP_C::IdleLocTimeline__Direction_F540394D4E4918A7D2CE6B8043A73AB7' has a wrong offset!");
static_assert(offsetof(AWEP_C, IdleLocTimeline) == 0x000328, "Member 'AWEP_C::IdleLocTimeline' has a wrong offset!");
static_assert(offsetof(AWEP_C, Aim_Timeline_Recoil_Time_A7DE9D7443846522AFC2EA9C1AD08FCD) == 0x000330, "Member 'AWEP_C::Aim_Timeline_Recoil_Time_A7DE9D7443846522AFC2EA9C1AD08FCD' has a wrong offset!");
static_assert(offsetof(AWEP_C, Aim_Timeline__Direction_A7DE9D7443846522AFC2EA9C1AD08FCD) == 0x000334, "Member 'AWEP_C::Aim_Timeline__Direction_A7DE9D7443846522AFC2EA9C1AD08FCD' has a wrong offset!");
static_assert(offsetof(AWEP_C, Aim_Timeline) == 0x000338, "Member 'AWEP_C::Aim_Timeline' has a wrong offset!");
static_assert(offsetof(AWEP_C, Recoil_Timeline_Recoil_Time_18476778466273142BEA4C9775CED418) == 0x000340, "Member 'AWEP_C::Recoil_Timeline_Recoil_Time_18476778466273142BEA4C9775CED418' has a wrong offset!");
static_assert(offsetof(AWEP_C, Recoil_Timeline__Direction_18476778466273142BEA4C9775CED418) == 0x000344, "Member 'AWEP_C::Recoil_Timeline__Direction_18476778466273142BEA4C9775CED418' has a wrong offset!");
static_assert(offsetof(AWEP_C, Recoil_Timeline) == 0x000348, "Member 'AWEP_C::Recoil_Timeline' has a wrong offset!");
static_assert(offsetof(AWEP_C, DT_WEP) == 0x000350, "Member 'AWEP_C::DT_WEP' has a wrong offset!");
static_assert(offsetof(AWEP_C, Wep_Info) == 0x000360, "Member 'AWEP_C::Wep_Info' has a wrong offset!");
static_assert(offsetof(AWEP_C, Mag) == 0x000588, "Member 'AWEP_C::Mag' has a wrong offset!");
static_assert(offsetof(AWEP_C, BulletDamage) == 0x000590, "Member 'AWEP_C::BulletDamage' has a wrong offset!");
static_assert(offsetof(AWEP_C, BulletIndex) == 0x000598, "Member 'AWEP_C::BulletIndex' has a wrong offset!");
static_assert(offsetof(AWEP_C, Shot_Count_Arms) == 0x0005A0, "Member 'AWEP_C::Shot_Count_Arms' has a wrong offset!");
static_assert(offsetof(AWEP_C, Overheat) == 0x0005A8, "Member 'AWEP_C::Overheat' has a wrong offset!");
static_assert(offsetof(AWEP_C, RecoilRot) == 0x0005B0, "Member 'AWEP_C::RecoilRot' has a wrong offset!");
static_assert(offsetof(AWEP_C, RecoilLoc) == 0x0005C8, "Member 'AWEP_C::RecoilLoc' has a wrong offset!");
static_assert(offsetof(AWEP_C, RecoilRandomloc) == 0x0005E0, "Member 'AWEP_C::RecoilRandomloc' has a wrong offset!");
static_assert(offsetof(AWEP_C, RecoilRandomRot) == 0x0005F8, "Member 'AWEP_C::RecoilRandomRot' has a wrong offset!");
static_assert(offsetof(AWEP_C, Flashlight_ON_) == 0x000610, "Member 'AWEP_C::Flashlight_ON_' has a wrong offset!");
static_assert(offsetof(AWEP_C, BulletInChamber) == 0x000611, "Member 'AWEP_C::BulletInChamber' has a wrong offset!");
static_assert(offsetof(AWEP_C, Projectile_Pellet) == 0x000614, "Member 'AWEP_C::Projectile_Pellet' has a wrong offset!");
static_assert(offsetof(AWEP_C, PlayerAttached) == 0x000618, "Member 'AWEP_C::PlayerAttached' has a wrong offset!");
static_assert(offsetof(AWEP_C, RandomTime) == 0x000620, "Member 'AWEP_C::RandomTime' has a wrong offset!");
static_assert(offsetof(AWEP_C, Aim_Loc) == 0x000628, "Member 'AWEP_C::Aim_Loc' has a wrong offset!");
static_assert(offsetof(AWEP_C, Aim_Rot) == 0x000640, "Member 'AWEP_C::Aim_Rot' has a wrong offset!");
static_assert(offsetof(AWEP_C, ShakeCurrent) == 0x000658, "Member 'AWEP_C::ShakeCurrent' has a wrong offset!");
static_assert(offsetof(AWEP_C, IdleRot) == 0x000670, "Member 'AWEP_C::IdleRot' has a wrong offset!");
static_assert(offsetof(AWEP_C, Recoil_Spread) == 0x000688, "Member 'AWEP_C::Recoil_Spread' has a wrong offset!");
static_assert(offsetof(AWEP_C, Recoil_WepRotation) == 0x000690, "Member 'AWEP_C::Recoil_WepRotation' has a wrong offset!");
static_assert(offsetof(AWEP_C, Shot_count_) == 0x0006A8, "Member 'AWEP_C::Shot_count_' has a wrong offset!");
static_assert(offsetof(AWEP_C, Spread_Multiplier) == 0x0006B0, "Member 'AWEP_C::Spread_Multiplier' has a wrong offset!");
static_assert(offsetof(AWEP_C, Optic) == 0x0006B8, "Member 'AWEP_C::Optic' has a wrong offset!");
static_assert(offsetof(AWEP_C, SmoothRotIdle) == 0x0006C0, "Member 'AWEP_C::SmoothRotIdle' has a wrong offset!");
static_assert(offsetof(AWEP_C, LeanSwitchRotCurve) == 0x0006C8, "Member 'AWEP_C::LeanSwitchRotCurve' has a wrong offset!");
static_assert(offsetof(AWEP_C, LeanSwitchRot) == 0x0006D0, "Member 'AWEP_C::LeanSwitchRot' has a wrong offset!");
static_assert(offsetof(AWEP_C, LeanSwitchLoc) == 0x0006E8, "Member 'AWEP_C::LeanSwitchLoc' has a wrong offset!");
static_assert(offsetof(AWEP_C, LeanSwitchLocCurve) == 0x000700, "Member 'AWEP_C::LeanSwitchLocCurve' has a wrong offset!");
static_assert(offsetof(AWEP_C, FootstepShakeLocCurve) == 0x000708, "Member 'AWEP_C::FootstepShakeLocCurve' has a wrong offset!");
static_assert(offsetof(AWEP_C, FootstepShakeLoc) == 0x000710, "Member 'AWEP_C::FootstepShakeLoc' has a wrong offset!");
static_assert(offsetof(AWEP_C, FootstepShakeRot) == 0x000728, "Member 'AWEP_C::FootstepShakeRot' has a wrong offset!");
static_assert(offsetof(AWEP_C, FootstepShakeRotCurve) == 0x000740, "Member 'AWEP_C::FootstepShakeRotCurve' has a wrong offset!");
static_assert(offsetof(AWEP_C, WeaponSkin) == 0x000748, "Member 'AWEP_C::WeaponSkin' has a wrong offset!");
static_assert(offsetof(AWEP_C, BoltLoc) == 0x000758, "Member 'AWEP_C::BoltLoc' has a wrong offset!");
static_assert(offsetof(AWEP_C, Data) == 0x000770, "Member 'AWEP_C::Data' has a wrong offset!");
static_assert(offsetof(AWEP_C, Spring_State) == 0x000780, "Member 'AWEP_C::Spring_State' has a wrong offset!");
static_assert(offsetof(AWEP_C, BoltValueCurrent) == 0x0007B8, "Member 'AWEP_C::BoltValueCurrent' has a wrong offset!");
static_assert(offsetof(AWEP_C, Bolt_Value_Target) == 0x0007C0, "Member 'AWEP_C::Bolt_Value_Target' has a wrong offset!");
static_assert(offsetof(AWEP_C, MontagePlaying_) == 0x0007C8, "Member 'AWEP_C::MontagePlaying_' has a wrong offset!");
static_assert(offsetof(AWEP_C, Fire_) == 0x0007C9, "Member 'AWEP_C::Fire_' has a wrong offset!");
static_assert(offsetof(AWEP_C, Laser_ON_) == 0x0007CA, "Member 'AWEP_C::Laser_ON_' has a wrong offset!");
static_assert(offsetof(AWEP_C, FlashLightIsSparkling_) == 0x0007CB, "Member 'AWEP_C::FlashLightIsSparkling_' has a wrong offset!");
static_assert(offsetof(AWEP_C, RandomSpawnProbability) == 0x0007CC, "Member 'AWEP_C::RandomSpawnProbability' has a wrong offset!");

}

