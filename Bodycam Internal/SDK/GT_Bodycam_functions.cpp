#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GT_Bodycam

#include "Basic.hpp"

#include "GT_Bodycam_classes.hpp"
#include "GT_Bodycam_parameters.hpp"


namespace SDK
{

// Function GT_Bodycam.GT_Bodycam_C.AnyBombExist
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABombe_C*                         Bomb                                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::AnyBombExist(class ABombe_C** Bomb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "AnyBombExist");

	Params::GT_Bodycam_C_AnyBombExist Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bomb != nullptr)
		*Bomb = Parms.Bomb;
}


// Function GT_Bodycam.GT_Bodycam_C.BreakTimer
// (Public, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::BreakTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "BreakTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.CanCreateKickVote
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanCreateKickVote_                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::CanCreateKickVote(bool* CanCreateKickVote_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "CanCreateKickVote");

	Params::GT_Bodycam_C_CanCreateKickVote Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanCreateKickVote_ != nullptr)
		*CanCreateKickVote_ = Parms.CanCreateKickVote_;
}


// Function GT_Bodycam.GT_Bodycam_C.CanKickThisPlayer?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    True_                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::CanKickThisPlayer_(const class FString& PlayerID, bool* True_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "CanKickThisPlayer?");

	Params::GT_Bodycam_C_CanKickThisPlayer_ Parms{};

	Parms.PlayerID = std::move(PlayerID);

	UObject::ProcessEvent(Func, &Parms);

	if (True_ != nullptr)
		*True_ = Parms.True_;
}


// Function GT_Bodycam.GT_Bodycam_C.ClearMap
// (Public, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::ClearMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "ClearMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.DeseableTk (Multicast)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::DeseableTk__Multicast_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "DeseableTk (Multicast)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.Event Ragdoll End
// (Public, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::Event_Ragdoll_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Event Ragdoll End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.EventRagdollStart
// (Public, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::EventRagdollStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "EventRagdollStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.ExecuteUbergraph_GT_Bodycam
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::ExecuteUbergraph_GT_Bodycam(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "ExecuteUbergraph_GT_Bodycam");

	Params::GT_Bodycam_C_ExecuteUbergraph_GT_Bodycam Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.FirstRounds
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    FirstRound_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::FirstRounds(bool* FirstRound_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "FirstRounds");

	Params::GT_Bodycam_C_FirstRounds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FirstRound_0 != nullptr)
		*FirstRound_0 = Parms.FirstRound_0;
}


// Function GT_Bodycam.GT_Bodycam_C.Get BP Menu Controller Component
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MenuControllerComponent_C*    BP_Menu_Controller_Component                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Get BP Menu Controller Component");

	Params::GT_Bodycam_C_Get_BP_Menu_Controller_Component Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BP_Menu_Controller_Component != nullptr)
		*BP_Menu_Controller_Component = Parms.BP_Menu_Controller_Component;
}


// Function GT_Bodycam.GT_Bodycam_C.Get Stamina
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Stamina                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::Get_Stamina(double* Stamina)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Get Stamina");

	Params::GT_Bodycam_C_Get_Stamina Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Stamina != nullptr)
		*Stamina = Parms.Stamina;
}


// Function GT_Bodycam.GT_Bodycam_C.GetBlured
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Blured                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetBlured(double* Blured)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetBlured");

	Params::GT_Bodycam_C_GetBlured Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Blured != nullptr)
		*Blured = Parms.Blured;
}


// Function GT_Bodycam.GT_Bodycam_C.GetBurnedRef
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  BurnedMesh                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetBurnedRef(class USceneComponent** BurnedMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetBurnedRef");

	Params::GT_Bodycam_C_GetBurnedRef Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BurnedMesh != nullptr)
		*BurnedMesh = Parms.BurnedMesh;
}


// Function GT_Bodycam.GT_Bodycam_C.GetFlashBangEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  FlashEffect                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetFlashBangEffect(double* FlashEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetFlashBangEffect");

	Params::GT_Bodycam_C_GetFlashBangEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FlashEffect != nullptr)
		*FlashEffect = Parms.FlashEffect;
}


// Function GT_Bodycam.GT_Bodycam_C.GetGameMode
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_GamemodeWinInfo             GameMode_0                                             (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetGameMode(struct FSTR_GamemodeWinInfo* GameMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetGameMode");

	Params::GT_Bodycam_C_GetGameMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GameMode_0 != nullptr)
		*GameMode_0 = std::move(Parms.GameMode_0);
}


// Function GT_Bodycam.GT_Bodycam_C.GetGamemodeInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSTR_GamemodeWinInfo             GamemodeInfo                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetGamemodeInfo(struct FSTR_GamemodeWinInfo* GamemodeInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetGamemodeInfo");

	Params::GT_Bodycam_C_GetGamemodeInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GamemodeInfo != nullptr)
		*GamemodeInfo = std::move(Parms.GamemodeInfo);
}


// Function GT_Bodycam.GT_Bodycam_C.GetHealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Health                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetHealth(double* Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetHealth");

	Params::GT_Bodycam_C_GetHealth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Health != nullptr)
		*Health = Parms.Health;
}


// Function GT_Bodycam.GT_Bodycam_C.GetKickedPlayerVoted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   KickplayerAlreadyVote                                  (Parm, OutParm)

void AGT_Bodycam_C::GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetKickedPlayerVoted");

	Params::GT_Bodycam_C_GetKickedPlayerVoted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KickplayerAlreadyVote != nullptr)
		*KickplayerAlreadyVote = std::move(Parms.KickplayerAlreadyVote);
}


// Function GT_Bodycam.GT_Bodycam_C.GetMenuSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MenuControllerComponent_C*    Bp_MenuController                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetMenuSettings");

	Params::GT_Bodycam_C_GetMenuSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bp_MenuController != nullptr)
		*Bp_MenuController = Parms.Bp_MenuController;
}


// Function GT_Bodycam.GT_Bodycam_C.GetMutePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   MutePlayer                                             (Parm, OutParm)

void AGT_Bodycam_C::GetMutePlayer(TArray<class FString>* MutePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetMutePlayer");

	Params::GT_Bodycam_C_GetMutePlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MutePlayer != nullptr)
		*MutePlayer = std::move(Parms.MutePlayer);
}


// Function GT_Bodycam.GT_Bodycam_C.GetPlayerConnected
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_PCInfo>              PlayerConnected                                        (Parm, OutParm)

void AGT_Bodycam_C::GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetPlayerConnected");

	Params::GT_Bodycam_C_GetPlayerConnected Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerConnected != nullptr)
		*PlayerConnected = std::move(Parms.PlayerConnected);
}


// Function GT_Bodycam.GT_Bodycam_C.GetPlayerKickVote
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_KickVote>            KickVotePlayer                                         (Parm, OutParm)

void AGT_Bodycam_C::GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetPlayerKickVote");

	Params::GT_Bodycam_C_GetPlayerKickVote Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KickVotePlayer != nullptr)
		*KickVotePlayer = std::move(Parms.KickVotePlayer);
}


// Function GT_Bodycam.GT_Bodycam_C.GetPlayerSkin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_TEST                        Player_Skin                                            (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Valid_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetPlayerSkin");

	Params::GT_Bodycam_C_GetPlayerSkin Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player_Skin != nullptr)
		*Player_Skin = std::move(Parms.Player_Skin);

	if (Valid_ != nullptr)
		*Valid_ = Parms.Valid_;
}


// Function GT_Bodycam.GT_Bodycam_C.GetRagdollSystem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWW_RagdollSystem_C*              Ragdoll_System                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetRagdollSystem");

	Params::GT_Bodycam_C_GetRagdollSystem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ragdoll_System != nullptr)
		*Ragdoll_System = Parms.Ragdoll_System;
}


// Function GT_Bodycam.GT_Bodycam_C.GetReady?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReady_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetReady_(bool* IsReady_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetReady?");

	Params::GT_Bodycam_C_GetReady_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsReady_ != nullptr)
		*IsReady_ = Parms.IsReady_;
}


// Function GT_Bodycam.GT_Bodycam_C.GetServerSteamID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetServerSteamID(class FString* SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetServerSteamID");

	Params::GT_Bodycam_C_GetServerSteamID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SteamID != nullptr)
		*SteamID = std::move(Parms.SteamID);
}


// Function GT_Bodycam.GT_Bodycam_C.GetStarterWeapons
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_Actor>               Weapons                                                (Parm, OutParm)

void AGT_Bodycam_C::GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetStarterWeapons");

	Params::GT_Bodycam_C_GetStarterWeapons Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Weapons != nullptr)
		*Weapons = std::move(Parms.Weapons);
}


// Function GT_Bodycam.GT_Bodycam_C.GetSteamID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetSteamID(class FString* SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetSteamID");

	Params::GT_Bodycam_C_GetSteamID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SteamID != nullptr)
		*SteamID = std::move(Parms.SteamID);
}


// Function GT_Bodycam.GT_Bodycam_C.GetSurvivorStatuts
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWW_SurvivorStatus_C*             SurvivorComponant                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetSurvivorStatuts");

	Params::GT_Bodycam_C_GetSurvivorStatuts Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SurvivorComponant != nullptr)
		*SurvivorComponant = Parms.SurvivorComponant;
}


// Function GT_Bodycam.GT_Bodycam_C.GetTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::GetTeam(E_Team* Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetTeam");

	Params::GT_Bodycam_C_GetTeam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Team != nullptr)
		*Team = Parms.Team;
}


// Function GT_Bodycam.GT_Bodycam_C.GetTeamList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSTR_PCInfo>              Info                                                   (Parm, OutParm)

void AGT_Bodycam_C::GetTeamList(E_Team Team, TArray<struct FSTR_PCInfo>* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetTeamList");

	Params::GT_Bodycam_C_GetTeamList Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (Info != nullptr)
		*Info = std::move(Parms.Info);
}


// Function GT_Bodycam.GT_Bodycam_C.GetTopScore
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_PCInfo>              TopScore                                               (Parm, OutParm)

void AGT_Bodycam_C::GetTopScore(TArray<struct FSTR_PCInfo>* TopScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GetTopScore");

	Params::GT_Bodycam_C_GetTopScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TopScore != nullptr)
		*TopScore = std::move(Parms.TopScore);
}


// Function GT_Bodycam.GT_Bodycam_C.GlobalUpdate (HUD_PC)
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::GlobalUpdate__HUD_PC_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "GlobalUpdate (HUD_PC)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.IndexTeamAlive
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   IndexMilitaryAlive_Return                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   IndexTerroristAlive_Return                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Team                                  WinningTeam_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSTR_PCInfo>              MilitaryTeam_Return                                    (Parm, OutParm)
// TArray<struct FSTR_PCInfo>              TerroristTeam_Return                                   (Parm, OutParm)

void AGT_Bodycam_C::IndexTeamAlive(int32* IndexMilitaryAlive_Return, int32* IndexTerroristAlive_Return, E_Team* WinningTeam_0, TArray<struct FSTR_PCInfo>* MilitaryTeam_Return, TArray<struct FSTR_PCInfo>* TerroristTeam_Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "IndexTeamAlive");

	Params::GT_Bodycam_C_IndexTeamAlive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IndexMilitaryAlive_Return != nullptr)
		*IndexMilitaryAlive_Return = Parms.IndexMilitaryAlive_Return;

	if (IndexTerroristAlive_Return != nullptr)
		*IndexTerroristAlive_Return = Parms.IndexTerroristAlive_Return;

	if (WinningTeam_0 != nullptr)
		*WinningTeam_0 = Parms.WinningTeam_0;

	if (MilitaryTeam_Return != nullptr)
		*MilitaryTeam_Return = std::move(Parms.MilitaryTeam_Return);

	if (TerroristTeam_Return != nullptr)
		*TerroristTeam_Return = std::move(Parms.TerroristTeam_Return);
}


// Function GT_Bodycam.GT_Bodycam_C.InitScoreBoard
// (Public, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::InitScoreBoard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "InitScoreBoard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.IsDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dead_                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::IsDead(bool* Dead_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "IsDead");

	Params::GT_Bodycam_C_IsDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dead_ != nullptr)
		*Dead_ = Parms.Dead_;
}


// Function GT_Bodycam.GT_Bodycam_C.IsDestroyabe?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Destroyable_                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::IsDestroyabe_(bool* Destroyable_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "IsDestroyabe?");

	Params::GT_Bodycam_C_IsDestroyabe_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Destroyable_ != nullptr)
		*Destroyable_ = Parms.Destroyable_;
}


// Function GT_Bodycam.GT_Bodycam_C.IsReady?
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReady__0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::IsReady_(bool IsReady__0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "IsReady?");

	Params::GT_Bodycam_C_IsReady_ Parms{};

	Parms.IsReady__0 = IsReady__0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.IsStress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Yes_                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::IsStress(bool* Yes_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "IsStress");

	Params::GT_Bodycam_C_IsStress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Yes_ != nullptr)
		*Yes_ = Parms.Yes_;
}


// Function GT_Bodycam.GT_Bodycam_C.IsTalking?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTalking__0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::IsTalking_(bool* IsTalking__0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "IsTalking?");

	Params::GT_Bodycam_C_IsTalking_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTalking__0 != nullptr)
		*IsTalking__0 = Parms.IsTalking__0;
}


// Function GT_Bodycam.GT_Bodycam_C.Kick?
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGT_Bodycam_C::Kick_(const struct FSTR_PCInfo& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Kick?");

	Params::GT_Bodycam_C_Kick_ Parms{};

	Parms.Target = std::move(Target);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.Kick? (Server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      PlayerInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGT_Bodycam_C::Kick___Server_(const struct FSTR_PCInfo& PlayerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Kick? (Server)");

	Params::GT_Bodycam_C_Kick___Server_ Parms{};

	Parms.PlayerInfo = std::move(PlayerInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.KickPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_KickVote                    PlayerInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGT_Bodycam_C::KickPlayer(const struct FSTR_KickVote& PlayerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "KickPlayer");

	Params::GT_Bodycam_C_KickPlayer Parms{};

	Parms.PlayerInfo = std::move(PlayerInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.KickPlayer (Server)
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_KickVote                    NewItem                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)

void AGT_Bodycam_C::KickPlayer__Server_(const struct FSTR_KickVote& NewItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "KickPlayer (Server)");

	Params::GT_Bodycam_C_KickPlayer__Server_ Parms{};

	Parms.NewItem = std::move(NewItem);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.LaunchChooseTeamChrono
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::LaunchChooseTeamChrono()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "LaunchChooseTeamChrono");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.MaxPlayerPerTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   MaxPlayerPerTeam_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::MaxPlayerPerTeam(int32* MaxPlayerPerTeam_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "MaxPlayerPerTeam");

	Params::GT_Bodycam_C_MaxPlayerPerTeam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxPlayerPerTeam_0 != nullptr)
		*MaxPlayerPerTeam_0 = Parms.MaxPlayerPerTeam_0;
}


// Function GT_Bodycam.GT_Bodycam_C.MuteID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGT_Bodycam_C::MuteID(const class FString& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "MuteID");

	Params::GT_Bodycam_C_MuteID Parms{};

	Parms.SteamID = std::move(SteamID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.NewKickVote
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGT_Bodycam_C::NewKickVote(const struct FSTR_PCInfo& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "NewKickVote");

	Params::GT_Bodycam_C_NewKickVote Parms{};

	Parms.Target = std::move(Target);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.OnPlayerDeath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PC                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::OnPlayerDeath(class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "OnPlayerDeath");

	Params::GT_Bodycam_C_OnPlayerDeath Parms{};

	Parms.PC = PC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.OnRep_GM_statue
// (BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::OnRep_GM_statue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "OnRep_GM_statue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.OnRep_PlayerMiss
// (BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::OnRep_PlayerMiss()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "OnRep_PlayerMiss");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.OnRep_PrimaryScope
// (BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::OnRep_PrimaryScope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "OnRep_PrimaryScope");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.OnRep_SecondaryScope
// (BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::OnRep_SecondaryScope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "OnRep_SecondaryScope");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.OnTrySelectTeam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::OnTrySelectTeam(E_Team Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "OnTrySelectTeam");

	Params::GT_Bodycam_C_OnTrySelectTeam Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.Stop End Round Sound (Multicast)
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Stop_                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::Stop_End_Round_Sound__Multicast_(bool Stop_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Stop End Round Sound (Multicast)");

	Params::GT_Bodycam_C_Stop_End_Round_Sound__Multicast_ Parms{};

	Parms.Stop_ = Stop_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.Player Remain
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Match_Max_Player                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Remain_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::Player_Remain(int32* Match_Max_Player, int32* Player_Remain_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Player Remain");

	Params::GT_Bodycam_C_Player_Remain Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Match_Max_Player != nullptr)
		*Match_Max_Player = Parms.Match_Max_Player;

	if (Player_Remain_0 != nullptr)
		*Player_Remain_0 = Parms.Player_Remain_0;
}


// Function GT_Bodycam.GT_Bodycam_C.PlayerWaitedArray
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FSTR_PCInfo>              PlayerWaited_Return                                    (Parm, OutParm)
// class FString                           PlayerSteamName_Return                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AGT_Bodycam_C::PlayerWaitedArray(TArray<struct FSTR_PCInfo>* PlayerWaited_Return, class FString* PlayerSteamName_Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "PlayerWaitedArray");

	Params::GT_Bodycam_C_PlayerWaitedArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerWaited_Return != nullptr)
		*PlayerWaited_Return = std::move(Parms.PlayerWaited_Return);

	if (PlayerSteamName_Return != nullptr)
		*PlayerSteamName_Return = std::move(Parms.PlayerSteamName_Return);
}


// Function GT_Bodycam.GT_Bodycam_C.RandomStuff
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::RandomStuff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "RandomStuff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AGT_Bodycam_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.RefreshScoreBoard
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::RefreshScoreBoard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "RefreshScoreBoard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.SelectTeam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_Team                                  PlayerAlreadyInTeam                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Team                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

E_Team AGT_Bodycam_C::SelectTeam(E_Team PlayerAlreadyInTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "SelectTeam");

	Params::GT_Bodycam_C_SelectTeam Parms{};

	Parms.PlayerAlreadyInTeam = PlayerAlreadyInTeam;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GT_Bodycam.GT_Bodycam_C.ServerSteamID (Server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::ServerSteamID__Server_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "ServerSteamID (Server)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.ServerTravel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::ServerTravel(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "ServerTravel");

	Params::GT_Bodycam_C_ServerTravel Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.ServerTravel (Multicast)
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::ServerTravel__Multicast_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "ServerTravel (Multicast)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.ServerTravel (server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::ServerTravel__server_(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "ServerTravel (server)");

	Params::GT_Bodycam_C_ServerTravel__server_ Parms{};

	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.Slomo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Slomo_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::Slomo(double Slomo_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Slomo");

	Params::GT_Bodycam_C_Slomo Parms{};

	Parms.Slomo_0 = Slomo_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.Slomo (multicast)
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::Slomo__multicast_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Slomo (multicast)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.SlomoCurve__FinishedFunc
// (BlueprintEvent)

void AGT_Bodycam_C::SlomoCurve__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "SlomoCurve__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.SlomoCurve__UpdateFunc
// (BlueprintEvent)

void AGT_Bodycam_C::SlomoCurve__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "SlomoCurve__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.SpawnBomb
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::SpawnBomb(bool* Success_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "SpawnBomb");

	Params::GT_Bodycam_C_SpawnBomb Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success_ != nullptr)
		*Success_ = Parms.Success_;
}


// Function GT_Bodycam.GT_Bodycam_C.SpawnTeamMenu
// (BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::SpawnTeamMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "SpawnTeamMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.SpawnTeamsCharacters
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::SpawnTeamsCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "SpawnTeamsCharacters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.SpawnWinHud (server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::SpawnWinHud__server_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "SpawnWinHud (server)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.StartingMatch (server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    StartingMatch_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::StartingMatch__server_(bool StartingMatch_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "StartingMatch (server)");

	Params::GT_Bodycam_C_StartingMatch__server_ Parms{};

	Parms.StartingMatch_0 = StartingMatch_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.StartingWeapons
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::StartingWeapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "StartingWeapons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.Talk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTalking                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::Talk(bool IsTalking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Talk");

	Params::GT_Bodycam_C_Talk Parms{};

	Parms.IsTalking = IsTalking;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.TeamHasBomb
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_Team                                  Team_Has_Bomb                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::TeamHasBomb(E_Team* Team_Has_Bomb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "TeamHasBomb");

	Params::GT_Bodycam_C_TeamHasBomb Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Team_Has_Bomb != nullptr)
		*Team_Has_Bomb = Parms.Team_Has_Bomb;
}


// Function GT_Bodycam.GT_Bodycam_C.TeamHasBombArray
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FSTR_PCInfo>              Team_Has_Bomb_Return                                   (Parm, OutParm)
// TArray<struct FSTR_PCInfo>              Other_Team_Return                                      (Parm, OutParm)

void AGT_Bodycam_C::TeamHasBombArray(TArray<struct FSTR_PCInfo>* Team_Has_Bomb_Return, TArray<struct FSTR_PCInfo>* Other_Team_Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "TeamHasBombArray");

	Params::GT_Bodycam_C_TeamHasBombArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Team_Has_Bomb_Return != nullptr)
		*Team_Has_Bomb_Return = std::move(Parms.Team_Has_Bomb_Return);

	if (Other_Team_Return != nullptr)
		*Other_Team_Return = std::move(Parms.Other_Team_Return);
}


// Function GT_Bodycam.GT_Bodycam_C.TeamIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   NoneIndex_Return                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MilitaryIndex_Return                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TerroristIndex_Return                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Team                                  TeamNeedPlayer                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TeamEmpty_                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSTR_PCInfo>              Military_Return                                        (Parm, OutParm)
// TArray<struct FSTR_PCInfo>              Terrorist_Return                                       (Parm, OutParm)

void AGT_Bodycam_C::TeamIndex(int32* NoneIndex_Return, int32* MilitaryIndex_Return, int32* TerroristIndex_Return, E_Team* TeamNeedPlayer, bool* TeamEmpty_, TArray<struct FSTR_PCInfo>* Military_Return, TArray<struct FSTR_PCInfo>* Terrorist_Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "TeamIndex");

	Params::GT_Bodycam_C_TeamIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoneIndex_Return != nullptr)
		*NoneIndex_Return = Parms.NoneIndex_Return;

	if (MilitaryIndex_Return != nullptr)
		*MilitaryIndex_Return = Parms.MilitaryIndex_Return;

	if (TerroristIndex_Return != nullptr)
		*TerroristIndex_Return = Parms.TerroristIndex_Return;

	if (TeamNeedPlayer != nullptr)
		*TeamNeedPlayer = Parms.TeamNeedPlayer;

	if (TeamEmpty_ != nullptr)
		*TeamEmpty_ = Parms.TeamEmpty_;

	if (Military_Return != nullptr)
		*Military_Return = std::move(Parms.Military_Return);

	if (Terrorist_Return != nullptr)
		*Terrorist_Return = std::move(Parms.Terrorist_Return);
}


// Function GT_Bodycam.GT_Bodycam_C.Time Count
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::Time_Count(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Time Count");

	Params::GT_Bodycam_C_Time_Count Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.TopScore
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FSTR_PCInfo>              TopScorePcArray_Result                                 (Parm, OutParm)

void AGT_Bodycam_C::TopScore(TArray<struct FSTR_PCInfo>* TopScorePcArray_Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "TopScore");

	Params::GT_Bodycam_C_TopScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TopScorePcArray_Result != nullptr)
		*TopScorePcArray_Result = std::move(Parms.TopScorePcArray_Result);
}


// Function GT_Bodycam.GT_Bodycam_C.TryLaunch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::TryLaunch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "TryLaunch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.Update MapSelection (Hud_MenuScoreboard)
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Selected_Level_Name                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::Update_MapSelection__Hud_MenuScoreboard_(class FName Selected_Level_Name, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Update MapSelection (Hud_MenuScoreboard)");

	Params::GT_Bodycam_C_Update_MapSelection__Hud_MenuScoreboard_ Parms{};

	Parms.Selected_Level_Name = Selected_Level_Name;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.Update ModeInfo (HUD_PC)
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::Update_ModeInfo__HUD_PC_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Update ModeInfo (HUD_PC)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.Update ScoreBoardInit (Hud_MenuScoreboard)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::Update_ScoreBoardInit__Hud_MenuScoreboard_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Update ScoreBoardInit (Hud_MenuScoreboard)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.Update transition (Hud_Transition)
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::Update_transition__Hud_Transition_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Update transition (Hud_Transition)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.Update Waiting For Player (HUD_PC)
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::Update_Waiting_For_Player__HUD_PC_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Update Waiting For Player (HUD_PC)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.Update Warning(Hud-Client)
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InText                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGT_Bodycam_C::Update_Warning_HudMinusClient_(const class FString& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "Update Warning(Hud-Client)");

	Params::GT_Bodycam_C_Update_Warning_HudMinusClient_ Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.UpdateGamemode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameMode                               GameMode_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::UpdateGamemode(EGameMode GameMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "UpdateGamemode");

	Params::GT_Bodycam_C_UpdateGamemode Parms{};

	Parms.GameMode_0 = GameMode_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.UpdateKickVote
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Yes_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "UpdateKickVote");

	Params::GT_Bodycam_C_UpdateKickVote Parms{};

	Parms.Target = std::move(Target);
	Parms.Yes_ = Yes_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.UpdateMapSelection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Selected_Level_Name                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "UpdateMapSelection");

	Params::GT_Bodycam_C_UpdateMapSelection Parms{};

	Parms.Selected_Level_Name = Selected_Level_Name;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.UpdateModeInfo
// (Public, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::UpdateModeInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "UpdateModeInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.UpdateScore
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_Score                       Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::UpdateScore(const struct FSTR_Score& Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "UpdateScore");

	Params::GT_Bodycam_C_UpdateScore Parms{};

	Parms.Score = std::move(Score);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.UpdateTeamCount (Client)
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team__PlayerKilled_                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MilitaryIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TerroristIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Team                                  WiiningTeam                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::UpdateTeamCount__Client_(E_Team Team__PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "UpdateTeamCount (Client)");

	Params::GT_Bodycam_C_UpdateTeamCount__Client_ Parms{};

	Parms.Team__PlayerKilled_ = Team__PlayerKilled_;
	Parms.MilitaryIndex = MilitaryIndex;
	Parms.TerroristIndex = TerroristIndex;
	Parms.WiiningTeam = WiiningTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.UpdateTeamIndex (PlayerKilled)
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team_PlayerKilled_                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MilitaryIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TerroristIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Team                                  WiiningTeam                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "UpdateTeamIndex (PlayerKilled)");

	Params::GT_Bodycam_C_UpdateTeamIndex__PlayerKilled_ Parms{};

	Parms.Team_PlayerKilled_ = Team_PlayerKilled_;
	Parms.MilitaryIndex = MilitaryIndex;
	Parms.TerroristIndex = TerroristIndex;
	Parms.WiiningTeam = WiiningTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.UpdateTeamXP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Win_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::UpdateTeamXP(bool Win_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "UpdateTeamXP");

	Params::GT_Bodycam_C_UpdateTeamXP Parms{};

	Parms.Win_ = Win_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.UpdateTimer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TimeCount_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void AGT_Bodycam_C::UpdateTimer(double TimeCount_0, const class FText& NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "UpdateTimer");

	Params::GT_Bodycam_C_UpdateTimer Parms{};

	Parms.TimeCount_0 = TimeCount_0;
	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.UpdateTransitionMap
// (Public, BlueprintCallable, BlueprintEvent)

void AGT_Bodycam_C::UpdateTransitionMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "UpdateTransitionMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GT_Bodycam.GT_Bodycam_C.UpdateVote (Server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      Player_info                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Yes_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::UpdateVote__Server_(const struct FSTR_PCInfo& Player_info, bool Yes_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "UpdateVote (Server)");

	Params::GT_Bodycam_C_UpdateVote__Server_ Parms{};

	Parms.Player_info = std::move(Player_info);
	Parms.Yes_ = Yes_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.UpdateWarning
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           String                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGT_Bodycam_C::UpdateWarning(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "UpdateWarning");

	Params::GT_Bodycam_C_UpdateWarning Parms{};

	Parms.String = std::move(String);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.WaitingForPlayer (Server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Waiting_For_Player_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGT_Bodycam_C::WaitingForPlayer__Server_(bool Waiting_For_Player_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "WaitingForPlayer (Server)");

	Params::GT_Bodycam_C_WaitingForPlayer__Server_ Parms{};

	Parms.Waiting_For_Player_0 = Waiting_For_Player_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GT_Bodycam.GT_Bodycam_C.WinningTeam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_PCInfo>              WinningTeam_Return                                     (Parm, OutParm)
// TArray<struct FSTR_PCInfo>              LoosingTeam_Return                                     (Parm, OutParm)

void AGT_Bodycam_C::WinningTeam(TArray<struct FSTR_PCInfo>* WinningTeam_Return, TArray<struct FSTR_PCInfo>* LoosingTeam_Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GT_Bodycam_C", "WinningTeam");

	Params::GT_Bodycam_C_WinningTeam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WinningTeam_Return != nullptr)
		*WinningTeam_Return = std::move(Parms.WinningTeam_Return);

	if (LoosingTeam_Return != nullptr)
		*LoosingTeam_Return = std::move(Parms.LoosingTeam_Return);
}

}

