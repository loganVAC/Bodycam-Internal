#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HostMigrationSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct HostMigrationSystem.HMS_ActorReference
// 0x0018 (0x0018 - 0x0000)
struct FHMS_ActorReference final
{
public:
	TWeakObjectPtr<class AActor>                  ActorRef;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ActorID;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHMS_ActorReference) == 0x000008, "Wrong alignment on FHMS_ActorReference");
static_assert(sizeof(FHMS_ActorReference) == 0x000018, "Wrong size on FHMS_ActorReference");
static_assert(offsetof(FHMS_ActorReference, ActorRef) == 0x000000, "Member 'FHMS_ActorReference::ActorRef' has a wrong offset!");
static_assert(offsetof(FHMS_ActorReference, ActorID) == 0x000008, "Member 'FHMS_ActorReference::ActorID' has a wrong offset!");
static_assert(offsetof(FHMS_ActorReference, ActorClass) == 0x000010, "Member 'FHMS_ActorReference::ActorClass' has a wrong offset!");

// ScriptStruct HostMigrationSystem.HMS_ByteBuffer
// 0x0010 (0x0010 - 0x0000)
struct FHMS_ByteBuffer final
{
public:
	TArray<uint8>                                 Buffer;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHMS_ByteBuffer) == 0x000008, "Wrong alignment on FHMS_ByteBuffer");
static_assert(sizeof(FHMS_ByteBuffer) == 0x000010, "Wrong size on FHMS_ByteBuffer");
static_assert(offsetof(FHMS_ByteBuffer, Buffer) == 0x000000, "Member 'FHMS_ByteBuffer::Buffer' has a wrong offset!");

// ScriptStruct HostMigrationSystem.HMS_ByteBufferTransferState
// 0x0030 (0x0030 - 0x0000)
struct FHMS_ByteBufferTransferState final
{
public:
	struct FHMS_ByteBuffer                        SourceBuffer;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int64                                         SourceBytesSent;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHMS_ByteBuffer                        RemoteDestintaionBuffer;                           // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int64                                         RemoteTargetBytes;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHMS_ByteBufferTransferState) == 0x000008, "Wrong alignment on FHMS_ByteBufferTransferState");
static_assert(sizeof(FHMS_ByteBufferTransferState) == 0x000030, "Wrong size on FHMS_ByteBufferTransferState");
static_assert(offsetof(FHMS_ByteBufferTransferState, SourceBuffer) == 0x000000, "Member 'FHMS_ByteBufferTransferState::SourceBuffer' has a wrong offset!");
static_assert(offsetof(FHMS_ByteBufferTransferState, SourceBytesSent) == 0x000010, "Member 'FHMS_ByteBufferTransferState::SourceBytesSent' has a wrong offset!");
static_assert(offsetof(FHMS_ByteBufferTransferState, RemoteDestintaionBuffer) == 0x000018, "Member 'FHMS_ByteBufferTransferState::RemoteDestintaionBuffer' has a wrong offset!");
static_assert(offsetof(FHMS_ByteBufferTransferState, RemoteTargetBytes) == 0x000028, "Member 'FHMS_ByteBufferTransferState::RemoteTargetBytes' has a wrong offset!");

// ScriptStruct HostMigrationSystem.HMS_StringToByteBufferMap
// 0x0050 (0x0050 - 0x0000)
struct FHMS_StringToByteBufferMap final
{
public:
	TMap<class FString, struct FHMS_ByteBuffer>   Map;                                               // 0x0000(0x0050)(BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHMS_StringToByteBufferMap) == 0x000008, "Wrong alignment on FHMS_StringToByteBufferMap");
static_assert(sizeof(FHMS_StringToByteBufferMap) == 0x000050, "Wrong size on FHMS_StringToByteBufferMap");
static_assert(offsetof(FHMS_StringToByteBufferMap, Map) == 0x000000, "Member 'FHMS_StringToByteBufferMap::Map' has a wrong offset!");

// ScriptStruct HostMigrationSystem.HMS_ActorSave
// 0x0120 (0x0120 - 0x0000)
struct FHMS_ActorSave final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransform;                                    // 0x0010(0x0060)(BlueprintVisible, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ActorID;                                           // 0x0070(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FHMS_StringToByteBufferMap> ComponentsPropertyBuffers;                         // 0x0078(0x0050)(BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
	struct FHMS_StringToByteBufferMap             PropertyBuffers;                                   // 0x00C8(0x0050)(BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHMS_ActorSave) == 0x000010, "Wrong alignment on FHMS_ActorSave");
static_assert(sizeof(FHMS_ActorSave) == 0x000120, "Wrong size on FHMS_ActorSave");
static_assert(offsetof(FHMS_ActorSave, ActorClass) == 0x000000, "Member 'FHMS_ActorSave::ActorClass' has a wrong offset!");
static_assert(offsetof(FHMS_ActorSave, ActorTransform) == 0x000010, "Member 'FHMS_ActorSave::ActorTransform' has a wrong offset!");
static_assert(offsetof(FHMS_ActorSave, ActorID) == 0x000070, "Member 'FHMS_ActorSave::ActorID' has a wrong offset!");
static_assert(offsetof(FHMS_ActorSave, ComponentsPropertyBuffers) == 0x000078, "Member 'FHMS_ActorSave::ComponentsPropertyBuffers' has a wrong offset!");
static_assert(offsetof(FHMS_ActorSave, PropertyBuffers) == 0x0000C8, "Member 'FHMS_ActorSave::PropertyBuffers' has a wrong offset!");

// ScriptStruct HostMigrationSystem.HMS_PlayerSave
// 0x00C8 (0x00C8 - 0x0000)
struct FHMS_PlayerSave final
{
public:
	class FString                                 PlayerID;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHMS_ActorReference                    PossessedPawnActorReference;                       // 0x0010(0x0018)(BlueprintVisible, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHMS_StringToByteBufferMap             PlayerStatePropertyBuffers;                        // 0x0028(0x0050)(BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
	struct FHMS_StringToByteBufferMap             PlayerControllerPropertyBuffers;                   // 0x0078(0x0050)(BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHMS_PlayerSave) == 0x000008, "Wrong alignment on FHMS_PlayerSave");
static_assert(sizeof(FHMS_PlayerSave) == 0x0000C8, "Wrong size on FHMS_PlayerSave");
static_assert(offsetof(FHMS_PlayerSave, PlayerID) == 0x000000, "Member 'FHMS_PlayerSave::PlayerID' has a wrong offset!");
static_assert(offsetof(FHMS_PlayerSave, PossessedPawnActorReference) == 0x000010, "Member 'FHMS_PlayerSave::PossessedPawnActorReference' has a wrong offset!");
static_assert(offsetof(FHMS_PlayerSave, PlayerStatePropertyBuffers) == 0x000028, "Member 'FHMS_PlayerSave::PlayerStatePropertyBuffers' has a wrong offset!");
static_assert(offsetof(FHMS_PlayerSave, PlayerControllerPropertyBuffers) == 0x000078, "Member 'FHMS_PlayerSave::PlayerControllerPropertyBuffers' has a wrong offset!");

// ScriptStruct HostMigrationSystem.HMS_GameSave
// 0x0120 (0x0120 - 0x0000)
struct FHMS_GameSave final
{
public:
	TArray<struct FHMS_PlayerSave>                PlayerSaves;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FHMS_ActorSave>                 ActorSaves;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHMS_StringToByteBufferMap             GameModePropertyBuffers;                           // 0x0030(0x0050)(BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
	struct FHMS_StringToByteBufferMap             GameStatePropertyBuffers;                          // 0x0080(0x0050)(BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
	struct FHMS_StringToByteBufferMap             CustomGameSaveDataObjectPropertyBuffers;           // 0x00D0(0x0050)(BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHMS_GameSave) == 0x000008, "Wrong alignment on FHMS_GameSave");
static_assert(sizeof(FHMS_GameSave) == 0x000120, "Wrong size on FHMS_GameSave");
static_assert(offsetof(FHMS_GameSave, PlayerSaves) == 0x000000, "Member 'FHMS_GameSave::PlayerSaves' has a wrong offset!");
static_assert(offsetof(FHMS_GameSave, ActorSaves) == 0x000010, "Member 'FHMS_GameSave::ActorSaves' has a wrong offset!");
static_assert(offsetof(FHMS_GameSave, LevelName) == 0x000020, "Member 'FHMS_GameSave::LevelName' has a wrong offset!");
static_assert(offsetof(FHMS_GameSave, GameModePropertyBuffers) == 0x000030, "Member 'FHMS_GameSave::GameModePropertyBuffers' has a wrong offset!");
static_assert(offsetof(FHMS_GameSave, GameStatePropertyBuffers) == 0x000080, "Member 'FHMS_GameSave::GameStatePropertyBuffers' has a wrong offset!");
static_assert(offsetof(FHMS_GameSave, CustomGameSaveDataObjectPropertyBuffers) == 0x0000D0, "Member 'FHMS_GameSave::CustomGameSaveDataObjectPropertyBuffers' has a wrong offset!");

// ScriptStruct HostMigrationSystem.HMS_MigrationFlags
// 0x0002 (0x0002 - 0x0000)
struct FHMS_MigrationFlags final
{
public:
	bool                                          IsGameRehosted;                                    // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLastSaveLoaded;                                  // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHMS_MigrationFlags) == 0x000001, "Wrong alignment on FHMS_MigrationFlags");
static_assert(sizeof(FHMS_MigrationFlags) == 0x000002, "Wrong size on FHMS_MigrationFlags");
static_assert(offsetof(FHMS_MigrationFlags, IsGameRehosted) == 0x000000, "Member 'FHMS_MigrationFlags::IsGameRehosted' has a wrong offset!");
static_assert(offsetof(FHMS_MigrationFlags, IsLastSaveLoaded) == 0x000001, "Member 'FHMS_MigrationFlags::IsLastSaveLoaded' has a wrong offset!");

// ScriptStruct HostMigrationSystem.HMS_CreateGameSaveParams
// 0x0001 (0x0001 - 0x0000)
struct FHMS_CreateGameSaveParams final
{
public:
	bool                                          IgnoreHostPawn;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHMS_CreateGameSaveParams) == 0x000001, "Wrong alignment on FHMS_CreateGameSaveParams");
static_assert(sizeof(FHMS_CreateGameSaveParams) == 0x000001, "Wrong size on FHMS_CreateGameSaveParams");
static_assert(offsetof(FHMS_CreateGameSaveParams, IgnoreHostPawn) == 0x000000, "Member 'FHMS_CreateGameSaveParams::IgnoreHostPawn' has a wrong offset!");

// ScriptStruct HostMigrationSystem.HMS_MigrationSettings
// 0x0028 (0x0028 - 0x0000)
struct FHMS_MigrationSettings final
{
public:
	TSubclassOf<class UHMS_CustomGameSaveDataObject> CustomGameSaveDataObjectClass;                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHMS_CreateGameSaveParams              CreateGameSaveUpdateParams;                        // 0x0008(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          AutoStartGameSaveUpdate;                           // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GameSaveUpdatePeriod;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousPlayersReconnectTimeout;                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastGameSaveTransferPeriod;                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastGameSaveTransferRPCsPerTick;                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         LastGameSaveTransferChunkSize;                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHMS_MigrationSettings) == 0x000008, "Wrong alignment on FHMS_MigrationSettings");
static_assert(sizeof(FHMS_MigrationSettings) == 0x000028, "Wrong size on FHMS_MigrationSettings");
static_assert(offsetof(FHMS_MigrationSettings, CustomGameSaveDataObjectClass) == 0x000000, "Member 'FHMS_MigrationSettings::CustomGameSaveDataObjectClass' has a wrong offset!");
static_assert(offsetof(FHMS_MigrationSettings, CreateGameSaveUpdateParams) == 0x000008, "Member 'FHMS_MigrationSettings::CreateGameSaveUpdateParams' has a wrong offset!");
static_assert(offsetof(FHMS_MigrationSettings, AutoStartGameSaveUpdate) == 0x000009, "Member 'FHMS_MigrationSettings::AutoStartGameSaveUpdate' has a wrong offset!");
static_assert(offsetof(FHMS_MigrationSettings, GameSaveUpdatePeriod) == 0x00000C, "Member 'FHMS_MigrationSettings::GameSaveUpdatePeriod' has a wrong offset!");
static_assert(offsetof(FHMS_MigrationSettings, PreviousPlayersReconnectTimeout) == 0x000010, "Member 'FHMS_MigrationSettings::PreviousPlayersReconnectTimeout' has a wrong offset!");
static_assert(offsetof(FHMS_MigrationSettings, LastGameSaveTransferPeriod) == 0x000014, "Member 'FHMS_MigrationSettings::LastGameSaveTransferPeriod' has a wrong offset!");
static_assert(offsetof(FHMS_MigrationSettings, LastGameSaveTransferRPCsPerTick) == 0x000018, "Member 'FHMS_MigrationSettings::LastGameSaveTransferRPCsPerTick' has a wrong offset!");
static_assert(offsetof(FHMS_MigrationSettings, LastGameSaveTransferChunkSize) == 0x000020, "Member 'FHMS_MigrationSettings::LastGameSaveTransferChunkSize' has a wrong offset!");

// ScriptStruct HostMigrationSystem.HMS_CreateGameSaveData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FHMS_CreateGameSaveData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHMS_CreateGameSaveData) == 0x000008, "Wrong alignment on FHMS_CreateGameSaveData");
static_assert(sizeof(FHMS_CreateGameSaveData) == 0x000020, "Wrong size on FHMS_CreateGameSaveData");

}

