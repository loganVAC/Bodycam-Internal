#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimBP_Zombie

#include "Basic.hpp"

#include "AnimBP_Zombie_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AnimBP_Zombie.AnimBP_Zombie_C
// 0x0C30 (0x0F80 - 0x0350)
class UAnimBP_Zombie_C final : public UAnimInstance
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct AnimBP_Zombie::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0358(0x0080)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x03D8(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x03E0(0x0008)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x03E8(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0430(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0478(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x04C0(0x0108)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x05C8(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0638(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x0658(0x00C8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_5;                   // 0x0720(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0768(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0790(0x0028)()
	struct FAnimNode_PoseSnapshot                 AnimGraphNode_PoseSnapshot;                        // 0x07B8(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0848(0x0020)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0868(0x00E0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x0948(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x0990(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_4;                   // 0x09D8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x0A20(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0A68(0x00E0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0B48(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x0B90(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0BD8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0C20(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0C68(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0CB0(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x0CF8(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x0D40(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0D88(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0DD0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0DF0(0x00C8)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0EB8(0x0020)()
	class AZombie_C*                              Zombie;                                            // 0x0ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomBool;                                        // 0x0EE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EE1[0x7];                                      // 0x0EE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FlailRate;                                         // 0x0EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir_;                                          // 0x0EF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EF1[0x7];                                      // 0x0EF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Speed;                                             // 0x0EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Start_Position;                                    // 0x0F00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F04[0x4];                                      // 0x0F04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0F08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWW_RagdollSystem_C*                    WW_Ragdoll_System;                                 // 0x0F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Sequence;                                          // 0x0F28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash)
	class ACharacter*                             Near_Player;                                       // 0x0F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HeadRotation;                                      // 0x0F38(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Ragdoll_State;                                     // 0x0F50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F51[0x7];                                      // 0x0F51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Last_Ragdoll_Velocity;                             // 0x0F58(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ground_Distance;                                   // 0x0F70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Suffer_;                                           // 0x0F74(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Burned;                                            // 0x0F75(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintBeginPlay();
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_Zombie_AnimGraphNode_BlendListByBool_0EEA284E476B9A5B21787A9EE7A08868();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_Zombie_AnimGraphNode_BlendListByBool_783A122445F24F4D155FFB8D7AC1607C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_Zombie_AnimGraphNode_BlendListByBool_78FC18C146A9D84C5A642C9DFA2DA6F5();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_Zombie_AnimGraphNode_BlendListByBool_85CEDE4D4ACAAA67B7D7588AF4EFB278();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_Zombie_AnimGraphNode_BlendListByBool_BBA9B2C04A63A42872961DB793F8E4B2();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_Zombie_AnimGraphNode_BlendListByBool_CDD2B9794718570DD6B321A86510982C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_Zombie_AnimGraphNode_BlendSpacePlayer_9122C465453C07CF9400A4B60ECE1AFE();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_Zombie_AnimGraphNode_SequencePlayer_C343561C4B74D02AA1B9B885E2B53FA9();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_Zombie_AnimGraphNode_SequencePlayer_EEB5EB444D884DE1CD3BC49F0FFAB9F6();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_Zombie_AnimGraphNode_SequencePlayer_F45C02974E945CF855038BBFBE422A7B();
	void ExecuteUbergraph_AnimBP_Zombie(int32 EntryPoint);
	void UpdateRagdollValues();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimBP_Zombie_C">();
	}
	static class UAnimBP_Zombie_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimBP_Zombie_C>();
	}
};
static_assert(alignof(UAnimBP_Zombie_C) == 0x000010, "Wrong alignment on UAnimBP_Zombie_C");
static_assert(sizeof(UAnimBP_Zombie_C) == 0x000F80, "Wrong size on UAnimBP_Zombie_C");
static_assert(offsetof(UAnimBP_Zombie_C, UberGraphFrame) == 0x000350, "Member 'UAnimBP_Zombie_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, __AnimBlueprintMutables) == 0x000358, "Member 'UAnimBP_Zombie_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimBlueprintExtension_PropertyAccess) == 0x0003D8, "Member 'UAnimBP_Zombie_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimBlueprintExtension_Base) == 0x0003E0, "Member 'UAnimBP_Zombie_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_Slot_2) == 0x0003E8, "Member 'UAnimBP_Zombie_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_Slot_1) == 0x000430, "Member 'UAnimBP_Zombie_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_Slot) == 0x000478, "Member 'UAnimBP_Zombie_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_SaveCachedPose) == 0x0004C0, "Member 'UAnimBP_Zombie_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_BlendSpacePlayer) == 0x0005C8, "Member 'UAnimBP_Zombie_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_StateResult_2) == 0x000638, "Member 'UAnimBP_Zombie_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_StateMachine_1) == 0x000658, "Member 'UAnimBP_Zombie_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_BlendListByBool_5) == 0x000720, "Member 'UAnimBP_Zombie_C::AnimGraphNode_BlendListByBool_5' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_TransitionResult_1) == 0x000768, "Member 'UAnimBP_Zombie_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_TransitionResult) == 0x000790, "Member 'UAnimBP_Zombie_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_PoseSnapshot) == 0x0007B8, "Member 'UAnimBP_Zombie_C::AnimGraphNode_PoseSnapshot' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_StateResult_1) == 0x000848, "Member 'UAnimBP_Zombie_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000868, "Member 'UAnimBP_Zombie_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_SequencePlayer_7) == 0x000948, "Member 'UAnimBP_Zombie_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_SequencePlayer_6) == 0x000990, "Member 'UAnimBP_Zombie_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_BlendListByBool_4) == 0x0009D8, "Member 'UAnimBP_Zombie_C::AnimGraphNode_BlendListByBool_4' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_SequencePlayer_5) == 0x000A20, "Member 'UAnimBP_Zombie_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_LayeredBoneBlend) == 0x000A68, "Member 'UAnimBP_Zombie_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_SequencePlayer_4) == 0x000B48, "Member 'UAnimBP_Zombie_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_BlendListByBool_3) == 0x000B90, "Member 'UAnimBP_Zombie_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_SequencePlayer_3) == 0x000BD8, "Member 'UAnimBP_Zombie_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_SequencePlayer_2) == 0x000C20, "Member 'UAnimBP_Zombie_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_SequencePlayer_1) == 0x000C68, "Member 'UAnimBP_Zombie_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_SequencePlayer) == 0x000CB0, "Member 'UAnimBP_Zombie_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_BlendListByBool_2) == 0x000CF8, "Member 'UAnimBP_Zombie_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_BlendListByBool_1) == 0x000D40, "Member 'UAnimBP_Zombie_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_BlendListByBool) == 0x000D88, "Member 'UAnimBP_Zombie_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_StateResult) == 0x000DD0, "Member 'UAnimBP_Zombie_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_StateMachine) == 0x000DF0, "Member 'UAnimBP_Zombie_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, AnimGraphNode_Root) == 0x000EB8, "Member 'UAnimBP_Zombie_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, Zombie) == 0x000ED8, "Member 'UAnimBP_Zombie_C::Zombie' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, RandomBool) == 0x000EE0, "Member 'UAnimBP_Zombie_C::RandomBool' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, FlailRate) == 0x000EE8, "Member 'UAnimBP_Zombie_C::FlailRate' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, IsInAir_) == 0x000EF0, "Member 'UAnimBP_Zombie_C::IsInAir_' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, Speed) == 0x000EF8, "Member 'UAnimBP_Zombie_C::Speed' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, Start_Position) == 0x000F00, "Member 'UAnimBP_Zombie_C::Start_Position' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, Velocity) == 0x000F08, "Member 'UAnimBP_Zombie_C::Velocity' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, WW_Ragdoll_System) == 0x000F20, "Member 'UAnimBP_Zombie_C::WW_Ragdoll_System' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, Sequence) == 0x000F28, "Member 'UAnimBP_Zombie_C::Sequence' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, Near_Player) == 0x000F30, "Member 'UAnimBP_Zombie_C::Near_Player' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, HeadRotation) == 0x000F38, "Member 'UAnimBP_Zombie_C::HeadRotation' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, Ragdoll_State) == 0x000F50, "Member 'UAnimBP_Zombie_C::Ragdoll_State' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, Last_Ragdoll_Velocity) == 0x000F58, "Member 'UAnimBP_Zombie_C::Last_Ragdoll_Velocity' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, Ground_Distance) == 0x000F70, "Member 'UAnimBP_Zombie_C::Ground_Distance' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, Suffer_) == 0x000F74, "Member 'UAnimBP_Zombie_C::Suffer_' has a wrong offset!");
static_assert(offsetof(UAnimBP_Zombie_C, Burned) == 0x000F75, "Member 'UAnimBP_Zombie_C::Burned' has a wrong offset!");

}

