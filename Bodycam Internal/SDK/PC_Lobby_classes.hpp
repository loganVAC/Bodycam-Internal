#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PC_Lobby

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Team_structs.hpp"
#include "GameMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PC_Lobby.PC_Lobby_C
// 0x00A0 (0x08F0 - 0x0850)
class APC_Lobby_C final : public APlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0850(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioCaptureComponent*                 AudioCaptureVOIP;                                  // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_MenuControllerComponent_C*          BP_MenuControllerComponent;                        // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 SteamID;                                           // 0x0868(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	class UKickOverlay_C*                         HUD_KickOverlay;                                   // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         SteamIDMuted;                                      // 0x0880(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         KickedPlayerVoted;                                 // 0x0890(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_Team                                        Team;                                              // 0x08A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CaptureTESTVOIP_;                                  // 0x08A1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_8A2[0x6];                                      // 0x08A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVOIPTalker*                            Voip;                                              // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTalking;                                         // 0x08B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B1[0x3];                                      // 0x08B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RankScore;                                         // 0x08B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rank_;                                             // 0x08B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8BC[0x4];                                      // 0x08BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Current_Rank;                                      // 0x08C0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Kick_Reason;                                       // 0x08D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AddReadyPlayer__Client_(class FName LevelsName);
	void AddReadyPlayer__Server_(class FName InputPin);
	void AssignTeam__Server_(const struct FSTR_PCStats& Item_Stats, E_Team Team_0);
	void BndEvt__PC_Lobby_AudioCaptureVOIP_K2Node_ComponentBoundEvent_0_OnSynthEnvelopeValue__DelegateSignature(const float EnvelopeValue);
	void BreakTimer();
	void CanCreateKickVote(bool* CanCreateKickVote_);
	void CanKickThisPlayer_(const class FString& PlayerID, bool* True_);
	void Clear_GameInstance__Client_();
	void ClearMap();
	void Event_Ragdoll_End();
	void EventRagdollStart();
	void ExecuteUbergraph_PC_Lobby(int32 EntryPoint);
	void Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component);
	void Get_Stamina(double* Stamina);
	void GetBlured(double* Blured);
	void GetBurnedRef(class USceneComponent** BurnedMesh);
	void GetCurrentRank(int32* RankScore_0, int32* Rank__0, class FText* CurrentRank);
	void GetFlashBangEffect(double* FlashEffect);
	void GetGameMode(struct FSTR_GamemodeWinInfo* GameMode);
	void GetHealth(double* Health);
	void GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote);
	void GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController);
	void GetMutePlayer(TArray<class FString>* MutePlayer);
	void GetNewRank(class FText* Name_0, class UTexture2D** Image, int32* RankScore_0, int32* RankPosition, int32* RankDivision, double* PreviousRankProgress, double* RankProgress, bool* NewRank_, struct FSlateColor* Color, int32* Rank_Integer);
	void GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected);
	void GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer);
	void GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_);
	void GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System);
	void GetReady_(bool* IsReady_);
	void GetServerSteamID(class FString* SteamID_0);
	void GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons);
	void GetSteamID(class FString* SteamID_0);
	void GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant);
	void GetTeam(E_Team* Team_0);
	void GetTeamList(E_Team Team_0, TArray<struct FSTR_PCInfo>* Info);
	void GetTopScore(TArray<struct FSTR_PCInfo>* TopScore);
	void Init_Rank();
	void Init_SteamID__Client_();
	void Init_SteamID__Server_(const class FString& SteamID_0, E_Team Team_0);
	void InitScoreBoard();
	void InitVOIP();
	void InpActEvt_F1_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_F2_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_V_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_V_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void IsDead(bool* Dead_);
	void IsDestroyabe_(bool* Destroyable_);
	void IsReady_(bool IsReady__0);
	void IsStress(bool* Yes_);
	void IsTalking_(bool* IsTalking__0);
	void IsTalking___Server_(bool IsTalking__0);
	void Kick_Player__server_(const struct FSTR_KickVote& Player_info);
	void Kick_(const struct FSTR_PCInfo& Target);
	void KickPlayer(const struct FSTR_KickVote& PlayerInfo);
	void KickPlayer__Client_(const struct FSTR_KickVote& Player_info);
	void KickVote(bool Yes_);
	void KickVote__Server_(const struct FSTR_PCInfo& Player_info, bool Yes_);
	void KillMenu__Client_();
	void MuteID(const class FString& SteamID_0);
	void NewKickVote(const struct FSTR_PCInfo& Target);
	void On_Try_selectTeam(E_Team Team_0);
	void OnCallback_14E63BBC438A94FA691929ABFADBEF74(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_D2DBA09F41E6113C2A70CF9D8A11AC3D(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnPlayerDeath(class APlayerController* PC);
	void OnRep_Ready_();
	void OnRep_SteamID();
	void OnTrySelectTeam(E_Team Team_0);
	const struct FTransform RandomSpawn();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePossess(class APawn* PossessedPawn);
	void ServerTravel(double Delay);
	void SetActiveTESTVOIP(bool bNewActive);
	void Slomo(double Slomo_0);
	void Spawn_Character__Server_(const struct FTransform& SpawnTransform);
	void Spawn_Customizable_Character__Server_();
	void Talk(bool IsTalking_0);
	void Update_ControlRotation(const struct FRotator& NewRotation);
	void Update_Death(int32 Death, bool Set);
	void Update_Kill(int32 Kill_);
	void Update_Team_Selection__HUD_(bool Remove_);
	void UpdateGamemode(EGameMode GameMode);
	void UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_);
	void UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0);
	void UpdateModeInfo();
	void UpdateScore(const struct FSTR_Score& Score);
	void UpdateScoreBoard();
	void UpdateTeam__Client_(E_Team Team_0);
	void UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamXP(bool Win_);
	void UpdateTimer(double TimeCount, const class FText& NewParam);
	void UpdateTransitionMap();
	void UpdateWarning(const class FString& String);
	void UpdateXp(int32 Xp);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PC_Lobby_C">();
	}
	static class APC_Lobby_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APC_Lobby_C>();
	}
};
static_assert(alignof(APC_Lobby_C) == 0x000008, "Wrong alignment on APC_Lobby_C");
static_assert(sizeof(APC_Lobby_C) == 0x0008F0, "Wrong size on APC_Lobby_C");
static_assert(offsetof(APC_Lobby_C, UberGraphFrame) == 0x000850, "Member 'APC_Lobby_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, AudioCaptureVOIP) == 0x000858, "Member 'APC_Lobby_C::AudioCaptureVOIP' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, BP_MenuControllerComponent) == 0x000860, "Member 'APC_Lobby_C::BP_MenuControllerComponent' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, SteamID) == 0x000868, "Member 'APC_Lobby_C::SteamID' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, HUD_KickOverlay) == 0x000878, "Member 'APC_Lobby_C::HUD_KickOverlay' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, SteamIDMuted) == 0x000880, "Member 'APC_Lobby_C::SteamIDMuted' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, KickedPlayerVoted) == 0x000890, "Member 'APC_Lobby_C::KickedPlayerVoted' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, Team) == 0x0008A0, "Member 'APC_Lobby_C::Team' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, CaptureTESTVOIP_) == 0x0008A1, "Member 'APC_Lobby_C::CaptureTESTVOIP_' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, Voip) == 0x0008A8, "Member 'APC_Lobby_C::Voip' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, IsTalking) == 0x0008B0, "Member 'APC_Lobby_C::IsTalking' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, RankScore) == 0x0008B4, "Member 'APC_Lobby_C::RankScore' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, Rank_) == 0x0008B8, "Member 'APC_Lobby_C::Rank_' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, Current_Rank) == 0x0008C0, "Member 'APC_Lobby_C::Current_Rank' has a wrong offset!");
static_assert(offsetof(APC_Lobby_C, Kick_Reason) == 0x0008D8, "Member 'APC_Lobby_C::Kick_Reason' has a wrong offset!");

}

