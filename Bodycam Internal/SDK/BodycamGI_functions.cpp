#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BodycamGI

#include "Basic.hpp"

#include "BodycamGI_classes.hpp"
#include "BodycamGI_parameters.hpp"


namespace SDK
{

// Function BodycamGI.BodycamGI_C.BreakTimer
// (Public, BlueprintCallable, BlueprintEvent)

void UBodycamGI_C::BreakTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "BreakTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.CanCreateKickVote
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanCreateKickVote_                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::CanCreateKickVote(bool* CanCreateKickVote_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "CanCreateKickVote");

	Params::BodycamGI_C_CanCreateKickVote Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanCreateKickVote_ != nullptr)
		*CanCreateKickVote_ = Parms.CanCreateKickVote_;
}


// Function BodycamGI.BodycamGI_C.CanKickThisPlayer?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    True_                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::CanKickThisPlayer_(const class FString& PlayerID, bool* True_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "CanKickThisPlayer?");

	Params::BodycamGI_C_CanKickThisPlayer_ Parms{};

	Parms.PlayerID = std::move(PlayerID);

	UObject::ProcessEvent(Func, &Parms);

	if (True_ != nullptr)
		*True_ = Parms.True_;
}


// Function BodycamGI.BodycamGI_C.Change Leaderboard
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ELeaderboardClass                       EN_LeadboardClass                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESteamLeaderboardUploadScoreMethod      UploadScoreMethod                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::Change_Leaderboard(int32 Amount, ELeaderboardClass EN_LeadboardClass, ESteamLeaderboardUploadScoreMethod UploadScoreMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "Change Leaderboard");

	Params::BodycamGI_C_Change_Leaderboard Parms{};

	Parms.Amount = Amount;
	Parms.EN_LeadboardClass = EN_LeadboardClass;
	Parms.UploadScoreMethod = UploadScoreMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.CHANGE LOBBY ACCESS
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InInt                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::CHANGE_LOBBY_ACCESS(int32 InInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "CHANGE LOBBY ACCESS");

	Params::BodycamGI_C_CHANGE_LOBBY_ACCESS Parms{};

	Parms.InInt = InInt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.ClearMap
// (Public, BlueprintCallable, BlueprintEvent)

void UBodycamGI_C::ClearMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "ClearMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.Completed_F233AEC544D6A9F4EDF74FB6412FDE9B
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::Completed_F233AEC544D6A9F4EDF74FB6412FDE9B(class USaveGame* SaveGame, bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "Completed_F233AEC544D6A9F4EDF74FB6412FDE9B");

	Params::BodycamGI_C_Completed_F233AEC544D6A9F4EDF74FB6412FDE9B Parms{};

	Parms.SaveGame = SaveGame;
	Parms.bSuccess = bSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.Event Ragdoll End
// (Public, BlueprintCallable, BlueprintEvent)

void UBodycamGI_C::Event_Ragdoll_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "Event Ragdoll End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.EventRagdollStart
// (Public, BlueprintCallable, BlueprintEvent)

void UBodycamGI_C::EventRagdollStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "EventRagdollStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.ExecuteUbergraph_BodycamGI
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::ExecuteUbergraph_BodycamGI(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "ExecuteUbergraph_BodycamGI");

	Params::BodycamGI_C_ExecuteUbergraph_BodycamGI Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.Get BP Menu Controller Component
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MenuControllerComponent_C*    BP_Menu_Controller_Component                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "Get BP Menu Controller Component");

	Params::BodycamGI_C_Get_BP_Menu_Controller_Component Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BP_Menu_Controller_Component != nullptr)
		*BP_Menu_Controller_Component = Parms.BP_Menu_Controller_Component;
}


// Function BodycamGI.BodycamGI_C.Get Stamina
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Stamina                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::Get_Stamina(double* Stamina)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "Get Stamina");

	Params::BodycamGI_C_Get_Stamina Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Stamina != nullptr)
		*Stamina = Parms.Stamina;
}


// Function BodycamGI.BodycamGI_C.GetBlured
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Blured                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetBlured(double* Blured)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetBlured");

	Params::BodycamGI_C_GetBlured Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Blured != nullptr)
		*Blured = Parms.Blured;
}


// Function BodycamGI.BodycamGI_C.GetBurnedRef
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  BurnedMesh                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetBurnedRef(class USceneComponent** BurnedMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetBurnedRef");

	Params::BodycamGI_C_GetBurnedRef Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BurnedMesh != nullptr)
		*BurnedMesh = Parms.BurnedMesh;
}


// Function BodycamGI.BodycamGI_C.GetCurrentLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CurrentLevelName                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetCurrentLevel(class FName* CurrentLevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetCurrentLevel");

	Params::BodycamGI_C_GetCurrentLevel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentLevelName != nullptr)
		*CurrentLevelName = Parms.CurrentLevelName;
}


// Function BodycamGI.BodycamGI_C.GetCurrentPlayTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PlayTimeInSeconds                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetCurrentPlayTime(double* PlayTimeInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetCurrentPlayTime");

	Params::BodycamGI_C_GetCurrentPlayTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayTimeInSeconds != nullptr)
		*PlayTimeInSeconds = Parms.PlayTimeInSeconds;
}


// Function BodycamGI.BodycamGI_C.GetCurrentRank
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RankScore                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Rank_                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             CurrentRank                                            (Parm, OutParm)

void UBodycamGI_C::GetCurrentRank(int32* RankScore, int32* Rank_, class FText* CurrentRank)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetCurrentRank");

	Params::BodycamGI_C_GetCurrentRank Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RankScore != nullptr)
		*RankScore = Parms.RankScore;

	if (Rank_ != nullptr)
		*Rank_ = Parms.Rank_;

	if (CurrentRank != nullptr)
		*CurrentRank = std::move(Parms.CurrentRank);
}


// Function BodycamGI.BodycamGI_C.GetDivision
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RankDivision                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetDivision(int32 Min, int32* RankDivision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetDivision");

	Params::BodycamGI_C_GetDivision Parms{};

	Parms.Min = Min;

	UObject::ProcessEvent(Func, &Parms);

	if (RankDivision != nullptr)
		*RankDivision = Parms.RankDivision;
}


// Function BodycamGI.BodycamGI_C.GetFlashBangEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  FlashEffect                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetFlashBangEffect(double* FlashEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetFlashBangEffect");

	Params::BodycamGI_C_GetFlashBangEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FlashEffect != nullptr)
		*FlashEffect = Parms.FlashEffect;
}


// Function BodycamGI.BodycamGI_C.GetGameMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_GamemodeWinInfo             GameMode_0                                             (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetGameMode(struct FSTR_GamemodeWinInfo* GameMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetGameMode");

	Params::BodycamGI_C_GetGameMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GameMode_0 != nullptr)
		*GameMode_0 = std::move(Parms.GameMode_0);
}


// Function BodycamGI.BodycamGI_C.GetHealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Health                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetHealth(double* Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetHealth");

	Params::BodycamGI_C_GetHealth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Health != nullptr)
		*Health = Parms.Health;
}


// Function BodycamGI.BodycamGI_C.GetKickedPlayerVoted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   KickplayerAlreadyVote                                  (Parm, OutParm)

void UBodycamGI_C::GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetKickedPlayerVoted");

	Params::BodycamGI_C_GetKickedPlayerVoted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KickplayerAlreadyVote != nullptr)
		*KickplayerAlreadyVote = std::move(Parms.KickplayerAlreadyVote);
}


// Function BodycamGI.BodycamGI_C.GetMenuSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MenuControllerComponent_C*    Bp_MenuController                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetMenuSettings");

	Params::BodycamGI_C_GetMenuSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bp_MenuController != nullptr)
		*Bp_MenuController = Parms.Bp_MenuController;
}


// Function BodycamGI.BodycamGI_C.GetMutePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   MutePlayer                                             (Parm, OutParm)

void UBodycamGI_C::GetMutePlayer(TArray<class FString>* MutePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetMutePlayer");

	Params::BodycamGI_C_GetMutePlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MutePlayer != nullptr)
		*MutePlayer = std::move(Parms.MutePlayer);
}


// Function BodycamGI.BodycamGI_C.GetNewRank
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Name_0                                                 (Parm, OutParm)
// class UTexture2D*                       Image                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   RankScore                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RankPosition                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RankDivision                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PreviousRankProgress                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RankProgress                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewRank_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      Color                                                  (Parm, OutParm)
// int32                                   Rank_Integer_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetNewRank(class FText* Name_0, class UTexture2D** Image, int32* RankScore, int32* RankPosition, int32* RankDivision, double* PreviousRankProgress, double* RankProgress, bool* NewRank_, struct FSlateColor* Color, int32* Rank_Integer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetNewRank");

	Params::BodycamGI_C_GetNewRank Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);

	if (Image != nullptr)
		*Image = Parms.Image;

	if (RankScore != nullptr)
		*RankScore = Parms.RankScore;

	if (RankPosition != nullptr)
		*RankPosition = Parms.RankPosition;

	if (RankDivision != nullptr)
		*RankDivision = Parms.RankDivision;

	if (PreviousRankProgress != nullptr)
		*PreviousRankProgress = Parms.PreviousRankProgress;

	if (RankProgress != nullptr)
		*RankProgress = Parms.RankProgress;

	if (NewRank_ != nullptr)
		*NewRank_ = Parms.NewRank_;

	if (Color != nullptr)
		*Color = std::move(Parms.Color);

	if (Rank_Integer_0 != nullptr)
		*Rank_Integer_0 = Parms.Rank_Integer_0;
}


// Function BodycamGI.BodycamGI_C.GetPlayerConnected
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_PCInfo>              PlayerConnected                                        (Parm, OutParm)

void UBodycamGI_C::GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetPlayerConnected");

	Params::BodycamGI_C_GetPlayerConnected Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerConnected != nullptr)
		*PlayerConnected = std::move(Parms.PlayerConnected);
}


// Function BodycamGI.BodycamGI_C.GetPlayerKickVote
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_KickVote>            KickVotePlayer                                         (Parm, OutParm)

void UBodycamGI_C::GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetPlayerKickVote");

	Params::BodycamGI_C_GetPlayerKickVote Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KickVotePlayer != nullptr)
		*KickVotePlayer = std::move(Parms.KickVotePlayer);
}


// Function BodycamGI.BodycamGI_C.GetPlayerSkin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_TEST                        Player_Skin                                            (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Valid_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetPlayerSkin");

	Params::BodycamGI_C_GetPlayerSkin Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player_Skin != nullptr)
		*Player_Skin = std::move(Parms.Player_Skin);

	if (Valid_ != nullptr)
		*Valid_ = Parms.Valid_;
}


// Function BodycamGI.BodycamGI_C.GetRagdollSystem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWW_RagdollSystem_C*              Ragdoll_System                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetRagdollSystem");

	Params::BodycamGI_C_GetRagdollSystem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ragdoll_System != nullptr)
		*Ragdoll_System = Parms.Ragdoll_System;
}


// Function BodycamGI.BodycamGI_C.GetReady?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReady_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetReady_(bool* IsReady_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetReady?");

	Params::BodycamGI_C_GetReady_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsReady_ != nullptr)
		*IsReady_ = Parms.IsReady_;
}


// Function BodycamGI.BodycamGI_C.GetSaveGameManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UBP_SaveGameManager_C>SaveGameManager_0                                      (Parm, OutParm, HasGetValueTypeHash)

void UBodycamGI_C::GetSaveGameManager(TSoftObjectPtr<class UBP_SaveGameManager_C>* SaveGameManager_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetSaveGameManager");

	Params::BodycamGI_C_GetSaveGameManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SaveGameManager_0 != nullptr)
		*SaveGameManager_0 = Parms.SaveGameManager_0;
}


// Function BodycamGI.BodycamGI_C.GetServerSteamID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBodycamGI_C::GetServerSteamID(class FString* SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetServerSteamID");

	Params::BodycamGI_C_GetServerSteamID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SteamID != nullptr)
		*SteamID = std::move(Parms.SteamID);
}


// Function BodycamGI.BodycamGI_C.GetSettingsManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UBP_SettingsManager_C>SettingsManager_0                                      (Parm, OutParm, HasGetValueTypeHash)

void UBodycamGI_C::GetSettingsManager(TSoftObjectPtr<class UBP_SettingsManager_C>* SettingsManager_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetSettingsManager");

	Params::BodycamGI_C_GetSettingsManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SettingsManager_0 != nullptr)
		*SettingsManager_0 = Parms.SettingsManager_0;
}


// Function BodycamGI.BodycamGI_C.GetStarterWeapons
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_Actor>               Weapons                                                (Parm, OutParm)

void UBodycamGI_C::GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetStarterWeapons");

	Params::BodycamGI_C_GetStarterWeapons Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Weapons != nullptr)
		*Weapons = std::move(Parms.Weapons);
}


// Function BodycamGI.BodycamGI_C.GetSteamID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBodycamGI_C::GetSteamID(class FString* SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetSteamID");

	Params::BodycamGI_C_GetSteamID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SteamID != nullptr)
		*SteamID = std::move(Parms.SteamID);
}


// Function BodycamGI.BodycamGI_C.GetSurvivorStatuts
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWW_SurvivorStatus_C*             SurvivorComponant                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetSurvivorStatuts");

	Params::BodycamGI_C_GetSurvivorStatuts Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SurvivorComponant != nullptr)
		*SurvivorComponant = Parms.SurvivorComponant;
}


// Function BodycamGI.BodycamGI_C.GetTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::GetTeam(E_Team* Team_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetTeam");

	Params::BodycamGI_C_GetTeam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Team_0 != nullptr)
		*Team_0 = Parms.Team_0;
}


// Function BodycamGI.BodycamGI_C.GetTeamList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSTR_PCInfo>              Info                                                   (Parm, OutParm)

void UBodycamGI_C::GetTeamList(E_Team Team_0, TArray<struct FSTR_PCInfo>* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetTeamList");

	Params::BodycamGI_C_GetTeamList Parms{};

	Parms.Team_0 = Team_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Info != nullptr)
		*Info = std::move(Parms.Info);
}


// Function BodycamGI.BodycamGI_C.GetTopScore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTR_PCInfo>              TopScore                                               (Parm, OutParm)

void UBodycamGI_C::GetTopScore(TArray<struct FSTR_PCInfo>* TopScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "GetTopScore");

	Params::BodycamGI_C_GetTopScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TopScore != nullptr)
		*TopScore = std::move(Parms.TopScore);
}


// Function BodycamGI.BodycamGI_C.InitScoreBoard
// (Public, BlueprintCallable, BlueprintEvent)

void UBodycamGI_C::InitScoreBoard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "InitScoreBoard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.IsBetterRank
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             RankName                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             CompareRank                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Better_                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::IsBetterRank(const class FText& RankName, const class FText& CompareRank, bool* Better_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "IsBetterRank");

	Params::BodycamGI_C_IsBetterRank Parms{};

	Parms.RankName = std::move(RankName);
	Parms.CompareRank = std::move(CompareRank);

	UObject::ProcessEvent(Func, &Parms);

	if (Better_ != nullptr)
		*Better_ = Parms.Better_;
}


// Function BodycamGI.BodycamGI_C.IsDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dead_                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::IsDead(bool* Dead_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "IsDead");

	Params::BodycamGI_C_IsDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dead_ != nullptr)
		*Dead_ = Parms.Dead_;
}


// Function BodycamGI.BodycamGI_C.IsDestroyabe?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Destroyable_                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::IsDestroyabe_(bool* Destroyable_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "IsDestroyabe?");

	Params::BodycamGI_C_IsDestroyabe_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Destroyable_ != nullptr)
		*Destroyable_ = Parms.Destroyable_;
}


// Function BodycamGI.BodycamGI_C.IsReady?
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReady__0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::IsReady_(bool IsReady__0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "IsReady?");

	Params::BodycamGI_C_IsReady_ Parms{};

	Parms.IsReady__0 = IsReady__0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.IsStress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Yes_                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::IsStress(bool* Yes_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "IsStress");

	Params::BodycamGI_C_IsStress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Yes_ != nullptr)
		*Yes_ = Parms.Yes_;
}


// Function BodycamGI.BodycamGI_C.IsTalking?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTalking__0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::IsTalking_(bool* IsTalking__0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "IsTalking?");

	Params::BodycamGI_C_IsTalking_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTalking__0 != nullptr)
		*IsTalking__0 = Parms.IsTalking__0;
}


// Function BodycamGI.BodycamGI_C.Kick?
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBodycamGI_C::Kick_(const struct FSTR_PCInfo& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "Kick?");

	Params::BodycamGI_C_Kick_ Parms{};

	Parms.Target = std::move(Target);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.KickPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_KickVote                    PlayerInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBodycamGI_C::KickPlayer(const struct FSTR_KickVote& PlayerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "KickPlayer");

	Params::BodycamGI_C_KickPlayer Parms{};

	Parms.PlayerInfo = std::move(PlayerInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.MuteID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBodycamGI_C::MuteID(const class FString& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "MuteID");

	Params::BodycamGI_C_MuteID Parms{};

	Parms.SteamID = std::move(SteamID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.NewKickVote
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBodycamGI_C::NewKickVote(const struct FSTR_PCInfo& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "NewKickVote");

	Params::BodycamGI_C_NewKickVote Parms{};

	Parms.Target = std::move(Target);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_14422F8F4FAEF0FD819CBCAD8B67F553
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardFindResult           Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_14422F8F4FAEF0FD819CBCAD8B67F553(const struct FLeaderboardFindResult& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_14422F8F4FAEF0FD819CBCAD8B67F553");

	Params::BodycamGI_C_OnCallback_14422F8F4FAEF0FD819CBCAD8B67F553 Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_37ABCC8340610DE7D42B0EBEFB5030C0
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardFindResult           Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_37ABCC8340610DE7D42B0EBEFB5030C0(const struct FLeaderboardFindResult& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_37ABCC8340610DE7D42B0EBEFB5030C0");

	Params::BodycamGI_C_OnCallback_37ABCC8340610DE7D42B0EBEFB5030C0 Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_3D0F1A7E49FAFB12AD430490CC27377E
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardScoresDownloadedForUsersData                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_3D0F1A7E49FAFB12AD430490CC27377E(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_3D0F1A7E49FAFB12AD430490CC27377E");

	Params::BodycamGI_C_OnCallback_3D0F1A7E49FAFB12AD430490CC27377E Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_3D565AAD4E1E0A31349B73BA5911716E
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardFindResult           Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_3D565AAD4E1E0A31349B73BA5911716E(const struct FLeaderboardFindResult& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_3D565AAD4E1E0A31349B73BA5911716E");

	Params::BodycamGI_C_OnCallback_3D565AAD4E1E0A31349B73BA5911716E Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_572D510341F33EC02CB311A586001F5C
// (BlueprintCallable, BlueprintEvent)

void UBodycamGI_C::OnCallback_572D510341F33EC02CB311A586001F5C()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_572D510341F33EC02CB311A586001F5C");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.OnCallback_57E02E1341206D50DB3C2A8AB2C6CE59
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardScoreUploaded        Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_57E02E1341206D50DB3C2A8AB2C6CE59(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_57E02E1341206D50DB3C2A8AB2C6CE59");

	Params::BodycamGI_C_OnCallback_57E02E1341206D50DB3C2A8AB2C6CE59 Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_5E60B24B4BDDE9F449901D961EA63D8D
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardScoresDownloadedForUsersData                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_5E60B24B4BDDE9F449901D961EA63D8D(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_5E60B24B4BDDE9F449901D961EA63D8D");

	Params::BodycamGI_C_OnCallback_5E60B24B4BDDE9F449901D961EA63D8D Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_6050162946503729C3AF108539A23FB2
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardScoreUploaded        Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_6050162946503729C3AF108539A23FB2(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_6050162946503729C3AF108539A23FB2");

	Params::BodycamGI_C_OnCallback_6050162946503729C3AF108539A23FB2 Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_613F6AC641C022E5A380C3A7E2D6D60C
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardScoreUploaded        Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_613F6AC641C022E5A380C3A7E2D6D60C(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_613F6AC641C022E5A380C3A7E2D6D60C");

	Params::BodycamGI_C_OnCallback_613F6AC641C022E5A380C3A7E2D6D60C Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_62628FD94C105BE4EE41BCB36E746283
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardScoreUploaded        Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_62628FD94C105BE4EE41BCB36E746283(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_62628FD94C105BE4EE41BCB36E746283");

	Params::BodycamGI_C_OnCallback_62628FD94C105BE4EE41BCB36E746283 Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_6BD2B9C145A4A207BC6713BAD6D904D1
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardScoresDownloadedForUsersData                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_6BD2B9C145A4A207BC6713BAD6D904D1(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_6BD2B9C145A4A207BC6713BAD6D904D1");

	Params::BodycamGI_C_OnCallback_6BD2B9C145A4A207BC6713BAD6D904D1 Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_7EE4358249E47135EA7AE78AC01D0C77
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardScoresDownloadedForUsersData                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_7EE4358249E47135EA7AE78AC01D0C77(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_7EE4358249E47135EA7AE78AC01D0C77");

	Params::BodycamGI_C_OnCallback_7EE4358249E47135EA7AE78AC01D0C77 Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_908721444BA6222764FC1A87F92B947D
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSteamInventoryRequestPricesResultData                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_908721444BA6222764FC1A87F92B947D(const struct FSteamInventoryRequestPricesResult& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_908721444BA6222764FC1A87F92B947D");

	Params::BodycamGI_C_OnCallback_908721444BA6222764FC1A87F92B947D Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_BFA341194010E09EECFCC5A7F5740AA7
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardScoreUploaded        Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_BFA341194010E09EECFCC5A7F5740AA7(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_BFA341194010E09EECFCC5A7F5740AA7");

	Params::BodycamGI_C_OnCallback_BFA341194010E09EECFCC5A7F5740AA7 Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_D6C1080040183509923E559C6D9A1D93
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardScoreUploaded        Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_D6C1080040183509923E559C6D9A1D93(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_D6C1080040183509923E559C6D9A1D93");

	Params::BodycamGI_C_OnCallback_D6C1080040183509923E559C6D9A1D93 Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_E72BC2774F0EF830005D5ABEB65A0BE9
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRequestCurrentStatsData         Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_E72BC2774F0EF830005D5ABEB65A0BE9(const struct FRequestCurrentStatsData& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_E72BC2774F0EF830005D5ABEB65A0BE9");

	Params::BodycamGI_C_OnCallback_E72BC2774F0EF830005D5ABEB65A0BE9 Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnCallback_F975C1334044DDFB802DE98A9328E71C
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLeaderboardScoresDownloadedForUsersData                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnCallback_F975C1334044DDFB802DE98A9328E71C(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnCallback_F975C1334044DDFB802DE98A9328E71C");

	Params::BodycamGI_C_OnCallback_F975C1334044DDFB802DE98A9328E71C Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnIncreasePlayTimer
// (BlueprintCallable, BlueprintEvent)

void UBodycamGI_C::OnIncreasePlayTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnIncreasePlayTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.OnLoadSettingsFromFile
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFilePath                        FilePath                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBodycamGI_C::OnLoadSettingsFromFile(const struct FFilePath& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnLoadSettingsFromFile");

	Params::BodycamGI_C_OnLoadSettingsFromFile Parms{};

	Parms.FilePath = std::move(FilePath);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnOpenLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAbsolute                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Options                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBodycamGI_C::OnOpenLevel(class FName LevelName, bool bAbsolute, const class FString& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnOpenLevel");

	Params::BodycamGI_C_OnOpenLevel Parms{};

	Parms.LevelName = LevelName;
	Parms.bAbsolute = bAbsolute;
	Parms.Options = std::move(Options);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnPlayerDeath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PC                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnPlayerDeath(class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnPlayerDeath");

	Params::BodycamGI_C_OnPlayerDeath Parms{};

	Parms.PC = PC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnSaveSettingsToFile
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FJsonObjectWrapper               JsonObject                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FFilePath                        FilePath                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBodycamGI_C::OnSaveSettingsToFile(const struct FJsonObjectWrapper& JsonObject, const struct FFilePath& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnSaveSettingsToFile");

	Params::BodycamGI_C_OnSaveSettingsToFile Parms{};

	Parms.JsonObject = std::move(JsonObject);
	Parms.FilePath = std::move(FilePath);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnSetCurrentPlayTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PlayTimeInSeconds                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnSetCurrentPlayTime(double PlayTimeInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnSetCurrentPlayTime");

	Params::BodycamGI_C_OnSetCurrentPlayTime Parms{};

	Parms.PlayTimeInSeconds = PlayTimeInSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnSetSoundClassVolume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundClass*                      SoundClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Volume                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnSetSoundClassVolume(class USoundClass* SoundClass, double Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnSetSoundClassVolume");

	Params::BodycamGI_C_OnSetSoundClassVolume Parms{};

	Parms.SoundClass = SoundClass;
	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.OnTrySelectTeam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::OnTrySelectTeam(E_Team Team_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "OnTrySelectTeam");

	Params::BodycamGI_C_OnTrySelectTeam Parms{};

	Parms.Team_0 = Team_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.RankMath
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RankScore                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Rank_                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ELeaderboardClass                       EN_Leadboard_Class_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Rank                                                   (Parm, OutParm)
// class UTexture2D*                       Image                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   RankDivision                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RankProgress                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Rank_Integer_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      Color                                                  (Parm, OutParm)

void UBodycamGI_C::RankMath(int32 RankScore, int32 Rank_, ELeaderboardClass EN_Leadboard_Class_0, class FText* Rank, class UTexture2D** Image, int32* RankDivision, double* RankProgress, int32* Rank_Integer_0, struct FSlateColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "RankMath");

	Params::BodycamGI_C_RankMath Parms{};

	Parms.RankScore = RankScore;
	Parms.Rank_ = Rank_;
	Parms.EN_Leadboard_Class_0 = EN_Leadboard_Class_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Rank != nullptr)
		*Rank = std::move(Parms.Rank);

	if (Image != nullptr)
		*Image = Parms.Image;

	if (RankDivision != nullptr)
		*RankDivision = Parms.RankDivision;

	if (RankProgress != nullptr)
		*RankProgress = Parms.RankProgress;

	if (Rank_Integer_0 != nullptr)
		*Rank_Integer_0 = Parms.Rank_Integer_0;

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function BodycamGI.BodycamGI_C.ReceiveInit
// (Event, Public, BlueprintEvent)

void UBodycamGI_C::ReceiveInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "ReceiveInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.ReceiveShutdown
// (Event, Public, BlueprintEvent)

void UBodycamGI_C::ReceiveShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "ReceiveShutdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.Refresh Reissad Score
// (BlueprintCallable, BlueprintEvent)

void UBodycamGI_C::Refresh_Reissad_Score()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "Refresh Reissad Score");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.Refresh Steam Items Definitions
// (BlueprintCallable, BlueprintEvent)

void UBodycamGI_C::Refresh_Steam_Items_Definitions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "Refresh Steam Items Definitions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.ReissadAddScore
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::ReissadAddScore(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "ReissadAddScore");

	Params::BodycamGI_C_ReissadAddScore Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.ServerTravel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::ServerTravel(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "ServerTravel");

	Params::BodycamGI_C_ServerTravel Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.Set Achievement
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Name_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBodycamGI_C::Set_Achievement(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "Set Achievement");

	Params::BodycamGI_C_Set_Achievement Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.Slomo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Slomo_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::Slomo(double Slomo_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "Slomo");

	Params::BodycamGI_C_Slomo Parms{};

	Parms.Slomo_0 = Slomo_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.SteamInventoryDefinitionUpdate_Event
// (BlueprintCallable, BlueprintEvent)

void UBodycamGI_C::SteamInventoryDefinitionUpdate_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "SteamInventoryDefinitionUpdate_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.Talk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTalking                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::Talk(bool IsTalking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "Talk");

	Params::BodycamGI_C_Talk Parms{};

	Parms.IsTalking = IsTalking;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.Update Death
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Death                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Set                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::Update_Death(int32 Death, bool Set)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "Update Death");

	Params::BodycamGI_C_Update_Death Parms{};

	Parms.Death = Death;
	Parms.Set = Set;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.Update Kill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Kill_                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::Update_Kill(int32 Kill_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "Update Kill");

	Params::BodycamGI_C_Update_Kill Parms{};

	Parms.Kill_ = Kill_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.UpdateGamemode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameMode                               GameMode_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::UpdateGamemode(EGameMode GameMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "UpdateGamemode");

	Params::BodycamGI_C_UpdateGamemode Parms{};

	Parms.GameMode_0 = GameMode_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.UpdateKickVote
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_PCInfo                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Yes_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "UpdateKickVote");

	Params::BodycamGI_C_UpdateKickVote Parms{};

	Parms.Target = std::move(Target);
	Parms.Yes_ = Yes_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.UpdateMapSelection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Selected_Level_Name                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "UpdateMapSelection");

	Params::BodycamGI_C_UpdateMapSelection Parms{};

	Parms.Selected_Level_Name = Selected_Level_Name;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.UpdateModeInfo
// (Public, BlueprintCallable, BlueprintEvent)

void UBodycamGI_C::UpdateModeInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "UpdateModeInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.UpdateScore
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTR_Score                       Score_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::UpdateScore(const struct FSTR_Score& Score_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "UpdateScore");

	Params::BodycamGI_C_UpdateScore Parms{};

	Parms.Score_0 = std::move(Score_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.UpdateTeamIndex (PlayerKilled)
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Team                                  Team_PlayerKilled_                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MilitaryIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TerroristIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Team                                  WiiningTeam                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "UpdateTeamIndex (PlayerKilled)");

	Params::BodycamGI_C_UpdateTeamIndex__PlayerKilled_ Parms{};

	Parms.Team_PlayerKilled_ = Team_PlayerKilled_;
	Parms.MilitaryIndex = MilitaryIndex;
	Parms.TerroristIndex = TerroristIndex;
	Parms.WiiningTeam = WiiningTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.UpdateTeamXP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Win_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::UpdateTeamXP(bool Win_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "UpdateTeamXP");

	Params::BodycamGI_C_UpdateTeamXP Parms{};

	Parms.Win_ = Win_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.UpdateTimer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TimeCount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void UBodycamGI_C::UpdateTimer(double TimeCount, const class FText& NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "UpdateTimer");

	Params::BodycamGI_C_UpdateTimer Parms{};

	Parms.TimeCount = TimeCount;
	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.UpdateTransitionMap
// (Public, BlueprintCallable, BlueprintEvent)

void UBodycamGI_C::UpdateTransitionMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "UpdateTransitionMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BodycamGI.BodycamGI_C.UpdateWarning
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           String                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBodycamGI_C::UpdateWarning(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "UpdateWarning");

	Params::BodycamGI_C_UpdateWarning Parms{};

	Parms.String = std::move(String);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BodycamGI.BodycamGI_C.UpdateXp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Xp                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBodycamGI_C::UpdateXp(int32 Xp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BodycamGI_C", "UpdateXp");

	Params::BodycamGI_C_UpdateXp Parms{};

	Parms.Xp = Xp;

	UObject::ProcessEvent(Func, &Parms);
}

}

