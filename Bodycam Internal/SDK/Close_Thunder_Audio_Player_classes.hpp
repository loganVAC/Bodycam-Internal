#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Close_Thunder_Audio_Player

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Close_Thunder_Audio_Player.Close_Thunder_Audio_Player_C
// 0x0040 (0x02E0 - 0x02A0)
class UClose_Thunder_Audio_Player_C final : public USceneComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        Volume;                                            // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        LPF_Frequency;                                     // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Delay;                                             // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x02C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AActor*                                 UDW;                                               // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Close_Thunder_Audio_Player(int32 EntryPoint);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Close_Thunder_Audio_Player_C">();
	}
	static class UClose_Thunder_Audio_Player_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClose_Thunder_Audio_Player_C>();
	}
};
static_assert(alignof(UClose_Thunder_Audio_Player_C) == 0x000010, "Wrong alignment on UClose_Thunder_Audio_Player_C");
static_assert(sizeof(UClose_Thunder_Audio_Player_C) == 0x0002E0, "Wrong size on UClose_Thunder_Audio_Player_C");
static_assert(offsetof(UClose_Thunder_Audio_Player_C, UberGraphFrame) == 0x0002A0, "Member 'UClose_Thunder_Audio_Player_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UClose_Thunder_Audio_Player_C, Volume) == 0x0002A8, "Member 'UClose_Thunder_Audio_Player_C::Volume' has a wrong offset!");
static_assert(offsetof(UClose_Thunder_Audio_Player_C, LPF_Frequency) == 0x0002B0, "Member 'UClose_Thunder_Audio_Player_C::LPF_Frequency' has a wrong offset!");
static_assert(offsetof(UClose_Thunder_Audio_Player_C, Delay) == 0x0002B8, "Member 'UClose_Thunder_Audio_Player_C::Delay' has a wrong offset!");
static_assert(offsetof(UClose_Thunder_Audio_Player_C, Location) == 0x0002C0, "Member 'UClose_Thunder_Audio_Player_C::Location' has a wrong offset!");
static_assert(offsetof(UClose_Thunder_Audio_Player_C, UDW) == 0x0002D8, "Member 'UClose_Thunder_Audio_Player_C::UDW' has a wrong offset!");

}

