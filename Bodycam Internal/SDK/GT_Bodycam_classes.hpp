#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GT_Bodycam

#include "Basic.hpp"

#include "STR_Actor_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameMode_structs.hpp"
#include "STR_PCInfo_structs.hpp"
#include "STR_KickVote_structs.hpp"
#include "GM_Statue_structs.hpp"
#include "E_Team_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GT_Bodycam.GT_Bodycam_C
// 0x00E0 (0x03C8 - 0x02E8)
class AGT_Bodycam_C final : public AGameStateBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SlomoCurve_SlomoTrack_986C145944DF5F5EC7A204A24EBAE991; // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SlomoCurve__Direction_986C145944DF5F5EC7A204A24EBAE991; // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SlomoCurve;                                        // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSTR_Actor>                     StartWeapons;                                      // 0x0308(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	double                                        TimeCount;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSTR_PCInfo>                    Player_Connected;                                  // 0x0320(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<int32>                                 IndexPlayerStart;                                  // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Waiting_For_Player;                                // 0x0340(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartingMatch;                                     // 0x0341(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGM_Statue                                    GM_Statue;                                         // 0x0342(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerMiss;                                        // 0x0343(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          BreakTimer_0;                                      // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameMode                                     GameMode;                                          // 0x0345(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_346[0x2];                                      // 0x0346(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PrimaryScope;                                      // 0x0348(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SecondaryScope;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSTR_KickVote>                  Player_KickVote;                                   // 0x0358(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class FText                                   Kick_Reason;                                       // 0x0368(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 ServerSteamID;                                     // 0x0380(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        Round_End;                                         // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DespawnDelay;                                      // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstRound;                                        // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerHasBombID;                                   // 0x03A8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FString>                         ListPlayerKicked;                                  // 0x03B8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)

public:
	void AnyBombExist(class ABombe_C** Bomb);
	void BreakTimer();
	void CanCreateKickVote(bool* CanCreateKickVote_);
	void CanKickThisPlayer_(const class FString& PlayerID, bool* True_);
	void ClearMap();
	void DeseableTk__Multicast_();
	void Event_Ragdoll_End();
	void EventRagdollStart();
	void ExecuteUbergraph_GT_Bodycam(int32 EntryPoint);
	void FirstRounds(bool* FirstRound_0);
	void Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component);
	void Get_Stamina(double* Stamina);
	void GetBlured(double* Blured);
	void GetBurnedRef(class USceneComponent** BurnedMesh);
	void GetFlashBangEffect(double* FlashEffect);
	void GetGameMode(struct FSTR_GamemodeWinInfo* GameMode_0);
	void GetGamemodeInfo(struct FSTR_GamemodeWinInfo* GamemodeInfo);
	void GetHealth(double* Health);
	void GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote);
	void GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController);
	void GetMutePlayer(TArray<class FString>* MutePlayer);
	void GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected);
	void GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer);
	void GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_);
	void GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System);
	void GetReady_(bool* IsReady_);
	void GetServerSteamID(class FString* SteamID);
	void GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons);
	void GetSteamID(class FString* SteamID);
	void GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant);
	void GetTeam(E_Team* Team);
	void GetTeamList(E_Team Team, TArray<struct FSTR_PCInfo>* Info);
	void GetTopScore(TArray<struct FSTR_PCInfo>* TopScore);
	void GlobalUpdate__HUD_PC_();
	void IndexTeamAlive(int32* IndexMilitaryAlive_Return, int32* IndexTerroristAlive_Return, E_Team* WinningTeam_0, TArray<struct FSTR_PCInfo>* MilitaryTeam_Return, TArray<struct FSTR_PCInfo>* TerroristTeam_Return);
	void InitScoreBoard();
	void IsDead(bool* Dead_);
	void IsDestroyabe_(bool* Destroyable_);
	void IsReady_(bool IsReady__0);
	void IsStress(bool* Yes_);
	void IsTalking_(bool* IsTalking__0);
	void Kick_(const struct FSTR_PCInfo& Target);
	void Kick___Server_(const struct FSTR_PCInfo& PlayerInfo);
	void KickPlayer(const struct FSTR_KickVote& PlayerInfo);
	void KickPlayer__Server_(const struct FSTR_KickVote& NewItem);
	void LaunchChooseTeamChrono();
	void MaxPlayerPerTeam(int32* MaxPlayerPerTeam_0);
	void MuteID(const class FString& SteamID);
	void NewKickVote(const struct FSTR_PCInfo& Target);
	void OnPlayerDeath(class APlayerController* PC);
	void OnRep_GM_statue();
	void OnRep_PlayerMiss();
	void OnRep_PrimaryScope();
	void OnRep_SecondaryScope();
	void OnTrySelectTeam(E_Team Team);
	void Stop_End_Round_Sound__Multicast_(bool Stop_);
	void Player_Remain(int32* Match_Max_Player, int32* Player_Remain_0);
	void PlayerWaitedArray(TArray<struct FSTR_PCInfo>* PlayerWaited_Return, class FString* PlayerSteamName_Return);
	void RandomStuff();
	void ReceiveBeginPlay();
	void RefreshScoreBoard();
	E_Team SelectTeam(E_Team PlayerAlreadyInTeam);
	void ServerSteamID__Server_();
	void ServerTravel(double Delay);
	void ServerTravel__Multicast_();
	void ServerTravel__server_(float Duration);
	void Slomo(double Slomo_0);
	void Slomo__multicast_();
	void SlomoCurve__FinishedFunc();
	void SlomoCurve__UpdateFunc();
	void SpawnBomb(bool* Success_);
	void SpawnTeamMenu();
	void SpawnTeamsCharacters();
	void SpawnWinHud__server_();
	void StartingMatch__server_(bool StartingMatch_0);
	void StartingWeapons();
	void Talk(bool IsTalking);
	void TeamHasBomb(E_Team* Team_Has_Bomb);
	void TeamHasBombArray(TArray<struct FSTR_PCInfo>* Team_Has_Bomb_Return, TArray<struct FSTR_PCInfo>* Other_Team_Return);
	void TeamIndex(int32* NoneIndex_Return, int32* MilitaryIndex_Return, int32* TerroristIndex_Return, E_Team* TeamNeedPlayer, bool* TeamEmpty_, TArray<struct FSTR_PCInfo>* Military_Return, TArray<struct FSTR_PCInfo>* Terrorist_Return);
	void Time_Count(double Delay);
	void TopScore(TArray<struct FSTR_PCInfo>* TopScorePcArray_Result);
	void TryLaunch();
	void Update_MapSelection__Hud_MenuScoreboard_(class FName Selected_Level_Name, int32 Index_0);
	void Update_ModeInfo__HUD_PC_();
	void Update_ScoreBoardInit__Hud_MenuScoreboard_();
	void Update_transition__Hud_Transition_();
	void Update_Waiting_For_Player__HUD_PC_();
	void Update_Warning_HudMinusClient_(const class FString& InText);
	void UpdateGamemode(EGameMode GameMode_0);
	void UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_);
	void UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0);
	void UpdateModeInfo();
	void UpdateScore(const struct FSTR_Score& Score);
	void UpdateTeamCount__Client_(E_Team Team__PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamXP(bool Win_);
	void UpdateTimer(double TimeCount_0, const class FText& NewParam);
	void UpdateTransitionMap();
	void UpdateVote__Server_(const struct FSTR_PCInfo& Player_info, bool Yes_);
	void UpdateWarning(const class FString& String);
	void WaitingForPlayer__Server_(bool Waiting_For_Player_0);
	void WinningTeam(TArray<struct FSTR_PCInfo>* WinningTeam_Return, TArray<struct FSTR_PCInfo>* LoosingTeam_Return);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GT_Bodycam_C">();
	}
	static class AGT_Bodycam_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGT_Bodycam_C>();
	}
};
static_assert(alignof(AGT_Bodycam_C) == 0x000008, "Wrong alignment on AGT_Bodycam_C");
static_assert(sizeof(AGT_Bodycam_C) == 0x0003C8, "Wrong size on AGT_Bodycam_C");
static_assert(offsetof(AGT_Bodycam_C, UberGraphFrame) == 0x0002E8, "Member 'AGT_Bodycam_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, DefaultSceneRoot) == 0x0002F0, "Member 'AGT_Bodycam_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, SlomoCurve_SlomoTrack_986C145944DF5F5EC7A204A24EBAE991) == 0x0002F8, "Member 'AGT_Bodycam_C::SlomoCurve_SlomoTrack_986C145944DF5F5EC7A204A24EBAE991' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, SlomoCurve__Direction_986C145944DF5F5EC7A204A24EBAE991) == 0x0002FC, "Member 'AGT_Bodycam_C::SlomoCurve__Direction_986C145944DF5F5EC7A204A24EBAE991' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, SlomoCurve) == 0x000300, "Member 'AGT_Bodycam_C::SlomoCurve' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, StartWeapons) == 0x000308, "Member 'AGT_Bodycam_C::StartWeapons' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, TimeCount) == 0x000318, "Member 'AGT_Bodycam_C::TimeCount' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, Player_Connected) == 0x000320, "Member 'AGT_Bodycam_C::Player_Connected' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, IndexPlayerStart) == 0x000330, "Member 'AGT_Bodycam_C::IndexPlayerStart' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, Waiting_For_Player) == 0x000340, "Member 'AGT_Bodycam_C::Waiting_For_Player' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, StartingMatch) == 0x000341, "Member 'AGT_Bodycam_C::StartingMatch' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, GM_Statue) == 0x000342, "Member 'AGT_Bodycam_C::GM_Statue' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, PlayerMiss) == 0x000343, "Member 'AGT_Bodycam_C::PlayerMiss' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, BreakTimer_0) == 0x000344, "Member 'AGT_Bodycam_C::BreakTimer_0' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, GameMode) == 0x000345, "Member 'AGT_Bodycam_C::GameMode' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, PrimaryScope) == 0x000348, "Member 'AGT_Bodycam_C::PrimaryScope' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, SecondaryScope) == 0x000350, "Member 'AGT_Bodycam_C::SecondaryScope' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, Player_KickVote) == 0x000358, "Member 'AGT_Bodycam_C::Player_KickVote' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, Kick_Reason) == 0x000368, "Member 'AGT_Bodycam_C::Kick_Reason' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, ServerSteamID) == 0x000380, "Member 'AGT_Bodycam_C::ServerSteamID' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, Round_End) == 0x000390, "Member 'AGT_Bodycam_C::Round_End' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, DespawnDelay) == 0x000398, "Member 'AGT_Bodycam_C::DespawnDelay' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, FirstRound) == 0x0003A0, "Member 'AGT_Bodycam_C::FirstRound' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, PlayerHasBombID) == 0x0003A8, "Member 'AGT_Bodycam_C::PlayerHasBombID' has a wrong offset!");
static_assert(offsetof(AGT_Bodycam_C, ListPlayerKicked) == 0x0003B8, "Member 'AGT_Bodycam_C::ListPlayerKicked' has a wrong offset!");

}

