#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChatComponent

#include "Basic.hpp"

#include "BP_ChatComponent_classes.hpp"
#include "BP_ChatComponent_parameters.hpp"


namespace SDK
{

// Function BP_ChatComponent.BP_ChatComponent_C.AddCombatLog
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_ChatComponent_C::AddCombatLog(const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "AddCombatLog");

	Params::BP_ChatComponent_C_AddCombatLog Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.CallSetBlockedPlayer
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Blocked_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Username                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_ChatComponent_C::CallSetBlockedPlayer(bool Blocked_, const class FText& Username)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "CallSetBlockedPlayer");

	Params::BP_ChatComponent_C_CallSetBlockedPlayer Parms{};

	Parms.Blocked_ = Blocked_;
	Parms.Username = std::move(Username);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.Client_GetPlayerIsOnline
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayerOnline_                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ToUsername                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_ChatComponent_C::Client_GetPlayerIsOnline(bool PlayerOnline_, int32 ToPlayerID, const class FText& ToUsername)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "Client_GetPlayerIsOnline");

	Params::BP_ChatComponent_C_Client_GetPlayerIsOnline Parms{};

	Parms.PlayerOnline_ = PlayerOnline_;
	Parms.ToPlayerID = ToPlayerID;
	Parms.ToUsername = std::move(ToUsername);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.Client_ReceivedMessage
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_MessageData                   MessageData                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UBP_ChatComponent_C::Client_ReceivedMessage(const struct FS_MessageData& MessageData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "Client_ReceivedMessage");

	Params::BP_ChatComponent_C_Client_ReceivedMessage Parms{};

	Parms.MessageData = std::move(MessageData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.Client_RefreshTeam
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamID_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ChatComponent_C::Client_RefreshTeam(int32 TeamID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "Client_RefreshTeam");

	Params::BP_ChatComponent_C_Client_RefreshTeam Parms{};

	Parms.TeamID_0 = TeamID_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.Client_RequestSendPrivateMessage
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayerOnline_                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ToUsername                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             FromUsername                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_ChatComponent_C::Client_RequestSendPrivateMessage(bool PlayerOnline_, int32 ToPlayerID, const class FText& ToUsername, const class FText& Message, const class FText& FromUsername)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "Client_RequestSendPrivateMessage");

	Params::BP_ChatComponent_C_Client_RequestSendPrivateMessage Parms{};

	Parms.PlayerOnline_ = PlayerOnline_;
	Parms.ToPlayerID = ToPlayerID;
	Parms.ToUsername = std::move(ToUsername);
	Parms.Message = std::move(Message);
	Parms.FromUsername = std::move(FromUsername);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.ExecuteUbergraph_BP_ChatComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ChatComponent_C::ExecuteUbergraph_BP_ChatComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "ExecuteUbergraph_BP_ChatComponent");

	Params::BP_ChatComponent_C_ExecuteUbergraph_BP_ChatComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.GetIsBlocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Username                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsBlocked_                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ChatComponent_C::GetIsBlocked(const class FText& Username, bool* IsBlocked_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "GetIsBlocked");

	Params::BP_ChatComponent_C_GetIsBlocked Parms{};

	Parms.Username = std::move(Username);

	UObject::ProcessEvent(Func, &Parms);

	if (IsBlocked_ != nullptr)
		*IsBlocked_ = Parms.IsBlocked_;
}


// Function BP_ChatComponent.BP_ChatComponent_C.OnNewMessage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Received_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_MessageData                   MessageData                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_ChatComponent_C::OnNewMessage(bool Received_, const struct FS_MessageData& MessageData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "OnNewMessage");

	Params::BP_ChatComponent_C_OnNewMessage Parms{};

	Parms.Received_ = Received_;
	Parms.MessageData = std::move(MessageData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.OnRep_PlayerId
// (BlueprintCallable, BlueprintEvent)

void UBP_ChatComponent_C::OnRep_PlayerId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "OnRep_PlayerId");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChatComponent.BP_ChatComponent_C.OnRequestSendPrivateMessage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ByCommand_                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ToUsername                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             FromUsername                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_ChatComponent_C::OnRequestSendPrivateMessage(bool ByCommand_, int32 ToPlayerID, const class FText& ToUsername, const class FText& Message, const class FText& FromUsername)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "OnRequestSendPrivateMessage");

	Params::BP_ChatComponent_C_OnRequestSendPrivateMessage Parms{};

	Parms.ByCommand_ = ByCommand_;
	Parms.ToPlayerID = ToPlayerID;
	Parms.ToUsername = std::move(ToUsername);
	Parms.Message = std::move(Message);
	Parms.FromUsername = std::move(FromUsername);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.OnServer_GetPlayerIDFromUsername
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Username                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   PlayerID_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ChatComponent_C::OnServer_GetPlayerIDFromUsername(const class FText& Username, int32* PlayerID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "OnServer_GetPlayerIDFromUsername");

	Params::BP_ChatComponent_C_OnServer_GetPlayerIDFromUsername Parms{};

	Parms.Username = std::move(Username);

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerID_0 != nullptr)
		*PlayerID_0 = Parms.PlayerID_0;
}


// Function BP_ChatComponent.BP_ChatComponent_C.OnServer_GetPlayerIsOnline
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ToPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Online_                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ChatComponent_C::OnServer_GetPlayerIsOnline(int32 ToPlayerID, bool* Online_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "OnServer_GetPlayerIsOnline");

	Params::BP_ChatComponent_C_OnServer_GetPlayerIsOnline Parms{};

	Parms.ToPlayerID = ToPlayerID;

	UObject::ProcessEvent(Func, &Parms);

	if (Online_ != nullptr)
		*Online_ = Parms.Online_;
}


// Function BP_ChatComponent.BP_ChatComponent_C.OnServer_SendMessage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OwnTeamID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      OwnController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FS_MessageData                   MessageData                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_ChatComponent_C::OnServer_SendMessage(int32 OwnTeamID, class AController* OwnController, const struct FS_MessageData& MessageData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "OnServer_SendMessage");

	Params::BP_ChatComponent_C_OnServer_SendMessage Parms{};

	Parms.OwnTeamID = OwnTeamID;
	Parms.OwnController = OwnController;
	Parms.MessageData = std::move(MessageData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.OpenChat
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Lobby_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ChatComponent_C::OpenChat(bool Lobby_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "OpenChat");

	Params::BP_ChatComponent_C_OpenChat Parms{};

	Parms.Lobby_ = Lobby_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.OpenPlayerList
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_ChatComponent_C::OpenPlayerList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "OpenPlayerList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChatComponent.BP_ChatComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_ChatComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChatComponent.BP_ChatComponent_C.Server_GetPlayerIsOnline
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ToPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ToUsername                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_ChatComponent_C::Server_GetPlayerIsOnline(int32 ToPlayerID, const class FText& ToUsername)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "Server_GetPlayerIsOnline");

	Params::BP_ChatComponent_C_Server_GetPlayerIsOnline Parms{};

	Parms.ToPlayerID = ToPlayerID;
	Parms.ToUsername = std::move(ToUsername);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.Server_RequestPlayerID
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_ChatComponent_C::Server_RequestPlayerID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "Server_RequestPlayerID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChatComponent.BP_ChatComponent_C.Server_RequestSendPrivateMessage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ByCommand_                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ToUsername                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             FromUsername                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_ChatComponent_C::Server_RequestSendPrivateMessage(bool ByCommand_, int32 ToPlayerID, const class FText& ToUsername, const class FText& Message, const class FText& FromUsername)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "Server_RequestSendPrivateMessage");

	Params::BP_ChatComponent_C_Server_RequestSendPrivateMessage Parms{};

	Parms.ByCommand_ = ByCommand_;
	Parms.ToPlayerID = ToPlayerID;
	Parms.ToUsername = std::move(ToUsername);
	Parms.Message = std::move(Message);
	Parms.FromUsername = std::move(FromUsername);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.Server_SendMessage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      OwnControler                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FS_MessageData                   MessageDate                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_ChatComponent_C::Server_SendMessage(class AController* OwnControler, const struct FS_MessageData& MessageDate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "Server_SendMessage");

	Params::BP_ChatComponent_C_Server_SendMessage Parms{};

	Parms.OwnControler = OwnControler;
	Parms.MessageDate = std::move(MessageDate);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChatComponent.BP_ChatComponent_C.Server_SetTeamID
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamID_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ChatComponent_C::Server_SetTeamID(int32 TeamID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChatComponent_C", "Server_SetTeamID");

	Params::BP_ChatComponent_C_Server_SetTeamID Parms{};

	Parms.TeamID_0 = TeamID_0;

	UObject::ProcessEvent(Func, &Parms);
}

}

