#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_AnimMan_CharacterBP

#include "Basic.hpp"

#include "ALS_Base_CharacterBP_classes.hpp"
#include "Engine_structs.hpp"
#include "Mantle_Asset_structs.hpp"
#include "E_Team_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "ST_DefaultSteamItem_structs.hpp"
#include "MantleType_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "GameMode_structs.hpp"
#include "EN_ShopItemClass_structs.hpp"
#include "E_Emote_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ALS_AnimMan_CharacterBP.ALS_AnimMan_CharacterBP_C
// 0x1450 (0x1F20 - 0x0AD0)
class AALS_AnimMan_CharacterBP_C final : public AALS_Base_CharacterBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ALS_AnimMan_CharacterBP_C;          // 0x0AC8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 HeadShadow;                                        // 0x0AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  ScreenDroplets;                                    // 0x0AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArms;                                        // 0x0AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    Spring_Camera;                                     // 0x0AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HandSocket;                                        // 0x0AF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInventory_C*                           Inventory;                                         // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       WidgetVoice;                                       // 0x0B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       DeadView;                                          // 0x0B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       WidgetFocus;                                       // 0x0B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PLAYER_PPV;                                        // 0x0B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Censor_Face;                                       // 0x0B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArmFishEye;                                  // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Wind_Cue;                                          // 0x0B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FishEye;                                           // 0x0B48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_NewTrack_0_FCAD538749E3B63442F0A295D2DC588A; // 0x0B50(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_FCAD538749E3B63442F0A295D2DC588A; // 0x0B54(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B55[0x3];                                      // 0x0B55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_CBF441F645DFC2A58BE695BB1A114EC2; // 0x0B60(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_CBF441F645DFC2A58BE695BB1A114EC2; // 0x0B64(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B65[0x3];                                      // 0x0B65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Alpha_22AE86064266608C0B6BB991AA6C77A5;   // 0x0B70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_22AE86064266608C0B6BB991AA6C77A5; // 0x0B74(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B75[0x3];                                      // 0x0B75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x0B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TLine_Viewmodel_Fall_Rotation_387421E1426A5E9AAA68DE8187D706D2; // 0x0B80(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TLine_Viewmodel_Fall_Location_387421E1426A5E9AAA68DE8187D706D2; // 0x0B98(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TLine_Viewmodel_Fall__Direction_387421E1426A5E9AAA68DE8187D706D2; // 0x0BB0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB1[0x7];                                      // 0x0BB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TLine_Viewmodel_Fall;                              // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TLine_Viewmodel_Lan_Rotation_7F0EA97D466D40CE40316E8FF2999BD0; // 0x0BC0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TLine_Viewmodel_Lan_Location_7F0EA97D466D40CE40316E8FF2999BD0; // 0x0BD8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TLine_Viewmodel_Lan__Direction_7F0EA97D466D40CE40316E8FF2999BD0; // 0x0BF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BF1[0x7];                                      // 0x0BF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TLine_Viewmodel_Lan;                               // 0x0BF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TLine_Viewmodel_Jump_Rotation_FD69ADB7447AD040868A2E89D1FA2380; // 0x0C00(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TLine_Viewmodel_Jump_Location_FD69ADB7447AD040868A2E89D1FA2380; // 0x0C18(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TLine_Viewmodel_Jump__Direction_FD69ADB7447AD040868A2E89D1FA2380; // 0x0C30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C31[0x7];                                      // 0x0C31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TLine_Viewmodel_Jump;                              // 0x0C38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_2m_Default;                                 // 0x0C40(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_Default;                                 // 0x0C80(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_RH;                                      // 0x0CC0(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_LH;                                      // 0x0D00(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_2H;                                      // 0x0D40(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_Box;                                     // 0x0D80(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LandRoll_Default;                                  // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpFront_Default;                                // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LandRoll_RH;                                       // 0x0DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LandRoll_LH;                                       // 0x0DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LandRoll_2H;                                       // 0x0DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpFront_RH;                                     // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpFront_LH;                                     // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpFront_2H;                                     // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpBack_Default;                                 // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpBack_RH;                                      // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpBack_LH;                                      // 0x0E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpBack_2H;                                      // 0x0E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Ability_Tags;                                      // 0x0E20(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTimelineComponent*                     TLine_Camera_Jump;                                 // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTimelineComponent*                     TLine_Camera_Land_0;                               // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTimelineComponent*                     TLine_Reset_Camera;                                // 0x0E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Look;                                              // 0x0E58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Holding_Fire_Key;                                  // 0x0E68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E69[0x7];                                      // 0x0E69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Current_Recoil_Pitch;                              // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Shot_Count;                                        // 0x0E78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Holding_Reload_Key;                                // 0x0E7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E7D[0x3];                                      // 0x0E7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Avoidance_Distance;                                // 0x0E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Recoil_Current_Rotation;                           // 0x0E88(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Holding_Aim_Key;                                   // 0x0EA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Corner_Peek;                                   // 0x0EA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Leaning_Pressed;                                   // 0x0EA2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA3[0x5];                                      // 0x0EA3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Leaning_Target;                                    // 0x0EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Leaning_Target_Pressed;                            // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Leaning;                                           // 0x0EB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Automatically_Leaning;                             // 0x0EB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EBA[0x6];                                      // 0x0EBA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Corner_Peek_Division;                              // 0x0EC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Leaning_Alpha;                                     // 0x0EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Current_Leaning_Rotation__Server_;                 // 0x0ED0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Leaning_Camera_Offset_Rotation;                    // 0x0EE8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Smooth_Control_Rotation;                           // 0x0F00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Leaning_Switched;                                  // 0x0F18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Lean;                                          // 0x0F19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1A[0x6];                                      // 0x0F1A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Leaning_Previous;                                  // 0x0F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Control_Rotation_Interp_Speed;             // 0x0F28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Aiming;                                            // 0x0F30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F31[0xF];                                      // 0x0F31(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Hand_Ik;                                           // 0x0F40(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Team                                        Team;                                              // 0x0FA0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          FreeCam;                                           // 0x0FA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA2[0x6];                                      // 0x0FA2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVOIPTalker*                            Voip;                                              // 0x0FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Sound;                                             // 0x0FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FB8[0x8];                                      // 0x0FB8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   PP_Normal;                                         // 0x0FC0(0x06E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FPostProcessSettings                   PP_Night_Vision;                                   // 0x16A0(0x06E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsTalking;                                         // 0x1D80(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D81[0x7];                                     // 0x1D81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerUserName;                                    // 0x1D88(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	class AALS_AnimMan_CharacterBP_C*             Dot_Owner;                                         // 0x1D98(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        Focal_Distance;                                    // 0x1DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HeadShot;                                          // 0x1DA8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AimingToggle;                                      // 0x1DA9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DAA[0x6];                                     // 0x1DAA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        Breathing_cue;                                     // 0x1DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        AimingRotationSpeed;                               // 0x1DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AimingBloked;                                      // 0x1DC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC1[0x7];                                     // 0x1DC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Blured;                                            // 0x1DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shake;                                             // 0x1DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlockingDistance;                                  // 0x1DD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DDC[0x4];                                     // 0x1DDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DistanceFromCamera;                                // 0x1DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWEP_C*                                 WEP;                                               // 0x1DE8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FinalSmoothRotation;                               // 0x1DF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Yaw_DeltaTime_;                                    // 0x1E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pitch_DeltaTime_;                                  // 0x1E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorInSight;                                      // 0x1E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Throw;                                             // 0x1E20(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E21[0x7];                                     // 0x1E21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FlashBangEffect;                                   // 0x1E28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FlashBangEar;                                      // 0x1E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Final_Smooth_Rotation__Replicated_;                // 0x1E38(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FST_DefaultSteamItem>           PlayerSkin;                                        // 0x1E50(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, ContainsInstancedReference)
	struct FVector                                Current_Leaning_Rotation__Client_;                 // 0x1E60(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage_to_Play;                                   // 0x1E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockLeftLean;                                     // 0x1E80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockRightLean;                                    // 0x1E81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowItemDetection;                                // 0x1E82(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E83[0x5];                                     // 0x1E83(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           PlayMontageImportant;                              // 0x1E88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Screen_Droplets_MID;                               // 0x1E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Screen_Droplets_Parent_Material;                   // 0x1E98(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        Screen_Center_Strength;                            // 0x1EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Edge_Strength;                              // 0x1ED0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Droplet_Tiling;                                    // 0x1ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blur_Radius;                                       // 0x1EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Player_Camera_Forward_Vector;                      // 0x1EE8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Camera_Facing_Rain_Bias;                           // 0x1F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spread_Out_Tick_Behaviors_Over_3_Frames;           // 0x1F08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Runtime;                                           // 0x1F09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F0A[0x6];                                     // 0x1F0A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Drops_Time;                                        // 0x1F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BloodDropletsIntensity;                            // 0x1F18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyPointDamage(double Damage, double RagdollForce, class FName BoneName, const struct FVector& Location, const struct FVector& ShotFromDirection, class APlayerController* KillerPC, bool DisableHeadShot);
	void Blur(double Distance);
	void BoneDamage(class FName bone, double Damage, bool DisableHeadShot, double* DamageFinal);
	struct FTransform BPI_Get_3P_PivotTarget();
	void BPI_Get_3P_TraceParams(struct FVector* TraceOrigin, double* TraceRadius, ETraceTypeQuery* TraceChannel);
	struct FVector BPI_Get_FP_CameraTarget();
	void BreakTimer();
	void Breathing();
	void BulletFly(double Distance, const struct FVector& Location);
	void CanCreateKickVote(bool* CanCreateKickVote_);
	void CanKickThisPlayer_(const class FString& PlayerID, bool* True_);
	void Check_Automatic_Leaning();
	void ClearMap();
	void Cut__Client_();
	void Cut__Server_(class UObject* Target, class FName BoneName, const struct FVector& Location, const struct FVector& ShotFromDirection, class APlayerController* KillerPC);
	void DestroyVOIP();
	void Event_On_Reload();
	void Event_Ragdoll_End();
	void Event_Server_Set_Ability_Tags(const struct FGameplayTagContainer& Tags_0);
	void EventRagdollStart();
	void ExecuteUbergraph_ALS_AnimMan_CharacterBP(int32 EntryPoint);
	void Final_Smooth_Rotation__Server_(const struct FRotator& FinalSmoothRotation_0);
	void Flashbang(double BaseDamage);
	void Get_Added_Rotations(struct FRotator* Value);
	void Get_Avoidance_Trace_Inputs(const struct FVector& Offset, double Avoidance_Distance_0, struct FVector* Start, struct FVector* End);
	void Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component_0);
	struct FVector Get_Forward_Rotation();
	void Get_Inventory(TArray<class AActor*>* InventorySlots);
	void Get_Stamina(double* Stamina);
	void GetBlured(double* Blured_0);
	void GetBurnedRef(class USceneComponent** BurnedMesh);
	void GetFlashBangEffect(double* FlashEffect);
	void GetGameMode(struct FSTR_GamemodeWinInfo* GameMode);
	class UAnimMontage* GetGetUpAnimation(bool RagdollFaceUp_0);
	void GetHealth(double* Health);
	void GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote);
	struct FMantle_Asset GetMantleAsset(EMantleType MantleType);
	void GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController);
	void GetMutePlayer(TArray<class FString>* MutePlayer);
	void GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected);
	void GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer);
	void GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_);
	void GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System);
	void GetReady_(bool* IsReady_);
	class UAnimMontage* GetRollAnimation();
	void GetServerSteamID(class FString* SteamID);
	void GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons);
	void GetSteamID(class FString* SteamID);
	void GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant);
	void GetTeam(E_Team* Team_0);
	void GetTeamList(E_Team Team_0, TArray<struct FSTR_PCInfo>* Info);
	void GetTopScore(TArray<struct FSTR_PCInfo>* TopScore);
	void Init_Hide_Head(bool NewCastShadow);
	void Init_PcInfo__Client_();
	void InitDotOwner__Multicast_(class AALS_AnimMan_CharacterBP_C* DotOwner);
	void InitDotOwner__Server_(class AALS_AnimMan_CharacterBP_C* Dot_Owner_0);
	void InitScoreBoard();
	void InitVOIP();
	void InpActEvt_IA_AimWeapon_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_AimWeapon_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_AimWeaponToggle_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Drop_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Fire_K2Node_EnhancedInputActionEvent_17(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Fire_K2Node_EnhancedInputActionEvent_18(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Lean_K2Node_EnhancedInputActionEvent_10(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Lean_K2Node_EnhancedInputActionEvent_11(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Lean_K2Node_EnhancedInputActionEvent_12(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Look_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Look_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Melee_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_15(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_16(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Reload_K2Node_EnhancedInputActionEvent_13(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Reload_K2Node_EnhancedInputActionEvent_14(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Take_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_ToggleFlashLight_K2Node_EnhancedInputActionEvent_9(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_ToggleLaser_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0(float AxisValue);
	void Interract_server_(class UObject* Target);
	void IsDead(bool* Dead_);
	void IsDestroyabe_(bool* Destroyable_);
	void IsReady_(bool IsReady__0);
	void IsStress(bool* Yes_);
	void IsTalking_(bool* IsTalking__0);
	void IsTalking___Server_(bool IsTalking__0);
	void Kick_(const struct FSTR_PCInfo& Target);
	void KickPlayer(const struct FSTR_KickVote& PlayerInfo);
	void KnifeAttack_Client_();
	void KnifeAttack_Multicast_();
	void KnifeAttack_Server_();
	void Left_Mouse_Button__Server_();
	void MantleEnd();
	void MantleStart(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType);
	void MSG_ChatGetConnectedPlayers(TArray<class AController*>* Players);
	void MSG_ChatGetPlayerID(int32* PlayerID);
	void MSG_ChatGetTeamID(int32* TeamID);
	void MSG_ChatGetUsername(bool* Success_, class FText* Username);
	void MSG_ChatPlayEmote(E_Emote EmoteToPlay);
	void MSG_ChatRequestPlayerID(int32* PlayerID, bool* Success_);
	void Multi_PlayerEmote(E_Emote EmoteToPlay);
	void MuteID(const class FString& SteamID);
	void NewKickVote(const struct FSTR_PCInfo& Target);
	void On_Fire_Ticking();
	void OnOverlayStateChanged(EALS_OverlayState NewOverlayState);
	void OnPlayerDeath(class APlayerController* PC);
	void OnRep_Dot_Owner();
	void OnRep_PlayerSkin();
	void OnRep_PlayerUserName();
	void OnTrySelectTeam(E_Team Team_0);
	void Play_Anim_Montage__Multicast_(class UAnimMontage* MontageToPlay, float PlayRate);
	void Play_Anim_Montage__Server_(class UAnimMontage* MontageToPlay, float PlayRate);
	void Play_Montage_Important__Multicast_(class UAnimMontage* MontageToPlay, float PlayRate);
	void Play_Montage_Important__Server_(class UAnimMontage* MontageToPlay, float PlayRate);
	void Play_Sounds__Multicast_(class USoundBase* Sound_0);
	void Play_Sounds__Server_(class USoundBase* Sound_0);
	void PlayCameraShake(TSubclassOf<class ULegacyCameraShake> ShakeClass, float Scale);
	void PlayerBody__Server_(TArray<struct FST_DefaultSteamItem>& PlayerSkin_0);
	void Possessed__Client_();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceivePossessed(class AController* NewController);
	void ReceiveRadialDamage(float DamageReceived, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveUnpossessed(class AController* OldController);
	void S_CurrentLeaningRotation(const struct FVector& Current_Leaning_Rotation);
	void Server_PlayerEmote(E_Emote EmoteToPlay);
	void ServerTravel(double Delay);
	bool Should_Be_Aiming();
	void Slomo(double Slomo_0);
	void StartAiming();
	void StartBloodOnCamera();
	void Stop_Anim_Montage__Multicast_();
	void Stop_Anim_Montage__Server_();
	void StopAiming();
	void Talk(bool IsTalking_0);
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void TK(float Duration);
	void TLine_Viewmodel_Fall__FinishedFunc();
	void TLine_Viewmodel_Fall__UpdateFunc();
	void TLine_Viewmodel_Jump__FinishedFunc();
	void TLine_Viewmodel_Jump__UpdateFunc();
	void TLine_Viewmodel_Lan__FinishedFunc();
	void TLine_Viewmodel_Lan__UpdateFunc();
	void Trace_for_Forward_Blocked();
	void Try_Toggling_Weapon_Laser();
	void Unpossessed__Client_();
	void Update_Leaning_Values();
	void UpdateGamemode(EGameMode GameMode);
	void UpdateHandSocket__Multicast_(const struct FTransform& NewTransform);
	void UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_);
	void UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0);
	void UpdateModeInfo();
	void UpdatePlayerUserName__Multicast_(const class FString& InString);
	void UpdatePlayerUserName__Server_(const class FString& InString);
	void UpdateScore(const struct FSTR_Score& Score);
	void UpdateSkel__multicast_(class USkeletalMesh* Mesh_0, TArray<class UMaterialInterface*>& Mat, EN_ShopItemClass Selection);
	void UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamXP(bool Win_);
	void UpdateTimer(double TimeCount, const class FText& NewParam);
	void UpdateTransitionMap();
	void UpdateWarning(const class FString& String);
	void WindCamera();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ALS_AnimMan_CharacterBP_C">();
	}
	static class AALS_AnimMan_CharacterBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALS_AnimMan_CharacterBP_C>();
	}
};
static_assert(alignof(AALS_AnimMan_CharacterBP_C) == 0x000010, "Wrong alignment on AALS_AnimMan_CharacterBP_C");
static_assert(sizeof(AALS_AnimMan_CharacterBP_C) == 0x001F20, "Wrong size on AALS_AnimMan_CharacterBP_C");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, UberGraphFrame_ALS_AnimMan_CharacterBP_C) == 0x000AC8, "Member 'AALS_AnimMan_CharacterBP_C::UberGraphFrame_ALS_AnimMan_CharacterBP_C' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, HeadShadow) == 0x000AD0, "Member 'AALS_AnimMan_CharacterBP_C::HeadShadow' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, ScreenDroplets) == 0x000AD8, "Member 'AALS_AnimMan_CharacterBP_C::ScreenDroplets' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, SpringArms) == 0x000AE0, "Member 'AALS_AnimMan_CharacterBP_C::SpringArms' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Spring_Camera) == 0x000AE8, "Member 'AALS_AnimMan_CharacterBP_C::Spring_Camera' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, HandSocket) == 0x000AF0, "Member 'AALS_AnimMan_CharacterBP_C::HandSocket' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Inventory) == 0x000AF8, "Member 'AALS_AnimMan_CharacterBP_C::Inventory' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Scene) == 0x000B00, "Member 'AALS_AnimMan_CharacterBP_C::Scene' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, WidgetVoice) == 0x000B08, "Member 'AALS_AnimMan_CharacterBP_C::WidgetVoice' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, DeadView) == 0x000B10, "Member 'AALS_AnimMan_CharacterBP_C::DeadView' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, WidgetFocus) == 0x000B18, "Member 'AALS_AnimMan_CharacterBP_C::WidgetFocus' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, PLAYER_PPV) == 0x000B20, "Member 'AALS_AnimMan_CharacterBP_C::PLAYER_PPV' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Censor_Face) == 0x000B28, "Member 'AALS_AnimMan_CharacterBP_C::Censor_Face' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, SpringArmFishEye) == 0x000B30, "Member 'AALS_AnimMan_CharacterBP_C::SpringArmFishEye' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Camera) == 0x000B38, "Member 'AALS_AnimMan_CharacterBP_C::Camera' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Wind_Cue) == 0x000B40, "Member 'AALS_AnimMan_CharacterBP_C::Wind_Cue' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, FishEye) == 0x000B48, "Member 'AALS_AnimMan_CharacterBP_C::FishEye' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Timeline_1_NewTrack_0_FCAD538749E3B63442F0A295D2DC588A) == 0x000B50, "Member 'AALS_AnimMan_CharacterBP_C::Timeline_1_NewTrack_0_FCAD538749E3B63442F0A295D2DC588A' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Timeline_1__Direction_FCAD538749E3B63442F0A295D2DC588A) == 0x000B54, "Member 'AALS_AnimMan_CharacterBP_C::Timeline_1__Direction_FCAD538749E3B63442F0A295D2DC588A' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Timeline_1) == 0x000B58, "Member 'AALS_AnimMan_CharacterBP_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Timeline_0_NewTrack_0_CBF441F645DFC2A58BE695BB1A114EC2) == 0x000B60, "Member 'AALS_AnimMan_CharacterBP_C::Timeline_0_NewTrack_0_CBF441F645DFC2A58BE695BB1A114EC2' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Timeline_0__Direction_CBF441F645DFC2A58BE695BB1A114EC2) == 0x000B64, "Member 'AALS_AnimMan_CharacterBP_C::Timeline_0__Direction_CBF441F645DFC2A58BE695BB1A114EC2' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Timeline_0) == 0x000B68, "Member 'AALS_AnimMan_CharacterBP_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Timeline_Alpha_22AE86064266608C0B6BB991AA6C77A5) == 0x000B70, "Member 'AALS_AnimMan_CharacterBP_C::Timeline_Alpha_22AE86064266608C0B6BB991AA6C77A5' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Timeline__Direction_22AE86064266608C0B6BB991AA6C77A5) == 0x000B74, "Member 'AALS_AnimMan_CharacterBP_C::Timeline__Direction_22AE86064266608C0B6BB991AA6C77A5' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Timeline) == 0x000B78, "Member 'AALS_AnimMan_CharacterBP_C::Timeline' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Viewmodel_Fall_Rotation_387421E1426A5E9AAA68DE8187D706D2) == 0x000B80, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Viewmodel_Fall_Rotation_387421E1426A5E9AAA68DE8187D706D2' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Viewmodel_Fall_Location_387421E1426A5E9AAA68DE8187D706D2) == 0x000B98, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Viewmodel_Fall_Location_387421E1426A5E9AAA68DE8187D706D2' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Viewmodel_Fall__Direction_387421E1426A5E9AAA68DE8187D706D2) == 0x000BB0, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Viewmodel_Fall__Direction_387421E1426A5E9AAA68DE8187D706D2' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Viewmodel_Fall) == 0x000BB8, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Viewmodel_Fall' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Viewmodel_Lan_Rotation_7F0EA97D466D40CE40316E8FF2999BD0) == 0x000BC0, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Viewmodel_Lan_Rotation_7F0EA97D466D40CE40316E8FF2999BD0' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Viewmodel_Lan_Location_7F0EA97D466D40CE40316E8FF2999BD0) == 0x000BD8, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Viewmodel_Lan_Location_7F0EA97D466D40CE40316E8FF2999BD0' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Viewmodel_Lan__Direction_7F0EA97D466D40CE40316E8FF2999BD0) == 0x000BF0, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Viewmodel_Lan__Direction_7F0EA97D466D40CE40316E8FF2999BD0' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Viewmodel_Lan) == 0x000BF8, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Viewmodel_Lan' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Viewmodel_Jump_Rotation_FD69ADB7447AD040868A2E89D1FA2380) == 0x000C00, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Viewmodel_Jump_Rotation_FD69ADB7447AD040868A2E89D1FA2380' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Viewmodel_Jump_Location_FD69ADB7447AD040868A2E89D1FA2380) == 0x000C18, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Viewmodel_Jump_Location_FD69ADB7447AD040868A2E89D1FA2380' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Viewmodel_Jump__Direction_FD69ADB7447AD040868A2E89D1FA2380) == 0x000C30, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Viewmodel_Jump__Direction_FD69ADB7447AD040868A2E89D1FA2380' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Viewmodel_Jump) == 0x000C38, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Viewmodel_Jump' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Mantle_2m_Default) == 0x000C40, "Member 'AALS_AnimMan_CharacterBP_C::Mantle_2m_Default' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Mantle_1m_Default) == 0x000C80, "Member 'AALS_AnimMan_CharacterBP_C::Mantle_1m_Default' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Mantle_1m_RH) == 0x000CC0, "Member 'AALS_AnimMan_CharacterBP_C::Mantle_1m_RH' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Mantle_1m_LH) == 0x000D00, "Member 'AALS_AnimMan_CharacterBP_C::Mantle_1m_LH' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Mantle_1m_2H) == 0x000D40, "Member 'AALS_AnimMan_CharacterBP_C::Mantle_1m_2H' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Mantle_1m_Box) == 0x000D80, "Member 'AALS_AnimMan_CharacterBP_C::Mantle_1m_Box' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, LandRoll_Default) == 0x000DC0, "Member 'AALS_AnimMan_CharacterBP_C::LandRoll_Default' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, GetUpFront_Default) == 0x000DC8, "Member 'AALS_AnimMan_CharacterBP_C::GetUpFront_Default' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, LandRoll_RH) == 0x000DD0, "Member 'AALS_AnimMan_CharacterBP_C::LandRoll_RH' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, LandRoll_LH) == 0x000DD8, "Member 'AALS_AnimMan_CharacterBP_C::LandRoll_LH' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, LandRoll_2H) == 0x000DE0, "Member 'AALS_AnimMan_CharacterBP_C::LandRoll_2H' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, GetUpFront_RH) == 0x000DE8, "Member 'AALS_AnimMan_CharacterBP_C::GetUpFront_RH' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, GetUpFront_LH) == 0x000DF0, "Member 'AALS_AnimMan_CharacterBP_C::GetUpFront_LH' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, GetUpFront_2H) == 0x000DF8, "Member 'AALS_AnimMan_CharacterBP_C::GetUpFront_2H' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, GetUpBack_Default) == 0x000E00, "Member 'AALS_AnimMan_CharacterBP_C::GetUpBack_Default' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, GetUpBack_RH) == 0x000E08, "Member 'AALS_AnimMan_CharacterBP_C::GetUpBack_RH' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, GetUpBack_LH) == 0x000E10, "Member 'AALS_AnimMan_CharacterBP_C::GetUpBack_LH' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, GetUpBack_2H) == 0x000E18, "Member 'AALS_AnimMan_CharacterBP_C::GetUpBack_2H' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Ability_Tags) == 0x000E20, "Member 'AALS_AnimMan_CharacterBP_C::Ability_Tags' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Camera_Jump) == 0x000E40, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Camera_Jump' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Camera_Land_0) == 0x000E48, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Camera_Land_0' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, TLine_Reset_Camera) == 0x000E50, "Member 'AALS_AnimMan_CharacterBP_C::TLine_Reset_Camera' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Look) == 0x000E58, "Member 'AALS_AnimMan_CharacterBP_C::Look' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Holding_Fire_Key) == 0x000E68, "Member 'AALS_AnimMan_CharacterBP_C::Holding_Fire_Key' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Current_Recoil_Pitch) == 0x000E70, "Member 'AALS_AnimMan_CharacterBP_C::Current_Recoil_Pitch' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Shot_Count) == 0x000E78, "Member 'AALS_AnimMan_CharacterBP_C::Shot_Count' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Holding_Reload_Key) == 0x000E7C, "Member 'AALS_AnimMan_CharacterBP_C::Holding_Reload_Key' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Avoidance_Distance) == 0x000E80, "Member 'AALS_AnimMan_CharacterBP_C::Avoidance_Distance' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Recoil_Current_Rotation) == 0x000E88, "Member 'AALS_AnimMan_CharacterBP_C::Recoil_Current_Rotation' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Holding_Aim_Key) == 0x000EA0, "Member 'AALS_AnimMan_CharacterBP_C::Holding_Aim_Key' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Can_Corner_Peek) == 0x000EA1, "Member 'AALS_AnimMan_CharacterBP_C::Can_Corner_Peek' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Leaning_Pressed) == 0x000EA2, "Member 'AALS_AnimMan_CharacterBP_C::Leaning_Pressed' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Leaning_Target) == 0x000EA8, "Member 'AALS_AnimMan_CharacterBP_C::Leaning_Target' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Leaning_Target_Pressed) == 0x000EB0, "Member 'AALS_AnimMan_CharacterBP_C::Leaning_Target_Pressed' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Leaning) == 0x000EB8, "Member 'AALS_AnimMan_CharacterBP_C::Leaning' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Automatically_Leaning) == 0x000EB9, "Member 'AALS_AnimMan_CharacterBP_C::Automatically_Leaning' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Corner_Peek_Division) == 0x000EC0, "Member 'AALS_AnimMan_CharacterBP_C::Corner_Peek_Division' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Leaning_Alpha) == 0x000EC8, "Member 'AALS_AnimMan_CharacterBP_C::Leaning_Alpha' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Current_Leaning_Rotation__Server_) == 0x000ED0, "Member 'AALS_AnimMan_CharacterBP_C::Current_Leaning_Rotation__Server_' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Leaning_Camera_Offset_Rotation) == 0x000EE8, "Member 'AALS_AnimMan_CharacterBP_C::Leaning_Camera_Offset_Rotation' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Smooth_Control_Rotation) == 0x000F00, "Member 'AALS_AnimMan_CharacterBP_C::Smooth_Control_Rotation' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Leaning_Switched) == 0x000F18, "Member 'AALS_AnimMan_CharacterBP_C::Leaning_Switched' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Can_Lean) == 0x000F19, "Member 'AALS_AnimMan_CharacterBP_C::Can_Lean' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Leaning_Previous) == 0x000F20, "Member 'AALS_AnimMan_CharacterBP_C::Leaning_Previous' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Current_Control_Rotation_Interp_Speed) == 0x000F28, "Member 'AALS_AnimMan_CharacterBP_C::Current_Control_Rotation_Interp_Speed' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Aiming) == 0x000F30, "Member 'AALS_AnimMan_CharacterBP_C::Aiming' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Hand_Ik) == 0x000F40, "Member 'AALS_AnimMan_CharacterBP_C::Hand_Ik' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Team) == 0x000FA0, "Member 'AALS_AnimMan_CharacterBP_C::Team' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, FreeCam) == 0x000FA1, "Member 'AALS_AnimMan_CharacterBP_C::FreeCam' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Voip) == 0x000FA8, "Member 'AALS_AnimMan_CharacterBP_C::Voip' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Sound) == 0x000FB0, "Member 'AALS_AnimMan_CharacterBP_C::Sound' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, PP_Normal) == 0x000FC0, "Member 'AALS_AnimMan_CharacterBP_C::PP_Normal' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, PP_Night_Vision) == 0x0016A0, "Member 'AALS_AnimMan_CharacterBP_C::PP_Night_Vision' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, IsTalking) == 0x001D80, "Member 'AALS_AnimMan_CharacterBP_C::IsTalking' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, PlayerUserName) == 0x001D88, "Member 'AALS_AnimMan_CharacterBP_C::PlayerUserName' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Dot_Owner) == 0x001D98, "Member 'AALS_AnimMan_CharacterBP_C::Dot_Owner' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Focal_Distance) == 0x001DA0, "Member 'AALS_AnimMan_CharacterBP_C::Focal_Distance' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, HeadShot) == 0x001DA8, "Member 'AALS_AnimMan_CharacterBP_C::HeadShot' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, AimingToggle) == 0x001DA9, "Member 'AALS_AnimMan_CharacterBP_C::AimingToggle' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Breathing_cue) == 0x001DB0, "Member 'AALS_AnimMan_CharacterBP_C::Breathing_cue' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, AimingRotationSpeed) == 0x001DB8, "Member 'AALS_AnimMan_CharacterBP_C::AimingRotationSpeed' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, AimingBloked) == 0x001DC0, "Member 'AALS_AnimMan_CharacterBP_C::AimingBloked' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Blured) == 0x001DC8, "Member 'AALS_AnimMan_CharacterBP_C::Blured' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Shake) == 0x001DD0, "Member 'AALS_AnimMan_CharacterBP_C::Shake' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, BlockingDistance) == 0x001DD8, "Member 'AALS_AnimMan_CharacterBP_C::BlockingDistance' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, DistanceFromCamera) == 0x001DE0, "Member 'AALS_AnimMan_CharacterBP_C::DistanceFromCamera' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, WEP) == 0x001DE8, "Member 'AALS_AnimMan_CharacterBP_C::WEP' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, FinalSmoothRotation) == 0x001DF0, "Member 'AALS_AnimMan_CharacterBP_C::FinalSmoothRotation' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Yaw_DeltaTime_) == 0x001E08, "Member 'AALS_AnimMan_CharacterBP_C::Yaw_DeltaTime_' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Pitch_DeltaTime_) == 0x001E10, "Member 'AALS_AnimMan_CharacterBP_C::Pitch_DeltaTime_' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, ActorInSight) == 0x001E18, "Member 'AALS_AnimMan_CharacterBP_C::ActorInSight' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Throw) == 0x001E20, "Member 'AALS_AnimMan_CharacterBP_C::Throw' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, FlashBangEffect) == 0x001E28, "Member 'AALS_AnimMan_CharacterBP_C::FlashBangEffect' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, FlashBangEar) == 0x001E30, "Member 'AALS_AnimMan_CharacterBP_C::FlashBangEar' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Final_Smooth_Rotation__Replicated_) == 0x001E38, "Member 'AALS_AnimMan_CharacterBP_C::Final_Smooth_Rotation__Replicated_' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, PlayerSkin) == 0x001E50, "Member 'AALS_AnimMan_CharacterBP_C::PlayerSkin' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Current_Leaning_Rotation__Client_) == 0x001E60, "Member 'AALS_AnimMan_CharacterBP_C::Current_Leaning_Rotation__Client_' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Montage_to_Play) == 0x001E78, "Member 'AALS_AnimMan_CharacterBP_C::Montage_to_Play' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, BlockLeftLean) == 0x001E80, "Member 'AALS_AnimMan_CharacterBP_C::BlockLeftLean' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, BlockRightLean) == 0x001E81, "Member 'AALS_AnimMan_CharacterBP_C::BlockRightLean' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, AllowItemDetection) == 0x001E82, "Member 'AALS_AnimMan_CharacterBP_C::AllowItemDetection' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, PlayMontageImportant) == 0x001E88, "Member 'AALS_AnimMan_CharacterBP_C::PlayMontageImportant' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Screen_Droplets_MID) == 0x001E90, "Member 'AALS_AnimMan_CharacterBP_C::Screen_Droplets_MID' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Screen_Droplets_Parent_Material) == 0x001E98, "Member 'AALS_AnimMan_CharacterBP_C::Screen_Droplets_Parent_Material' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Screen_Center_Strength) == 0x001EC8, "Member 'AALS_AnimMan_CharacterBP_C::Screen_Center_Strength' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Screen_Edge_Strength) == 0x001ED0, "Member 'AALS_AnimMan_CharacterBP_C::Screen_Edge_Strength' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Droplet_Tiling) == 0x001ED8, "Member 'AALS_AnimMan_CharacterBP_C::Droplet_Tiling' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Blur_Radius) == 0x001EE0, "Member 'AALS_AnimMan_CharacterBP_C::Blur_Radius' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Player_Camera_Forward_Vector) == 0x001EE8, "Member 'AALS_AnimMan_CharacterBP_C::Player_Camera_Forward_Vector' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Camera_Facing_Rain_Bias) == 0x001F00, "Member 'AALS_AnimMan_CharacterBP_C::Camera_Facing_Rain_Bias' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Spread_Out_Tick_Behaviors_Over_3_Frames) == 0x001F08, "Member 'AALS_AnimMan_CharacterBP_C::Spread_Out_Tick_Behaviors_Over_3_Frames' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Runtime) == 0x001F09, "Member 'AALS_AnimMan_CharacterBP_C::Runtime' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, Drops_Time) == 0x001F10, "Member 'AALS_AnimMan_CharacterBP_C::Drops_Time' has a wrong offset!");
static_assert(offsetof(AALS_AnimMan_CharacterBP_C, BloodDropletsIntensity) == 0x001F18, "Member 'AALS_AnimMan_CharacterBP_C::BloodDropletsIntensity' has a wrong offset!");

}

