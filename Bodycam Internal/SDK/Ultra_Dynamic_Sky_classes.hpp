#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ultra_Dynamic_Sky

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UDS_NoiseType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UDS_Project_Mode_structs.hpp"
#include "UDS_FeatureToggle_structs.hpp"
#include "UDS_SkyMode_structs.hpp"
#include "UDS_SkyLightMode_structs.hpp"
#include "UDS_ColorMode_structs.hpp"
#include "UDS_VolRT_Mode_structs.hpp"
#include "UDS_CityPresets_structs.hpp"
#include "UDS_PropertyType_structs.hpp"
#include "UDS_LensFlareType_structs.hpp"
#include "UDS_FogColorMode_structs.hpp"
#include "UDS_Occlusion_Mode_structs.hpp"
#include "UDS_Post_Process_Stage_structs.hpp"
#include "UDS_Space_Planet_structs.hpp"
#include "UDS_Planet_Lightsource_structs.hpp"
#include "UDS_Space_Parent_structs.hpp"
#include "UDS_CachedProperties_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C
// 0x1A48 (0x1CD8 - 0x0290)
class AUltra_Dynamic_Sky_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      VolumetricCloud_LightRays;                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Rainbow;                                           // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Compass;                                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     PathTracer_Sky_Light;                              // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UUDS_PlayerOcclusion_C*                 Player_Occlusion;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  Cloud_Fog_Post_Process;                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Moon_Icon_Arrow;                                   // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Sun_Icon_Arrow;                                    // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Sun_Icon;                                          // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Moon_Icon;                                         // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Overcast_Turbulence;                               // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  Lens_Flare;                                        // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     Captured_Scene_Sky_Light;                          // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Inside_Cloud_Fog;                                  // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVolumetricCloudComponent*              VolumetricAurora;                                  // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticCloudsSphere;                                // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Root;                                              // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVolumetricCloudComponent*              VolumetricCloud;                                   // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     Cubemap_Sky_Light;                                 // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  Exposure;                                          // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Moon;                                              // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Sun;                                               // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyAtmosphereComponent*                SkyAtmosphere;                                     // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Moon_Root;                                         // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Sun_Root;                                          // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Ultra_Dynamic_Sky_Sphere;                          // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EUDS_FeatureToggle                            Sun_Light;                                         // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      Custom_Sun_Light_Actor;                            // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Sky_MID;                                           // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Speed;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Wisps_Opacity__Clear_;                       // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Refresh_Settings;                                  // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time_of_Day;                                       // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyMode                                  Sky_Mode;                                          // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_ColorMode                                Color_Mode;                                        // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_Project_Mode                             Project_Mode;                                      // 0x03AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AB[0x5];                                      // 0x03AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cloud_Coverage;                                    // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Fog;                                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Overall_Intensity;                                 // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Direction;                                   // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Phase;                                       // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Manually_Position_Moon_Target;                     // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Render_Moon;                                       // 0x03D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DA[0x6];                                      // 0x03DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Light_Intensity;                              // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Moon_Mobility;                                     // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Angle;                                        // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Inclination;                                  // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Vertical_Offset;                              // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Orbit_Offset;                                 // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Moon_Casts_Shadows;                                // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Scale;                                        // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Phase;                                        // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Moon_Phase_Changes_Over_Time;                      // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Dark_Side_Brightness;                              // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Texture_Intensity__Night_;                    // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Manually_Position_Sun_Target;                      // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sun_Light_Intensity;                               // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Sun_Mobility;                                      // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sun_Angle;                                         // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate_Time_of_Day;                               // 0x0460(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Contrast;                                          // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Inclination;                                   // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Vertical_Offset;                               // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Sun_Casts_Shadows;                                 // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_481[0x3];                                      // 0x0481(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Sun_Light_Color;                                   // 0x0484(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Texture_Intensity__Day_;                      // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Moon_Light_Color;                                  // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Soften_Cloud_Layer_1;                              // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Soften_Cloud_Layer_2;                              // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sharpen_Outer_Edge;                                // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stars_Intensity;                                   // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Stars_Color;                                       // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Moon_Material_Color;                               // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Sun_Target;                                        // 0x04F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Radius;                                        // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Sun_Cloud_Shadows_MID;                             // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Cloud_Shadows;                                 // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519[0x7];                                      // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cloud_Shadows_Intensity_When_Sunny;                // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EUDS_FeatureToggle                            Moon_Light;                                        // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      Custom_Moon_Light_Actor;                           // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Stars_Speed;                                       // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Moon_Cloud_Shadows_MID;                            // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        New_Moon_Light_Brightness;                         // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Texture_Rotation;                             // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Custom_Moon_Texture;                               // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EUDS_FeatureToggle                            Sky_Light;                                         // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_561[0x7];                                      // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASkyLight*                              Custom_Sky_Light_Actor;                            // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	EUDS_FeatureToggle                            Height_Fog;                                        // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_571[0x7];                                      // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AExponentialHeightFog*                  Custom_Height_Fog_Actor;                           // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyLightMode                             Sky_Light_Mode;                                    // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_581[0x7];                                      // 0x0581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Night_Filter_Curve;                                // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Glow_Intensity;                               // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Auroras;                                       // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_599[0x7];                                      // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Aurora_Intensity;                                  // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Aurora_Speed;                                      // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadows_Intensity_When_Overcast;             // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadows_Softness_When_Sunny;                 // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadows_Softness_When_Overcast;              // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Tiling_Layer_1;                              // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Tiling_Layer_2;                              // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Soften_Horizon;                                    // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          One_Cloud_Layer;                                   // 0x05E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E1[0x7];                                      // 0x05E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cloud_Height_Layer_1;                              // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Height_Layer_2;                              // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Swirling_Texture;                         // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Saturation;                                        // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Directional_Balance;                               // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Dawn_Time;                                         // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dusk_Time;                                         // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Night_Brightness;                                  // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Softness;                                      // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Volumetric_Scattering_Intensity;               // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Volumetric_Scattering_Intensity;              // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Aurora_Phase;                                      // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Sun_LightComponent;                                // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Moon_LightComponent;                               // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLightComponent;                                 // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         Height_Fog_Component;                              // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Apply_Exposure_Settings;                           // 0x0668(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_669[0x7];                                      // 0x0669(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Exposure_Compensation_Curve;                       // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        Day_Length;                                        // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Night_Length;                                      // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Extend_Dawn_and_Dusk;                              // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Stationary_Lights;                                 // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_691[0x7];                                      // 0x0691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Base_Fog_Density;                                  // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Foggy_Density_Contribution;                        // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloudy_Density_Contribution;                       // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Density_Contribution;                         // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Scale_Total_Fog_Density;                           // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Stars_Tiling;                                      // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stars_Daytime_Intensity;                           // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Twinkle_Amount;                                    // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Twinkle_Speed;                                     // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Tiling_Stars_Texture;                              // 0x06E0(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Real_Stars_Texture;                                // 0x0710(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	double                                        Stars_Phase;                                       // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveFloat*                            Stars_Intensity_Curve;                             // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Sky_Light_Intensity;                               // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Sky_Light_Mobility;                                // 0x0758(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_759[0x7];                                      // 0x0759(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sky_Light_Temperature;                             // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sky_Light_Color_Multiplier__Day_;                  // 0x0768(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dusk_;                                             // 0x0778(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sky_Light_Color_Multiplier__Night_;                // 0x0788(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Sky_Light_Casts_Shadows;                           // 0x0798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_799[0x7];                                      // 0x0799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DFAO_Min_Occlusion;                                // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        DFAO_Exponent;                                     // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UTextureCube>            Flat_Cubemap;                                      // 0x07B0(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UTextureCube>            Custom_Cubemap;                                    // 0x07E0(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FLinearColor                           Tinted_Sky_Light_Lower_Hemisphere_Color;           // 0x0810(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Real_Time_Capture;                                 // 0x0820(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_821[0x3];                                      // 0x0821(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Captured_Sky_Light_Lower_Hemisphere_Tint;          // 0x0824(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Recapture_Sky_light_Periodically;                  // 0x0834(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_835[0x3];                                      // 0x0835(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sky_Light_Recapture_Period__Seconds_;              // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lights_Update_Period;                              // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lights_Update_Degree_Threshold;                    // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sunrise_Event_Offset;                              // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sunset_Event_Offset;                               // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Sunset;                                            // 0x0860(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Sunrise;                                           // 0x0870(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        Cloud_Wisps_Opacity__Cloudy_;                      // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Cloud_Wisps_Texture;                               // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EUDS_NoiseType                                Cloud_Noise_Type;                                  // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_891[0x7];                                      // 0x0891(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Custom_Noise_Texture;                              // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Shader_Intensity;                              // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Directional_Lighting_Intensity;                    // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Sun_Highlight_Radius;                              // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Cloud_Opacity;                                     // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Horizon_Density_Multiplier;                        // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Zenith_Density_Multiplier;                         // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Latitude_Gradient_Position;                        // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Latitude_Gradient_Width;                           // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Around_Sun_Density_Multiplier;                     // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Around_Sun_Density_Exponent;                       // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Around_Moon_Density_Multiplier;                    // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Around_Moon_Density_Exponent;                      // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveFloat*                            Shine_Intensity_Curve;                             // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Highlight_Intensity_Curve;                     // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Highlight_Radius_Curve;                        // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Adjust_for_Path_Tracer;                            // 0x0918(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Dim_Directional_Lights_with_Cloud_Coverage;        // 0x0919(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Spread_Out_Tick_Behaviors_Over_3_Frames;           // 0x091A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Only_Fully_Update_Active_Parameters_When_Cloud_Coverage_Changes; // 0x091B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_91C[0x4];                                      // 0x091C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Extra_Night_Brightness_when_Cloudy;                // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Directional_Lights_Absent_Brightness;              // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Volumetric_Clouds_MID_Complex;                     // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EUDS_VolRT_Mode                               Volumetric_Cloud_Rendering_Mode;                   // 0x0938(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_939[0x7];                                      // 0x0939(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Bottom_Altitude;                                   // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_Height_Scale;                                // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Clouds_Scale;                                 // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThreeD_Noise_Scale;                                // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThreeD_Erosion_Intensity;                          // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        High_Frequency_Noise_Amount;                       // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         High_Frequency_Levels;                             // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_974[0x4];                                      // 0x0974(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Distort_High_Frequency_Noise;                      // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Extinction_Scale;                                  // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_Clouds_Scale;                           // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Floor_Variation;                              // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Floor_Variation;                          // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Floor_Luminance_Scale;                             // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        View_Sample_Scale__Day_;                           // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        View_Sample_Scale__Night_;                         // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Sample_Scale;                               // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Tracing_Distance;                           // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Volumetric_Cloud_Color;                            // 0x09C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Cloud_Profile_LUT;                                 // 0x09D8(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, HasGetValueTypeHash)
	EUDS_NoiseType                                Volumetric_Cloud_Noise_Type;                       // 0x0A08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_A09[0x7];                                      // 0x0A09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Volumetric_Custom_Noise_Texture;                   // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Minimum_Erosion;                                   // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Distance_to_Sample_MaxCount;                       // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Base_Clouds_Mip_Level;                             // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Reflection_Sample_Count_Scale;                     // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Reflection_Shadow_Sample_Count_Scale;              // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Volumetric_Cloud_Ambient_Light_Intensity;          // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Volumetric_Cloud_Ambient_Light__Day_;              // 0x0A48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dusk__0;                                           // 0x0A58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Volumetric_Cloud_Ambient_Light__Night_;            // 0x0A68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_Cloud_Ambient_Light_Saturation;         // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Multiscattering_Light_Intensity;                   // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Multiscattering_Light_Occlusion;                   // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Volumetric_Clouds_MID_Simplified;                  // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Start_Distance_when_Clear;                     // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Density_where_Start_Distance_Reaches_Zero;     // 0x0AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Randomize_Cloud_Formation_on_Run;                  // 0x0AA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA9[0x7];                                      // 0x0AA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ThreeD_Noise_Vertical_Movement;                    // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         Formation_Change_Speed;                            // 0x0AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ABC[0x4];                                      // 0x0ABC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Macro_Variation;                                   // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Macro_Scale;                                       // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Multiscattering_Phase_1;                           // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Multiscattering_Phase_2;                           // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Multiscattering_Eccentricity;                      // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Time_Speed;                                        // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Internal_Time_of_Day;                              // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Weather_BP;                                        // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Tracing_Max_Start_Distance;                        // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Static_Clouds_MID;                                 // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Aurora_Color_1;                                    // 0x0B10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Aurora_Color_2;                                    // 0x0B20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Aurora_Color_3;                                    // 0x0B30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Volumetric_Aurora_MID;                             // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Sky_Mode_Scalability_Map;                      // 0x0B48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_B49[0x7];                                      // 0x0B49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, EUDS_SkyMode>                     Sky_Mode_Scalability_Map;                          // 0x0B50(0x0050)(Edit, BlueprintVisible, AdvancedDisplay)
	double                                        Sun_Disk_Intensity;                                // 0x0BA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Sun_Disk_Color_Curve;                              // 0x0BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveFloat*                            Aurora_Intensity_Curve;                            // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Inside_Clouds_Fog_MID;                             // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Tracing_Max_Distance__Inside_Cloud_Layer_;         // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Tracing_Max_Distance__Outside_Cloud_Layer_;        // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Enable_Fog_Inside_Clouds;                          // 0x0BD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD1[0x7];                                      // 0x0BD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Aurora_Texture;                                    // 0x0BD8(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, HasGetValueTypeHash)
	double                                        TwoD_Aurora_Max_Samples;                           // 0x0C08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        TwoD_Aurora_Sample_Step_Size;                      // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        TwoD_Aurora_Line_Exponent;                         // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        TwoD_Aurora_Mask_Exponent;                         // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Volumetric_Aurora_Sample_Count_Scale;              // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Volumetric_Aurora_Layer_Height;                    // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_Aurora_Bottom_Altitude;                 // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Density_Daytime_Mutliplier;                    // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Density_Nighttime_Multiplier;                  // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Height_Fog_Falloff;                           // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloudy_Height_Fog_Falloff;                         // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Foggy_Height_Fog_Falloff;                          // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Inside_Cloud_Fog_Strength;                         // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Inside_Cloud_Fog_Color;                            // 0x0C70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TwoD_Overcast_Turbulence;                          // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Close_Fade_Distance;                               // 0x0C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Close_Fade_Offset;                                 // 0x0C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Two_Layers;                                        // 0x0C98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C99[0x7];                                      // 0x0C99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Layer_2_Coverage_Scale;                            // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_2_Extinction_Scale;                          // 0x0CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Layer_2_Cloud_Scale;                               // 0x0CB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_2_Mip_Offset;                                // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Between_Layers;                           // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Sun_Light_Shaft_Bloom;                      // 0x0CD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD1[0x7];                                      // 0x0CD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Sun_Light_Shaft_Bloom_Scale;                       // 0x0CD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Sun_Light_Shaft_Max_Brightness;                    // 0x0CE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Sun_Light_Shaft_Bloom_Threshold;                   // 0x0CF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sun_Light_Shaft_Tint_Color;                        // 0x0D08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Moon_Light_Shaft_Bloom;                     // 0x0D18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D19[0x7];                                      // 0x0D19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Moon_Light_Shaft_Bloom_Scale;                      // 0x0D20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Moon_Light_Shaft_Max_Brightness;                   // 0x0D30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Moon_Light_Shaft_Bloom_Threshold;                  // 0x0D40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Moon_Light_Shaft_Tint_Color;                       // 0x0D50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Factor_Absent_Directional_Lights_Brightness;       // 0x0D60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Real_Time_Capture_Uses_Time_Slicing;               // 0x0D61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Use_Mobile_Overrides;                              // 0x0D62(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyMode                                  Volumetric_Clouds_Replacement;                     // 0x0D63(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyLightMode                             Real_Time_Capture_Sky_Light_Replacement;           // 0x0D64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Adjust_For_Mobile_Renderer;                        // 0x0D65(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D66[0x2];                                      // 0x0D66(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Mobile_Platforms;                                  // 0x0D68(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	struct FVector                                Moon_Target;                                       // 0x0D78(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Mobile;                                            // 0x0D90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Simulate_Real_Sun;                                 // 0x0D91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Simulate_Real_Moon;                                // 0x0D92(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Simulate_Real_Stars;                               // 0x0D93(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_CityPresets                              Location_Preset;                                   // 0x0D94(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D95[0x3];                                      // 0x0D95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Latitude;                                          // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Longitude;                                         // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Time_Zone;                                         // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         Year;                                              // 0x0DB0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         Month;                                             // 0x0DB4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         Day;                                               // 0x0DB8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DBC[0x4];                                      // 0x0DBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        North_Yaw;                                         // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Simulation_Speed;                                  // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          True_Real_World_Time;                              // 0x0DD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Apply_Daylight_Savings_Time;                       // 0x0DD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD2[0x2];                                      // 0x0DD2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DST_Start_Month;                                   // 0x0DD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         DST_Start_Day;                                     // 0x0DD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         DST_End_Month;                                     // 0x0DDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         DST_End_Day;                                       // 0x0DE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         DST_Change_Hour;                                   // 0x0DE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TArray<int32>                                 Months;                                            // 0x0DE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Months__Leap_Year_;                                // 0x0DF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Stellar_Calibration;                               // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Lunar_Orbit_Calibration;                           // 0x0E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lunar_Inclination_Calibration;                     // 0x0E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Runtime;                                           // 0x0E20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Daylight_Savings_Time;                             // 0x0E21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E22[0x2];                                      // 0x0E22(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Total_Days_Elapsed;                                // 0x0E24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Clouds_Move_with_Time_of_Day;                      // 0x0E28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E29[0x7];                                      // 0x0E29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time_of_Day_Movement_Multiplier;                   // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, TSoftObjectPtr<class UMaterialInstance>> Sky_MID_Parent_Instances;                          // 0x0E38(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Fog_Shadows;                                       // 0x0E88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Shadows;                                      // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        TwoD_Cloud_Shadows_Speed;                          // 0x0E98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TwoD_Cloud_Shadows_Scale;                          // 0x0EA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Disable_Directional_Light_Shadows_when_Fully_Shadowed_by_Clouds; // 0x0EA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_EA9[0x7];                                      // 0x0EA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Custom_Light_Function_Material;                    // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Force_Light_Functions_On;                          // 0x0EB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_EB9[0x7];                                      // 0x0EB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time_of_Day_Replication_Period;                    // 0x0EC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Time_of_Day;                            // 0x0EC8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Moon_Phase;                             // 0x0ED0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale_Sun_Radius_as_it_Nears_Horizon;              // 0x0ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Sun_Specular_Scale;                                // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Scale_Moon_Radius_as_it_Nears_Horizon;             // 0x0EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Fog_Colors_from_Sky_Atmosphere;                    // 0x0EF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EF1[0x7];                                      // 0x0EF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Dusty_Height_Fog_Falloff;                          // 0x0EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Specular_Scale;                               // 0x0F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Replicated_Day_Length;                             // 0x0F08(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Night_Length;                           // 0x0F10(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Time_Speed;                             // 0x0F18(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Simulation_Speed;                       // 0x0F20(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ambient_Light_from_Sky_Atmosphere;                 // 0x0F28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        High_Frequency_Disable_Distance;                   // 0x0F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Change_to_Simplified_Material_when_Overcast;       // 0x0F38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_F39[0x7];                                      // 0x0F39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Simplified_Material_Cloud_Coverage_Threshold;      // 0x0F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Simplified_Material_Fade_Length;                   // 0x0F48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Scale_View_Samples_when_Overcast;                  // 0x0F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         Current_Volumetric_Clouds_MID;                     // 0x0F58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F5C[0x4];                                      // 0x0F5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Clouds_Position;                                   // 0x0F60(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Clouds_Time_of_Day_Factor;                    // 0x0F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Starting_Cloud_Texture_Velocity;                   // 0x0F80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Control_Sky_Atmosphere_Settings;                   // 0x0F98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F99[0x3];                                      // 0x0F99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Rayleigh_Scattering_Color__Day_;                   // 0x0F9C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dusk__1;                                           // 0x0FAC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Rayleigh_Scattering_Color__Night_;                 // 0x0FBC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FCC[0x4];                                      // 0x0FCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Desaturate_Rayleigh_Scattering_when_Cloudy;        // 0x0FD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Brighten_Rayleigh_Scattering_When_Cloudy;          // 0x0FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Tick_Set;                                  // 0x0FE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FE4[0x4];                                      // 0x0FE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cloud_Coverage_Change_Speed;                       // 0x0FE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_of_Day_Change_Speed;                          // 0x0FF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Change_Speed;                                  // 0x0FF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Change_Speed;                                 // 0x1000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Time_of_Day_Offset;                        // 0x1008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Frame_Cloud_Coverage;                         // 0x1010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Coverage_Change_This_Frame;                  // 0x1018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, EUDS_PropertyType>          Properties;                                        // 0x1020(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Last_Frame_Time_of_Day;                            // 0x1070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Night_Sky_Glow;                                    // 0x1078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Night_Sky_Glow_Color;                              // 0x1080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Light_Pollution_Intensity;                         // 0x1090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Light_Pollution_Color;                             // 0x1098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Cloud_Fog_Post_Process_MID;                        // 0x10A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Dimming_Range_Lower_Bound;                         // 0x10B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dimming_Range_Upper_Bound;                         // 0x10B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dimming_Range_Exponent;                            // 0x10C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     Custom_Sky_Sphere_Material;                        // 0x10C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Fog_Snow_Contribution;                             // 0x10D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Midnight;                                          // 0x10D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FLinearColor                           Sunrise_Color__Absorption_;                        // 0x10E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sunrise_Color_Intensity__Absorption_Scale_;        // 0x10F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Simulated_Sunrise_Time;                            // 0x1100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Simulated_Sunset_Time;                             // 0x1108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Disallow_Tick_Skip;                                // 0x1110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1111[0x7];                                     // 0x1111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Base_Cloud_Height;                                 // 0x1118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Sun_Lens_Flare;                             // 0x1120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_LensFlareType                            Lens_Flare_Type;                                   // 0x1121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1122[0x6];                                     // 0x1122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Lens_Flare_Strength;                               // 0x1128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Lens_Flare_Tint;                                   // 0x1130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Lens_Flare_MID;                                    // 0x1140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Custom_Lens_Flare_Parent_Instance;                 // 0x1148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Scale_Flare_Elements;                              // 0x1150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dynamic_Sky_Light_Transition_Time;                 // 0x1158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Target_Sky_Light_Multiplier;                       // 0x1160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dynamic_Sky_Light_Multiplier;                      // 0x1168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_with_New_Changes;                         // 0x1170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1171[0x7];                                     // 0x1171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Overcast_Turbulence_MID;                           // 0x1178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Scale_View_Samples_when_Camera_is_In_Cloud_Layer;  // 0x1180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Low_Material_Quality_Sample_Count_Scale;           // 0x1188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Medium_Material_Quality_Sample_Count_Scale;        // 0x1190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Epic_Material_Quality_Sample_Count_Scale;          // 0x1198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UVolumeTexture>          Epic_Quality_Volume_Texture;                       // 0x11A0(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UVolumeTexture>          High_Quality_Volume_Texture;                       // 0x11D0(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UVolumeTexture>          Low_Quality_Volume_Texture;                        // 0x1200(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Inside_Cloud_Fog_Parent_Material;                  // 0x1230(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          Inside_Cloud_Fog_System;                           // 0x1260(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Post_Process_Cloud_Fog_Parent_Material;            // 0x1290(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Volumetric_Cloud_and_Shadow_MIDs;                  // 0x12C0(0x0010)(Edit, BlueprintVisible)
	TArray<class UMaterialInstanceDynamic*>       Volumetric_Cloud_MIDs;                             // 0x12D0(0x0010)(Edit, BlueprintVisible)
	double                                        Moon_Light_Current_Intensity_Value;                // 0x12E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Twilight_Color__Absorption_;                       // 0x12E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Twilight_Color_Intensity__Absorption_Scale_;       // 0x12F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Keep_Planet_Top_at_Camera_XY_Location;             // 0x1300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1301[0x3];                                     // 0x1301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Base_Sky_Color__Day_;                              // 0x1304(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dusk__2;                                           // 0x1314(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Base_Sky_Color__Night_;                            // 0x1324(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_Light_Color__Day_;                           // 0x1334(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dusk__3;                                           // 0x1344(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_Light_Color__Night_;                         // 0x1354(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_Dark_Color__Day_;                            // 0x1364(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dusk__4;                                           // 0x1374(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_Dark_Color__Night_;                          // 0x1384(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sun_Glow_Color;                                    // 0x1394(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Moon_Glow_Tint;                                    // 0x13A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13B4[0x4];                                     // 0x13B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Directional_Intensity_Curve;                       // 0x13B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Directional_Light_Scattering_Curve;                // 0x13C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Atmospheric_Scattering_LUT_Texture;                // 0x13C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EUDS_FogColorMode                             Fog_Color_Mode;                                    // 0x13D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_13D1[0x7];                                     // 0x13D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Fog_Color_Intensity_Scale;                         // 0x13D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Fog_Scattering_Color_Curve;                        // 0x13E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLinearColor                           Fog_Inscattering_Sun;                              // 0x13E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fog_Inscattering_Moon;                             // 0x13F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Fog_Directional_Scattering_Color_Curve;            // 0x1408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLinearColor                           Fog_Directional_Inscattering;                      // 0x1410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Foggy_Desaturation;                                // 0x1420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Desaturation;                             // 0x1428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Brightness_Day;                           // 0x1430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Brightness_Night;                         // 0x1438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           All_Fog_Colors_Multiplier;                         // 0x1440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sky_Atmosphere_Fog_Influence_Curve;                // 0x1450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dust_Amount;                                       // 0x1458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dust_Color;                                        // 0x1460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Volumetric_Fog;                                // 0x1470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Disable_Height_Fog_Above_Volumetric_Cloud_Layer;   // 0x1471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1472[0x2];                                     // 0x1472(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Height_Fog_Density;                                // 0x1474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Using_Cloud_Fog_Post_Process;                      // 0x1478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1479[0x7];                                     // 0x1479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Current_Camera_Location;                           // 0x1480(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Ambient_Fog_Color;                                 // 0x1498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Directional_Base_Fog_Color;                        // 0x14A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Scaled_Directional_Base_Fog_Color;                 // 0x14B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Volumetric_Aurora_Parent_Material;                 // 0x14C8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Moon_Masks_Texture;                                // 0x14F8(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Sky_and_Static_Clouds_MID;                         // 0x1528(0x0010)(Edit, BlueprintVisible)
	TArray<class UMaterialInstanceDynamic*>       Sky_and_Shadows_MIDs;                              // 0x1538(0x0010)(Edit, BlueprintVisible)
	TSoftObjectPtr<class UMaterialInterface>      Overcast_Turbulence_Parent_Material;               // 0x1548(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Forward_Shading;                                   // 0x1578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1579[0x7];                                     // 0x1579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Hourly;                                            // 0x1580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Event_Hour;                                        // 0x1590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cloud_Wisps_Color_Intensity;                       // 0x1594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Sun_Source_Angle_Scale;                        // 0x1598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Sun_Source_Angle_Softness;                         // 0x15A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Max_Moon_Source_Angle_Scale;                       // 0x15A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Transition_Time_A;                                 // 0x15B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Transition_Time_B;                                 // 0x15B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Transitioning_Time;                                // 0x15C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   Transition_Easing_Function;                        // 0x15C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C2[0x6];                                     // 0x15C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Transition_Easing_Exponent;                        // 0x15C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Transition_Timer;                                  // 0x15D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Transition_Duration;                               // 0x15D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Transition_Days_Counted;                           // 0x15E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Transition_Can_Go_Backwards;                       // 0x15E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15E5[0x3];                                     // 0x15E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Source_Angle_Softness;                        // 0x15E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         Exposure_Bias_Day;                                 // 0x15F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Exposure_Bias_Night;                               // 0x15F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Exposure_Bias_Cloudy;                              // 0x15F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Exposure_Bias_Foggy;                               // 0x15FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Exposure_Bias_Dusty;                               // 0x1600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Exposure_Min_Brightness;                           // 0x1604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Exposure_Max_Brightness;                           // 0x1608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Apply_Interior_Adjustments;                        // 0x160C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_160D[0x3];                                     // 0x160D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Extra_Fog_Start_Distance_in_Interior;              // 0x1610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Density_Multiplier_in_Interior;                // 0x1618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Exposure_Bias_in_Interior;                         // 0x1620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sky_Light_Intensity_Multiplier_in_Interiors;       // 0x1628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Light_Intensity_Multiplier_in_Interiors;       // 0x1630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Light_Intensity_Multiplier_in_Interiors;      // 0x1638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Extra_Sun_Volumetric_Scattering_in_Interiors;      // 0x1640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Extra_Moon_Volumetric_Scattering_in_Interiors;     // 0x1648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EUDS_Occlusion_Mode                           Occlusion_Sampling_Mode;                           // 0x1650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_1651[0x7];                                     // 0x1651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Interior_Trace_Distance;                       // 0x1658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	ETraceTypeQuery                               Interior_Occlusion_Trace_Channel;                  // 0x1660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_1661[0x7];                                     // 0x1661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Interior_Occlusion_Update_Period;                  // 0x1668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Rainbow_MID;                                       // 0x1670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadow_Disable_Threshold;                    // 0x1678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fraction_of_Trace_Hits_for_No_Occlusion;           // 0x1680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Fraction_of_Trace_Hits_for_Full_Occlusion;         // 0x1688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Cloud_Bottom_World_Height;                         // 0x1690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Cached_Floats_Old;                                 // 0x1698(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Cached_Floats_New;                                 // 0x16A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Cache_Alpha;                                       // 0x16B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Filling_Starting_Cache;                            // 0x16C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C1[0x7];                                     // 0x16C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cache_Period;                                      // 0x16C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FLinearColor>                   Cached_Colors_Old;                                 // 0x16D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FLinearColor>                   Cached_Colors_New;                                 // 0x16E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Cached_Vectors_Old;                                // 0x16F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Cached_Vectors_New;                                // 0x1700(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                Cached_Sun_Vector;                                 // 0x1710(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cached_Moon_Vector;                                // 0x1728(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Change_This_Frame;                             // 0x1740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Frame_Fog;                                    // 0x1748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Frame_Dust;                                   // 0x1750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Change_This_Frame;                            // 0x1758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  Cached_Value_Changing;                             // 0x1760(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Max_Property_Cache_Period;                         // 0x1770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Time_of_Last_Cache;                                // 0x1778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EUDS_CityPresets, struct FVector>        Preset_Location_Coordinates;                       // 0x1780(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Disable_Image_Based_Lens_Flares_when_Enabled;      // 0x17D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_17D1[0x7];                                     // 0x17D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Starting_Sky_Atmosphere_Height;                    // 0x17D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FUDS_Post_Process_Stage>        Post_Process_Components;                           // 0x17E0(0x0010)(Edit, BlueprintVisible)
	TArray<class UPostProcessComponent*>          User_Post_Process_Components;                      // 0x17F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Using_Post_Process_Components;                     // 0x1800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1801[0x3];                                     // 0x1801(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Cloud_Wisps_Tint__Day_;                            // 0x1804(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dusk__5;                                           // 0x1814(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_Wisps_Tint__Night_;                          // 0x1824(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1834[0x4];                                     // 0x1834(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Increase_Wisps_Brightness_Around_Sun;              // 0x1838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Increase_Wisps_Brightness_Around_Moon;             // 0x1840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Cached_Moon_Phase;                                 // 0x1848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Solar_Eclipse;                                     // 0x1850(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1851[0x3];                                     // 0x1851(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Solar_Eclipse_Tint_Color;                          // 0x1854(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1864[0x4];                                     // 0x1864(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Solar_Eclipse_Intensity_Multiplier;                // 0x1868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fade_Down_High_Sun_Light_Intensity_Below_Horizon;  // 0x1870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_1871[0x7];                                     // 0x1871(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UDS_Version;                                       // 0x1878(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UUDS_VersionInfo_C*                     UDS_Version_Info;                                  // 0x1888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Clouds_B_Time;                                     // 0x1890(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sky_Atmosphere_Overcast_Luminance;                 // 0x1898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Old_Moon_Target;                                   // 0x18A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Old_Sun_Target;                                    // 0x18B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Targets_Change_Speed;                              // 0x18D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cache_Timer_Length;                                // 0x18D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cache_Current_Timer;                               // 0x18E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Initialized;                                       // 0x18E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18E9[0x7];                                     // 0x18E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUDS_Planet_Preset_C*                   Moon_Preset;                                       // 0x18F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FUDS_Space_Planet>              Moons;                                             // 0x18F8(0x0010)(Edit, BlueprintVisible)
	double                                        Space_Layer_Brightness__Night_;                    // 0x1908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Space_Layer_Brightness__Day_;                      // 0x1910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Space_Glow_Brightness;                             // 0x1918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      UDS_Space_Parent_Material;                         // 0x1920(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Space_Planet_MIDs;                                 // 0x1950(0x0010)(Edit, BlueprintVisible)
	TArray<class USceneComponent*>                Space_Scene_Components;                            // 0x1960(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UMaterialInstanceDynamic*, class UMaterialInstanceDynamic*> Space_Glow_MIDs;                                   // 0x1970(0x0050)(Edit, BlueprintVisible)
	TArray<class UStaticMeshComponent*>           Space_Planet_Components;                           // 0x19C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Space_Layer_Active;                                // 0x19D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19D1[0x7];                                     // 0x19D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      UDS_Space_Sim_Stars_Parent_Material;               // 0x19D8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FLinearColor                           Cached_Solar_Eclipse_Tint;                         // 0x1A08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cached_Sun_Radius;                                 // 0x1A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cached_Eclipse_Percent;                            // 0x1A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cached_Moon_Cutout;                                // 0x1A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cached_Moon_Scale;                                 // 0x1A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Construction_Script_Time;                     // 0x1A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Create_New_MIDs;                                   // 0x1A40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sun_Minus_Lighting_Channel_0;                      // 0x1A41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Sun_Minus_Lighting_Channel_1;                      // 0x1A42(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Sun_Minus_Lighting_Channel_2;                      // 0x1A43(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLinearColor                           Low_Moon_Light_Color_Tint;                         // 0x1A44(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Moon_Minus_Lighting_Channel_0;                     // 0x1A54(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Moon_Minus_Lighting_Channel_1;                     // 0x1A55(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Moon_Minus_Lighting_Channel_2;                     // 0x1A56(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Show_Trace_Debugs;                                 // 0x1A57(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TArray<class USceneComponent*>                Space_Roots;                                       // 0x1A58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Render_Water_Caustics;                             // 0x1A68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A69[0x7];                                     // 0x1A69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Water_Level;                                       // 0x1A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Caustics_Intensity;                                // 0x1A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Caustics_Falloff;                                  // 0x1A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deep_Water_Falloff;                                // 0x1A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Caustics_Texture_Scale;                            // 0x1A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moons_Cloud_Mask;                                  // 0x1A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blur_Caustics_with_Depth;                          // 0x1AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Blur_Caustics_in_Cloud_Shadow;                     // 0x1AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Blur_Caustics_with_Camera_Distance;                // 0x1AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         Sunset_Event_State;                                // 0x1AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fog_Cloudiness_Above_Cloud_Layer;                  // 0x1ABC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_1ABD[0x3];                                     // 0x1ABD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Editor_Camera_Normalized_Height_in_Layer;          // 0x1AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Camera_Cloud_Layer_Normalized_Height;              // 0x1AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Camera_Sky_Atmosphere_Normalized_Density;          // 0x1AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Moon_Fog_Base_Color;                               // 0x1AD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sun_Fog_Base_Color;                                // 0x1AE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cached_Sky_Atmosphere_Luminance;                   // 0x1AF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Cloud_Layer_Camera_Level;                      // 0x1B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Camera_Relative_Change_Speed;                // 0x1B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cached_Sky_Atmosphere_Absorption_Color;            // 0x1B18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Cloud_Coverage_Target_Resolution;                  // 0x1B28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B2C[0x4];                                     // 0x1B2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 Cloud_Coverage_Render_Target;                      // 0x1B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Cloud_Coverage_Target_Size;                        // 0x1B38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B3C[0x4];                                     // 0x1B3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Painted_Cloud_Coverage_Opacity;                    // 0x1B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_2_Painted_Cloud_Coverage_Opacity;            // 0x1B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Painted_Coverage_Affects_Global_Values;            // 0x1B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Editor_Cloud_Coverage_Target_Location;             // 0x1B58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<struct FIntPoint, class UUDS_Cloud_Paint_Cell_C*> Local_Painting_Cell_Data;                          // 0x1B68(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Local_Painted_Cell_Size;                           // 0x1BB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cloud_Painting_Active;                             // 0x1BBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BBD[0x3];                                     // 0x1BBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Cloud_Coverage_Target_Location;                    // 0x1BC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Current_Cloud_Coverage_Render_Target_Mapping;      // 0x1BD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cloud_Coverage_Target_in_Use;                      // 0x1BE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BE1[0x7];                                     // 0x1BE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UObject>>         Async_Loading_Queue;                               // 0x1BE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UObject*>                        Async_Loaded_Objects;                              // 0x1BF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Async_Loading_Active;                              // 0x1C08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C09[0x7];                                     // 0x1C09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cloud_Coverage_After_Painting;                     // 0x1C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cloud_Paint_Can_Add_Coverage;                      // 0x1C18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cloud_Paint_Can_Subtract_Coverage;                 // 0x1C19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Volumetric_Cloud_Light_Rays;                // 0x1C1A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1B[0x5];                                     // 0x1C1B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Light_Ray_Intensity;                               // 0x1C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Light_Ray_Tint_Color;                              // 0x1C28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Light_Rays_Point_Spacing;                          // 0x1C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Light_Ray_Length;                                  // 0x1C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Individual_Clouds_Light_Rays;                      // 0x1C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale_Light_Ray_Width;                             // 0x1C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Light_Rays_Max_Distance__Km_;                      // 0x1C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Light_Rays_Depth_Fade_Distance;                    // 0x1C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Light_Rays_3D_Noise_Scale;                         // 0x1C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          Volumetric_Cloud_Light_Rays_Niagara_System;        // 0x1C70(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        Max_Light_Ray_Length;                              // 0x1CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Top_World_Height;                            // 0x1CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cached_Light_Ray_Vector;                           // 0x1CB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Light_Rays_Using_Sun;                              // 0x1CC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC9[0x7];                                     // 0x1CC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cached_Light_Ray_Strength;                         // 0x1CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void TwoD_Clouds_Base_Texture(TSoftObjectPtr<class UTexture2D>* Tex);
	double Absent_Directional_Lights_Brightness();
	void Add_Object_to_Async_Loading_Queue(TSoftObjectPtr<class UObject> Object, bool High_Priority);
	void Adjust_Base_Sun_Light_Intensity(const struct FVector& Sun_Vector, double* Intensity, double* Multiplier);
	void All_Volumetric_Cloud_MIDs(bool Shadows, TArray<class UMaterialInstanceDynamic*>* MIDs);
	void Apply_Console_Variable_with_Check(const class FString& Cvar, double Setting, int32 Type);
	void Apply_Light_Shaft_Settings(class UDirectionalLightComponent* Light, const struct FVector2D& Max_Brightness, const struct FVector2D& Bloom_Threshold, const struct FVector2D& Bloom_Scale, const struct FVector& Forward_Vector);
	void Apply_Location_Preset(EUDS_CityPresets Location);
	void Apply_Saved_UDS_And_UDW_State(const struct FUDS_and_UDW_State& State);
	void Apply_Volumetric_Mode(EUDS_VolRT_Mode Mode);
	void Approximate_Real_Sun_Moon_and_Stars(int32 Month_0, int32 Day_0, int32 Year_0, double Time_of_Day_0, double Time_Zone_0, bool Only_Calculate_Sun, struct FVector* Sun_Vector, struct FVector* Moon_Vector, double* Real_Phase, struct FVector* Phase_Alignment, double* Celestial_Orbit, struct FLinearColor* Celestial_Yaw);
	void Both_Cloud_Shadows_MIDs(TArray<class UMaterialInstanceDynamic*>* Out);
	void Cache_Color(EUDS_CachedProperties Property, const struct FLinearColor& Set_Value);
	void Cache_Float(EUDS_CachedProperties Property, double Set_Value);
	void Cache_Properties();
	void Cache_Sun_and_Moon_Orientation();
	void Cache_Vector(EUDS_CachedProperties Property, const struct FVector& Set_Value);
	void Cancel_Shadows_Value(const struct FVector& Light_Vector, double* Out);
	void Change_Sky_Mode_at_Runtime(EUDS_SkyMode New_Sky_Mode);
	void Check_for_Cloud_Coverage_Target_Recenter();
	void Check_for_Daylight_Savings_Time();
	void Check_if_Point_is_Exposed_to_Sun_or_Moon_Light(const struct FVector& Location, double Distance_to_Trace, TArray<class AActor*>& Actors_to_Ignore_in_Trace, bool* Exposed_to_Sun, bool* Exposed_to_Moon, bool* Exposed_to_Either, double* Light_Intensity__Lux_);
	void Check_To_Use_Existing_MIDs();
	void Cloud_Coverage_Local(double* Out);
	void Cloud_Coverage_Target_Mapping(struct FVector* Mapping);
	double Cloud_Darkening();
	void Cloud_Layer_Top_and_Bottom_World_Height(double* Bottom_World_Height, double* Top_World_Height);
	double Cloud_Shadows_Cloud_Density();
	void Cloud_Shadows_Light_Vector_Process(const struct FVector& Vector, struct FLinearColor* Out);
	void Cloud_Shadows_Parent_Material(TSoftObjectPtr<class UMaterialInterface>* Mat);
	struct FVector Cloud_Texture_Velocity();
	void Cloud_Wisp_Gradient_Vector(struct FLinearColor* Out);
	double Clouds_Time_of_Day_Factor();
	void Combined_Night_Brightness(double* Out);
	void Construct_Space_Layer();
	void Construction_Script_Function(bool Run_By_Counterpart, bool Move_Static_Lights);
	void Control_UDW_Weather_State();
	void Convert_Time_of_Day_to_Time_Code(double Time, struct FTimecode* Timecode);
	void Create_Post_Process_Components();
	void Create_UDS_and_UDW_State_for_Saving(struct FUDS_and_UDW_State* Packaged_State);
	struct FLinearColor Current_2D_Cloud_Tint();
	double Current_Aurora_Intensity();
	double Current_Base_Clouds_Scale();
	void Current_Cloud_Wisps_Color(struct FLinearColor* Out);
	double Current_Directional_Inscattering_Exponent();
	void Current_Exposure_Bias(double* Bias);
	double Current_Fog_Density();
	void Current_Fog_Directional_Inscattering_Color(struct FLinearColor* Directional_Inscattering_Color);
	void Current_Fog_Inscattering_Color(struct FLinearColor* Inscattering_Color);
	void Current_Lerp_to_Simplified_Clouds(double* Alpha);
	struct FLinearColor Current_Light_Pollution();
	double Current_Lit_Intensity();
	void Current_Max_Trace_Distance(double* Out);
	double Current_Mie_Anisotropy();
	double Current_Mie_Scattering_Scale();
	void Current_Moon_Light_Color(struct FLinearColor* Color);
	struct FLinearColor Current_Moon_Light_Material_Color();
	double Current_Moon_Lit_Percent();
	double Current_Moon_Material_Intensity();
	struct FLinearColor Current_Moon_Phase_Angle();
	void Current_Moon_Scale_and_Cutout_Value(double* Scale, double* Cutout);
	void Current_Moon_Source_Angle(double* Out);
	double Current_Moons_Cloud_Mask();
	struct FLinearColor Current_Night_Sky_Glow();
	double Current_Overall_Intensity();
	double Current_Overcast_Swirl();
	struct FLinearColor Current_Rayleigh_Scattering_Color();
	double Current_Saturation();
	void Current_Sky_Ambient_Color(struct FLinearColor* Sky_Ambient_Color);
	void Current_Sky_Atmosphere_Absorption_Color(struct FLinearColor* Out);
	struct FLinearColor Current_Sky_Atmosphere_Luminance();
	struct FLinearColor Current_Sky_Light_Lower_Hemisphere_Color();
	void Current_Solar_Eclipse_Values(struct FLinearColor* Tint_Color, double* Eclipse_Percent);
	double Current_Space_Layer_Brightness();
	struct FLinearColor Current_Stars_Color();
	struct FLinearColor Current_Sun_Disk_Color();
	double Current_Sun_Disk_Intensity();
	struct FLinearColor Current_Sun_Light_Color();
	double Current_Sun_Light_Intensity();
	double Current_Sun_Radius();
	void Current_Sun_Source_Angle(double* Out);
	double Current_Sunrise_Event_Time();
	double Current_Sunset_Event_Time();
	void Current_View_Sample_Scale(double* Out);
	struct FLinearColor Current_Volumetric_Cloud_Albedo();
	void Current_Volumetric_Cloud_Inner_Emit_Limit(double* Out);
	double Current_Volumetric_Cloud_Macro_Variation();
	void Current_Volumetric_Cloud_Multiscattering_Intensity(double* Out);
	void Current_Volumetric_Cloud_Multiscattering_Occlusion(double* Occlusion);
	void Current_Volumetric_Cloud_Shadow_Tracing_Distance(double* Out);
	double Current_Volumetric_Cloud_Sky_Atmo_Contribution();
	void Current_Volumetric_Clouds_Density(double* Layer1, bool* Cloud_Layer_Visible, double* Layer2);
	double Current_Wisps_Opacity();
	void Day_Ended();
	void Days_Since_J2000(int32 Input_Year, int32 Day_of_Year, int32* Days);
	bool Dimming_Directional_Lights();
	void Directional_Inscattering_Multiplier(double* Multiplier);
	void Directional_Light_Dimming(double* Out);
	void ExecuteUbergraph_Ultra_Dynamic_Sky(int32 EntryPoint);
	void Filtered_Moon_Light_Intensity(double Unfiltered, double* Intensity);
	double Find_Overall_Intensity(double Cloud_Darkening);
	void Sunrise_Times();
	void Finish_Time_Transition();
	void Fire_Editor_Dispatchers();
	void Flat_Cloudiness(bool* On);
	double Fog_Height_Falloff();
	double Fog_Start_Distance();
	void Force_Startup();
	void Force_Valid_Day();
	bool Gate_With_Current_Changes(bool Clouds_Changing, bool Fog_Changing, bool Dust_Changing);
	void Get_Cached_Color(EUDS_CachedProperties Property, struct FLinearColor* Value);
	void Get_Cached_Float(EUDS_CachedProperties Property, double* Value);
	void Get_Cached_Vector(EUDS_CachedProperties Property, struct FVector* Value);
	void Get_Camera_Location_and_Camera_Relative_Heights();
	void Get_Current_Cloud_Shadows_Intensity_and_Softness(double* Intensity, double* Softness);
	void Get_Current_Date_and_Time(struct FDateTime* Current_Date_and_Time);
	void Get_Current_Fog_Base_Colors(struct FLinearColor* Ambient_Fog_Color_0, struct FLinearColor* Directional_Base_Color, struct FLinearColor* Scaled_Directional_Base_Color, struct FLinearColor* Sun_Fog_Base, struct FLinearColor* Moon_Fog_Base);
	void Get_Current_Sky_Light_Color_and_Intensity(double* Out_Intensity, struct FLinearColor* Out_Color);
	void Get_Current_Volumetric_Cloud_Extinction_Scale(double* Top);
	void Get_Nearby_Cloud_Cells_To_Load_Asynchronously();
	TSoftObjectPtr<class UMaterialInterface> Get_Sky_MID_Parent_Material_Instance();
	void Get_Time_of_Day_in_Real_Time_Format(struct FTimecode* Time);
	void Get_Volumetric_Cloud_Emissive_Colors(struct FLinearColor* Bottom, struct FLinearColor* Top);
	void MS_to_Time_of_Day(int32 Hours, int32 Minutes, int32 Seconds, int32 Miliseconds, double* Time);
	void Hard_Reset_Cache();
	void Hourly__DelegateSignature(int32 Hour);
	bool Increase_Tick_Frequency();
	void Increment_Cache_Timer();
	void Increment_Day();
	void Initialize_Occlusion();
	double Inside_Outside_Cloud_Layer();
	void Is_it_Daytime_(bool* Yes);
	void Is_Lens_Flare_Enabled(bool* Yes);
	void Is_Location_Inside_Cloud_Layer(const struct FVector& Location, bool* Inside);
	void Is_Moon_Light_Casting_Shadows(bool* Yes);
	void Is_Sun_Light_Casting_Shadows(bool* Yes);
	void Lens_Flare_Parent_Material(TSoftObjectPtr<class UMaterialInterface>* Mat);
	void Load_Required_Assets();
	void Midnight__DelegateSignature();
	void Monitor_for_Changes();
	double Moon_Light_Specular_Scale();
	double Moon_Light_Volumetric_Scattering_Intensity();
	double Moon_Phase_Multiplier(double* Without_Light_Brightness);
	void Moon_Z_Vector(struct FVector* Out);
	double Night_Filter();
	void Notify_of_Removed_Cloud_Paint_Container();
	void OnLoaded_AA91001A446E22425F2F54AAB2159C50(class UObject* Loaded);
	void OnRep_Replicated_Time_of_Day();
	double Overcast_Brightness();
	struct FLinearColor Overcast_Light_Contribution(bool For_Volumetric_Clouds);
	void Overcast_Luminance_Boost(double Multiplier, double* Out);
	void Query_Project_Settings_And_UDS_Version();
	void Recapture_Sky_Light();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void Release_Async_Loaded_Object(TSoftObjectPtr<class UObject> Object);
	void Restart_Inside_Cloud_Fog();
	void Restart_Real_Time_Sky_Light_Capture();
	void Scale_Sample_Count(double In, double* Out);
	void Scaled_Cache_Period(double* Period);
	void Set_Cache_Alpha();
	void Set_Cloud_Timing();
	void Set_Date_and_Time(const struct FDateTime& Date_Time);
	void Set_Sun_and_Moon_Root_Rotation();
	void Set_Time_of_Day_using_Time_Code(const struct FTimecode& Time_Code);
	void Set_Up_Lens_Flare();
	void Set_Up_Overcast_Turbulence();
	void Set_Up_Volumetric_Cloud_Light_Rays();
	void Simplified_Current_Color(const struct FLinearColor& Day_Color, const struct FLinearColor& Dusk_Color, const struct FLinearColor& Night_Color, struct FLinearColor* Out);
	void Simplified_Sun_Glow_Color(struct FLinearColor* Out);
	void Size_Cache_Arrays();
	void Sky_Atmosphere_Fog_Contribution(double* Output);
	double Sky_MID_Cloud_Density();
	void Solar_Eclipse_Circle_Mask(double Sun_Angular_Radius, double Moon_Angular_Radius, const struct FVector& Moon_Vector, double Moon_Softness, double* Fraction_Showing);
	void Space_Planet_Parent_MID(const struct FUDS_Space_Planet& Planet, TSoftObjectPtr<class UMaterialInterface>* Out);
	void Start_Async_Loader();
	void Starting_Cloud_Formation();
	void Static_Clouds_Parent_Material(TSoftObjectPtr<class UMaterialInterface>* Material);
	void Static_Clouds_XYZ_Masks(struct FLinearColor* XY_Mask, double* Z_Mask);
	void Sun_Height(double* Z);
	void Sun_Shadows_MIDs(TArray<class UMaterialInstanceDynamic*>* Out);
	void Sun_Z_Vector(struct FVector* Out);
	void Sunrise__DelegateSignature();
	void Sunset__DelegateSignature();
	void Swap_with_Cinematic_Runtime_Value(double In, double Cine, bool User_Higher, double* Out);
	void Test_Point_for_Painted_Cloud_Coverage(const struct FVector& Location, double* Cloud_Coverage_with_Painting);
	void Three_Time_Floats(double Day_0, double Dusk, double Night, double* Out);
	void Tick_Time_Transition();
	double Time_of_Day_Offset();
	void Timed_Override_with_New_Changes();
	double Total_Time_Elapsed();
	void Transition_Sky_Light_Intensity(double New_Sky_Light_Intensity_Multiplier, double Transition_Time);
	void Transition_Time_of_Day(double New_Time_of_Day, double Transition_Duration__Seconds_, EEasingFunc Easing_Function, double Easing_Exponent, bool Allow_Time_Going_Backwards);
	void Twilight_Brightness_Falloff(double Z, double* Scale);
	void Unfiltered_Moon_Light_Intensity(double* Out);
	void Update_Active_Variables();
	void Update_Cloud_Coverage_After_Painting();
	void Update_Current_Volumetric_Clouds_MID();
	void Update_Directional_Light_Rotations();
	void Update_Distance_to_Sample_Max_Count(bool Shut_Down);
	void Update_Dynamic_Sky_Light_Multiplier();
	void Update_Exposure_Bias();
	void Update_Forced_Active_Variables();
	void Update_from_UDW_Construction_Script();
	void Update_Lens_Flare();
	void Update_Moon_Parameters();
	void Update_Overcast_Turbulence();
	void Update_Painted_Cloud_Coverage_Target();
	void Update_Post_Process_Blend_Weights();
	void Update_Replicated_Time();
	void Update_Replicated_ToD();
	void Update_Settings_Based_on_Platform_and_Scalability();
	void Update_Sky_Atmosphere_Location(const struct FVector& Location);
	void Update_Space_Planet_Vectors();
	void Update_Static_Clouds();
	void Update_Static_Variables();
	void Update_Variables_Controlled_By_Weather();
	void Update_Volumetric_Cloud_Light_Rays();
	void Update_Volumetric_Cloud_Light_Rays_Movement();
	bool Use_Sky_Atmosphere();
	void UserConstructionScript();
	bool Using_2D_Clouds();
	void Volumetric_Cloud_Ambient_Light_Color(struct FLinearColor* Bottom, struct FLinearColor* Top);
	void Volumetric_Cloud_Base_Cloud_Height(double* Base_Cloud_Height_0);
	void Volumetric_Cloud_Floor_Variation(double* Height_Clear, double* Height_Cloudy, double* Color);
	void Volumetric_Cloud_Layer_Height(double Base_Cloud_Height_0, double* Layer_Height);
	void Volumetric_Cloud_Layer_Scale(double* Layer_Scale);
	void Volumetric_Cloud_Shadows_Altitude(double* Cloud_Shadows_Altitude);
	void Volumetric_Cloud_Top_Altitude(double* Cloud_Top_Altitude);
	void Volumetric_Clouds_Base_Clouds_Texture(TSoftObjectPtr<class UTexture2D>* Tex);
	void Volumetric_Clouds_Parent_Materials(TSoftObjectPtr<class UMaterialInterface>* Simplified, TSoftObjectPtr<class UMaterialInterface>* Complex);
	void Volumetric_Clouds_SubNoise_Scales(struct FLinearColor* High, struct FLinearColor* Low);
	void World_Space_to_Drawn_Target_Pixel_Space(const struct FVector2D& In, struct FVector2D* Out);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ultra_Dynamic_Sky_C">();
	}
	static class AUltra_Dynamic_Sky_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUltra_Dynamic_Sky_C>();
	}
};
static_assert(alignof(AUltra_Dynamic_Sky_C) == 0x000008, "Wrong alignment on AUltra_Dynamic_Sky_C");
static_assert(sizeof(AUltra_Dynamic_Sky_C) == 0x001CD8, "Wrong size on AUltra_Dynamic_Sky_C");
static_assert(offsetof(AUltra_Dynamic_Sky_C, UberGraphFrame) == 0x000290, "Member 'AUltra_Dynamic_Sky_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, VolumetricCloud_LightRays) == 0x000298, "Member 'AUltra_Dynamic_Sky_C::VolumetricCloud_LightRays' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Rainbow) == 0x0002A0, "Member 'AUltra_Dynamic_Sky_C::Rainbow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Compass) == 0x0002A8, "Member 'AUltra_Dynamic_Sky_C::Compass' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, PathTracer_Sky_Light) == 0x0002B0, "Member 'AUltra_Dynamic_Sky_C::PathTracer_Sky_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Player_Occlusion) == 0x0002B8, "Member 'AUltra_Dynamic_Sky_C::Player_Occlusion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Fog_Post_Process) == 0x0002C0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Fog_Post_Process' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Icon_Arrow) == 0x0002C8, "Member 'AUltra_Dynamic_Sky_C::Moon_Icon_Arrow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Icon_Arrow) == 0x0002D0, "Member 'AUltra_Dynamic_Sky_C::Sun_Icon_Arrow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Icon) == 0x0002D8, "Member 'AUltra_Dynamic_Sky_C::Sun_Icon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Icon) == 0x0002E0, "Member 'AUltra_Dynamic_Sky_C::Moon_Icon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Turbulence) == 0x0002E8, "Member 'AUltra_Dynamic_Sky_C::Overcast_Turbulence' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lens_Flare) == 0x0002F0, "Member 'AUltra_Dynamic_Sky_C::Lens_Flare' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Captured_Scene_Sky_Light) == 0x0002F8, "Member 'AUltra_Dynamic_Sky_C::Captured_Scene_Sky_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Cloud_Fog) == 0x000300, "Member 'AUltra_Dynamic_Sky_C::Inside_Cloud_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, VolumetricAurora) == 0x000308, "Member 'AUltra_Dynamic_Sky_C::VolumetricAurora' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, StaticCloudsSphere) == 0x000310, "Member 'AUltra_Dynamic_Sky_C::StaticCloudsSphere' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Root) == 0x000318, "Member 'AUltra_Dynamic_Sky_C::Root' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, VolumetricCloud) == 0x000320, "Member 'AUltra_Dynamic_Sky_C::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cubemap_Sky_Light) == 0x000328, "Member 'AUltra_Dynamic_Sky_C::Cubemap_Sky_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure) == 0x000330, "Member 'AUltra_Dynamic_Sky_C::Exposure' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, HeightFog) == 0x000338, "Member 'AUltra_Dynamic_Sky_C::HeightFog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon) == 0x000340, "Member 'AUltra_Dynamic_Sky_C::Moon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun) == 0x000348, "Member 'AUltra_Dynamic_Sky_C::Sun' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, SkyAtmosphere) == 0x000350, "Member 'AUltra_Dynamic_Sky_C::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Root) == 0x000358, "Member 'AUltra_Dynamic_Sky_C::Moon_Root' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Root) == 0x000360, "Member 'AUltra_Dynamic_Sky_C::Sun_Root' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Ultra_Dynamic_Sky_Sphere) == 0x000368, "Member 'AUltra_Dynamic_Sky_C::Ultra_Dynamic_Sky_Sphere' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light) == 0x000370, "Member 'AUltra_Dynamic_Sky_C::Sun_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Sun_Light_Actor) == 0x000378, "Member 'AUltra_Dynamic_Sky_C::Custom_Sun_Light_Actor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_MID) == 0x000380, "Member 'AUltra_Dynamic_Sky_C::Sky_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Speed) == 0x000388, "Member 'AUltra_Dynamic_Sky_C::Cloud_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Wisps_Opacity__Clear_) == 0x000390, "Member 'AUltra_Dynamic_Sky_C::Cloud_Wisps_Opacity__Clear_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Refresh_Settings) == 0x000398, "Member 'AUltra_Dynamic_Sky_C::Refresh_Settings' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_of_Day) == 0x0003A0, "Member 'AUltra_Dynamic_Sky_C::Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Mode) == 0x0003A8, "Member 'AUltra_Dynamic_Sky_C::Sky_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Color_Mode) == 0x0003A9, "Member 'AUltra_Dynamic_Sky_C::Color_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Project_Mode) == 0x0003AA, "Member 'AUltra_Dynamic_Sky_C::Project_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Coverage) == 0x0003B0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog) == 0x0003B8, "Member 'AUltra_Dynamic_Sky_C::Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overall_Intensity) == 0x0003C0, "Member 'AUltra_Dynamic_Sky_C::Overall_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Direction) == 0x0003C8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Direction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Phase) == 0x0003D0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Manually_Position_Moon_Target) == 0x0003D8, "Member 'AUltra_Dynamic_Sky_C::Manually_Position_Moon_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Render_Moon) == 0x0003D9, "Member 'AUltra_Dynamic_Sky_C::Render_Moon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Intensity) == 0x0003E0, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Mobility) == 0x0003E8, "Member 'AUltra_Dynamic_Sky_C::Moon_Mobility' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Angle) == 0x0003F0, "Member 'AUltra_Dynamic_Sky_C::Moon_Angle' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Inclination) == 0x0003F8, "Member 'AUltra_Dynamic_Sky_C::Moon_Inclination' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Vertical_Offset) == 0x000400, "Member 'AUltra_Dynamic_Sky_C::Moon_Vertical_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Orbit_Offset) == 0x000408, "Member 'AUltra_Dynamic_Sky_C::Moon_Orbit_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Casts_Shadows) == 0x000410, "Member 'AUltra_Dynamic_Sky_C::Moon_Casts_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Scale) == 0x000418, "Member 'AUltra_Dynamic_Sky_C::Moon_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Phase) == 0x000420, "Member 'AUltra_Dynamic_Sky_C::Moon_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Phase_Changes_Over_Time) == 0x000428, "Member 'AUltra_Dynamic_Sky_C::Moon_Phase_Changes_Over_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dark_Side_Brightness) == 0x000430, "Member 'AUltra_Dynamic_Sky_C::Dark_Side_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Texture_Intensity__Night_) == 0x000438, "Member 'AUltra_Dynamic_Sky_C::Moon_Texture_Intensity__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Manually_Position_Sun_Target) == 0x000440, "Member 'AUltra_Dynamic_Sky_C::Manually_Position_Sun_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Intensity) == 0x000448, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Mobility) == 0x000450, "Member 'AUltra_Dynamic_Sky_C::Sun_Mobility' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Angle) == 0x000458, "Member 'AUltra_Dynamic_Sky_C::Sun_Angle' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Animate_Time_of_Day) == 0x000460, "Member 'AUltra_Dynamic_Sky_C::Animate_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Contrast) == 0x000468, "Member 'AUltra_Dynamic_Sky_C::Contrast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Inclination) == 0x000470, "Member 'AUltra_Dynamic_Sky_C::Sun_Inclination' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Vertical_Offset) == 0x000478, "Member 'AUltra_Dynamic_Sky_C::Sun_Vertical_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Casts_Shadows) == 0x000480, "Member 'AUltra_Dynamic_Sky_C::Sun_Casts_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Color) == 0x000484, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Texture_Intensity__Day_) == 0x000498, "Member 'AUltra_Dynamic_Sky_C::Moon_Texture_Intensity__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Color) == 0x0004A0, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Soften_Cloud_Layer_1) == 0x0004B0, "Member 'AUltra_Dynamic_Sky_C::Soften_Cloud_Layer_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Soften_Cloud_Layer_2) == 0x0004B8, "Member 'AUltra_Dynamic_Sky_C::Soften_Cloud_Layer_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sharpen_Outer_Edge) == 0x0004C0, "Member 'AUltra_Dynamic_Sky_C::Sharpen_Outer_Edge' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Intensity) == 0x0004C8, "Member 'AUltra_Dynamic_Sky_C::Stars_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Color) == 0x0004D0, "Member 'AUltra_Dynamic_Sky_C::Stars_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Material_Color) == 0x0004E0, "Member 'AUltra_Dynamic_Sky_C::Moon_Material_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Target) == 0x0004F0, "Member 'AUltra_Dynamic_Sky_C::Sun_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Radius) == 0x000508, "Member 'AUltra_Dynamic_Sky_C::Sun_Radius' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Cloud_Shadows_MID) == 0x000510, "Member 'AUltra_Dynamic_Sky_C::Sun_Cloud_Shadows_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Cloud_Shadows) == 0x000518, "Member 'AUltra_Dynamic_Sky_C::Use_Cloud_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Intensity_When_Sunny) == 0x000520, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Intensity_When_Sunny' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light) == 0x000528, "Member 'AUltra_Dynamic_Sky_C::Moon_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Moon_Light_Actor) == 0x000530, "Member 'AUltra_Dynamic_Sky_C::Custom_Moon_Light_Actor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Speed) == 0x000538, "Member 'AUltra_Dynamic_Sky_C::Stars_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Cloud_Shadows_MID) == 0x000540, "Member 'AUltra_Dynamic_Sky_C::Moon_Cloud_Shadows_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, New_Moon_Light_Brightness) == 0x000548, "Member 'AUltra_Dynamic_Sky_C::New_Moon_Light_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Texture_Rotation) == 0x000550, "Member 'AUltra_Dynamic_Sky_C::Moon_Texture_Rotation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Moon_Texture) == 0x000558, "Member 'AUltra_Dynamic_Sky_C::Custom_Moon_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light) == 0x000560, "Member 'AUltra_Dynamic_Sky_C::Sky_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Sky_Light_Actor) == 0x000568, "Member 'AUltra_Dynamic_Sky_C::Custom_Sky_Light_Actor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Height_Fog) == 0x000570, "Member 'AUltra_Dynamic_Sky_C::Height_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Height_Fog_Actor) == 0x000578, "Member 'AUltra_Dynamic_Sky_C::Custom_Height_Fog_Actor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Mode) == 0x000580, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Filter_Curve) == 0x000588, "Member 'AUltra_Dynamic_Sky_C::Night_Filter_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Glow_Intensity) == 0x000590, "Member 'AUltra_Dynamic_Sky_C::Moon_Glow_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Auroras) == 0x000598, "Member 'AUltra_Dynamic_Sky_C::Use_Auroras' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Intensity) == 0x0005A0, "Member 'AUltra_Dynamic_Sky_C::Aurora_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Speed) == 0x0005A8, "Member 'AUltra_Dynamic_Sky_C::Aurora_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Intensity_When_Overcast) == 0x0005B0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Intensity_When_Overcast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Softness_When_Sunny) == 0x0005B8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Softness_When_Sunny' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Softness_When_Overcast) == 0x0005C0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Softness_When_Overcast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Tiling_Layer_1) == 0x0005C8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Tiling_Layer_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Tiling_Layer_2) == 0x0005D0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Tiling_Layer_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Soften_Horizon) == 0x0005D8, "Member 'AUltra_Dynamic_Sky_C::Soften_Horizon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, One_Cloud_Layer) == 0x0005E0, "Member 'AUltra_Dynamic_Sky_C::One_Cloud_Layer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Height_Layer_1) == 0x0005E8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Height_Layer_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Height_Layer_2) == 0x0005F0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Height_Layer_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Swirling_Texture) == 0x0005F8, "Member 'AUltra_Dynamic_Sky_C::Overcast_Swirling_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Saturation) == 0x000600, "Member 'AUltra_Dynamic_Sky_C::Saturation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Balance) == 0x000608, "Member 'AUltra_Dynamic_Sky_C::Directional_Balance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dawn_Time) == 0x000610, "Member 'AUltra_Dynamic_Sky_C::Dawn_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk_Time) == 0x000618, "Member 'AUltra_Dynamic_Sky_C::Dusk_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Brightness) == 0x000620, "Member 'AUltra_Dynamic_Sky_C::Night_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Softness) == 0x000628, "Member 'AUltra_Dynamic_Sky_C::Sun_Softness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Volumetric_Scattering_Intensity) == 0x000630, "Member 'AUltra_Dynamic_Sky_C::Sun_Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Volumetric_Scattering_Intensity) == 0x000638, "Member 'AUltra_Dynamic_Sky_C::Moon_Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Phase) == 0x000640, "Member 'AUltra_Dynamic_Sky_C::Aurora_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_LightComponent) == 0x000648, "Member 'AUltra_Dynamic_Sky_C::Sun_LightComponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_LightComponent) == 0x000650, "Member 'AUltra_Dynamic_Sky_C::Moon_LightComponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, SkyLightComponent) == 0x000658, "Member 'AUltra_Dynamic_Sky_C::SkyLightComponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Height_Fog_Component) == 0x000660, "Member 'AUltra_Dynamic_Sky_C::Height_Fog_Component' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Apply_Exposure_Settings) == 0x000668, "Member 'AUltra_Dynamic_Sky_C::Apply_Exposure_Settings' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Compensation_Curve) == 0x000670, "Member 'AUltra_Dynamic_Sky_C::Exposure_Compensation_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Day_Length) == 0x000678, "Member 'AUltra_Dynamic_Sky_C::Day_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Length) == 0x000680, "Member 'AUltra_Dynamic_Sky_C::Night_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extend_Dawn_and_Dusk) == 0x000688, "Member 'AUltra_Dynamic_Sky_C::Extend_Dawn_and_Dusk' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stationary_Lights) == 0x000690, "Member 'AUltra_Dynamic_Sky_C::Stationary_Lights' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Fog_Density) == 0x000698, "Member 'AUltra_Dynamic_Sky_C::Base_Fog_Density' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Foggy_Density_Contribution) == 0x0006A0, "Member 'AUltra_Dynamic_Sky_C::Foggy_Density_Contribution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloudy_Density_Contribution) == 0x0006A8, "Member 'AUltra_Dynamic_Sky_C::Cloudy_Density_Contribution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dust_Density_Contribution) == 0x0006B0, "Member 'AUltra_Dynamic_Sky_C::Dust_Density_Contribution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_Total_Fog_Density) == 0x0006B8, "Member 'AUltra_Dynamic_Sky_C::Scale_Total_Fog_Density' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Tiling) == 0x0006C0, "Member 'AUltra_Dynamic_Sky_C::Stars_Tiling' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Daytime_Intensity) == 0x0006C8, "Member 'AUltra_Dynamic_Sky_C::Stars_Daytime_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Twinkle_Amount) == 0x0006D0, "Member 'AUltra_Dynamic_Sky_C::Twinkle_Amount' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Twinkle_Speed) == 0x0006D8, "Member 'AUltra_Dynamic_Sky_C::Twinkle_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tiling_Stars_Texture) == 0x0006E0, "Member 'AUltra_Dynamic_Sky_C::Tiling_Stars_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Real_Stars_Texture) == 0x000710, "Member 'AUltra_Dynamic_Sky_C::Real_Stars_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Phase) == 0x000740, "Member 'AUltra_Dynamic_Sky_C::Stars_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Intensity_Curve) == 0x000748, "Member 'AUltra_Dynamic_Sky_C::Stars_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Intensity) == 0x000750, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Mobility) == 0x000758, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Mobility' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Temperature) == 0x000760, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Temperature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Color_Multiplier__Day_) == 0x000768, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Color_Multiplier__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk_) == 0x000778, "Member 'AUltra_Dynamic_Sky_C::Dusk_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Color_Multiplier__Night_) == 0x000788, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Color_Multiplier__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Casts_Shadows) == 0x000798, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Casts_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DFAO_Min_Occlusion) == 0x0007A0, "Member 'AUltra_Dynamic_Sky_C::DFAO_Min_Occlusion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DFAO_Exponent) == 0x0007A8, "Member 'AUltra_Dynamic_Sky_C::DFAO_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Flat_Cubemap) == 0x0007B0, "Member 'AUltra_Dynamic_Sky_C::Flat_Cubemap' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Cubemap) == 0x0007E0, "Member 'AUltra_Dynamic_Sky_C::Custom_Cubemap' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tinted_Sky_Light_Lower_Hemisphere_Color) == 0x000810, "Member 'AUltra_Dynamic_Sky_C::Tinted_Sky_Light_Lower_Hemisphere_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Real_Time_Capture) == 0x000820, "Member 'AUltra_Dynamic_Sky_C::Real_Time_Capture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Captured_Sky_Light_Lower_Hemisphere_Tint) == 0x000824, "Member 'AUltra_Dynamic_Sky_C::Captured_Sky_Light_Lower_Hemisphere_Tint' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Recapture_Sky_light_Periodically) == 0x000834, "Member 'AUltra_Dynamic_Sky_C::Recapture_Sky_light_Periodically' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Recapture_Period__Seconds_) == 0x000838, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Recapture_Period__Seconds_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lights_Update_Period) == 0x000840, "Member 'AUltra_Dynamic_Sky_C::Lights_Update_Period' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lights_Update_Degree_Threshold) == 0x000848, "Member 'AUltra_Dynamic_Sky_C::Lights_Update_Degree_Threshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunrise_Event_Offset) == 0x000850, "Member 'AUltra_Dynamic_Sky_C::Sunrise_Event_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunset_Event_Offset) == 0x000858, "Member 'AUltra_Dynamic_Sky_C::Sunset_Event_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunset) == 0x000860, "Member 'AUltra_Dynamic_Sky_C::Sunset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunrise) == 0x000870, "Member 'AUltra_Dynamic_Sky_C::Sunrise' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Wisps_Opacity__Cloudy_) == 0x000880, "Member 'AUltra_Dynamic_Sky_C::Cloud_Wisps_Opacity__Cloudy_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Wisps_Texture) == 0x000888, "Member 'AUltra_Dynamic_Sky_C::Cloud_Wisps_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Noise_Type) == 0x000890, "Member 'AUltra_Dynamic_Sky_C::Cloud_Noise_Type' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Noise_Texture) == 0x000898, "Member 'AUltra_Dynamic_Sky_C::Custom_Noise_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Shader_Intensity) == 0x0008A0, "Member 'AUltra_Dynamic_Sky_C::Sun_Shader_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Lighting_Intensity) == 0x0008A8, "Member 'AUltra_Dynamic_Sky_C::Directional_Lighting_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Highlight_Radius) == 0x0008B0, "Member 'AUltra_Dynamic_Sky_C::Sun_Highlight_Radius' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Opacity) == 0x0008B8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Opacity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Horizon_Density_Multiplier) == 0x0008C0, "Member 'AUltra_Dynamic_Sky_C::Horizon_Density_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Zenith_Density_Multiplier) == 0x0008C8, "Member 'AUltra_Dynamic_Sky_C::Zenith_Density_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Latitude_Gradient_Position) == 0x0008D0, "Member 'AUltra_Dynamic_Sky_C::Latitude_Gradient_Position' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Latitude_Gradient_Width) == 0x0008D8, "Member 'AUltra_Dynamic_Sky_C::Latitude_Gradient_Width' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Around_Sun_Density_Multiplier) == 0x0008E0, "Member 'AUltra_Dynamic_Sky_C::Around_Sun_Density_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Around_Sun_Density_Exponent) == 0x0008E8, "Member 'AUltra_Dynamic_Sky_C::Around_Sun_Density_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Around_Moon_Density_Multiplier) == 0x0008F0, "Member 'AUltra_Dynamic_Sky_C::Around_Moon_Density_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Around_Moon_Density_Exponent) == 0x0008F8, "Member 'AUltra_Dynamic_Sky_C::Around_Moon_Density_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Shine_Intensity_Curve) == 0x000900, "Member 'AUltra_Dynamic_Sky_C::Shine_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Highlight_Intensity_Curve) == 0x000908, "Member 'AUltra_Dynamic_Sky_C::Sun_Highlight_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Highlight_Radius_Curve) == 0x000910, "Member 'AUltra_Dynamic_Sky_C::Sun_Highlight_Radius_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Adjust_for_Path_Tracer) == 0x000918, "Member 'AUltra_Dynamic_Sky_C::Adjust_for_Path_Tracer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dim_Directional_Lights_with_Cloud_Coverage) == 0x000919, "Member 'AUltra_Dynamic_Sky_C::Dim_Directional_Lights_with_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Spread_Out_Tick_Behaviors_Over_3_Frames) == 0x00091A, "Member 'AUltra_Dynamic_Sky_C::Spread_Out_Tick_Behaviors_Over_3_Frames' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Only_Fully_Update_Active_Parameters_When_Cloud_Coverage_Changes) == 0x00091B, "Member 'AUltra_Dynamic_Sky_C::Only_Fully_Update_Active_Parameters_When_Cloud_Coverage_Changes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extra_Night_Brightness_when_Cloudy) == 0x000920, "Member 'AUltra_Dynamic_Sky_C::Extra_Night_Brightness_when_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Lights_Absent_Brightness) == 0x000928, "Member 'AUltra_Dynamic_Sky_C::Directional_Lights_Absent_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Clouds_MID_Complex) == 0x000930, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Clouds_MID_Complex' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Rendering_Mode) == 0x000938, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Rendering_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Bottom_Altitude) == 0x000940, "Member 'AUltra_Dynamic_Sky_C::Bottom_Altitude' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_Height_Scale) == 0x000948, "Member 'AUltra_Dynamic_Sky_C::Layer_Height_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Clouds_Scale) == 0x000950, "Member 'AUltra_Dynamic_Sky_C::Base_Clouds_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, ThreeD_Noise_Scale) == 0x000958, "Member 'AUltra_Dynamic_Sky_C::ThreeD_Noise_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, ThreeD_Erosion_Intensity) == 0x000960, "Member 'AUltra_Dynamic_Sky_C::ThreeD_Erosion_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, High_Frequency_Noise_Amount) == 0x000968, "Member 'AUltra_Dynamic_Sky_C::High_Frequency_Noise_Amount' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, High_Frequency_Levels) == 0x000970, "Member 'AUltra_Dynamic_Sky_C::High_Frequency_Levels' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Distort_High_Frequency_Noise) == 0x000978, "Member 'AUltra_Dynamic_Sky_C::Distort_High_Frequency_Noise' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extinction_Scale) == 0x000980, "Member 'AUltra_Dynamic_Sky_C::Extinction_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Clouds_Scale) == 0x000988, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Clouds_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Floor_Variation) == 0x000990, "Member 'AUltra_Dynamic_Sky_C::Base_Floor_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Floor_Variation) == 0x000998, "Member 'AUltra_Dynamic_Sky_C::Overcast_Floor_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Floor_Luminance_Scale) == 0x0009A0, "Member 'AUltra_Dynamic_Sky_C::Floor_Luminance_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, View_Sample_Scale__Day_) == 0x0009A8, "Member 'AUltra_Dynamic_Sky_C::View_Sample_Scale__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, View_Sample_Scale__Night_) == 0x0009B0, "Member 'AUltra_Dynamic_Sky_C::View_Sample_Scale__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Shadow_Sample_Scale) == 0x0009B8, "Member 'AUltra_Dynamic_Sky_C::Shadow_Sample_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Shadow_Tracing_Distance) == 0x0009C0, "Member 'AUltra_Dynamic_Sky_C::Shadow_Tracing_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Color) == 0x0009C8, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Profile_LUT) == 0x0009D8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Profile_LUT' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Noise_Type) == 0x000A08, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Noise_Type' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Custom_Noise_Texture) == 0x000A10, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Custom_Noise_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Minimum_Erosion) == 0x000A18, "Member 'AUltra_Dynamic_Sky_C::Minimum_Erosion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Distance_to_Sample_MaxCount) == 0x000A20, "Member 'AUltra_Dynamic_Sky_C::Distance_to_Sample_MaxCount' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Clouds_Mip_Level) == 0x000A28, "Member 'AUltra_Dynamic_Sky_C::Base_Clouds_Mip_Level' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Reflection_Sample_Count_Scale) == 0x000A30, "Member 'AUltra_Dynamic_Sky_C::Reflection_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Reflection_Shadow_Sample_Count_Scale) == 0x000A38, "Member 'AUltra_Dynamic_Sky_C::Reflection_Shadow_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Ambient_Light_Intensity) == 0x000A40, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Ambient_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Ambient_Light__Day_) == 0x000A48, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Ambient_Light__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk__0) == 0x000A58, "Member 'AUltra_Dynamic_Sky_C::Dusk__0' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Ambient_Light__Night_) == 0x000A68, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Ambient_Light__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Ambient_Light_Saturation) == 0x000A78, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Ambient_Light_Saturation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Multiscattering_Light_Intensity) == 0x000A80, "Member 'AUltra_Dynamic_Sky_C::Multiscattering_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Multiscattering_Light_Occlusion) == 0x000A88, "Member 'AUltra_Dynamic_Sky_C::Multiscattering_Light_Occlusion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Clouds_MID_Simplified) == 0x000A90, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Clouds_MID_Simplified' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Start_Distance_when_Clear) == 0x000A98, "Member 'AUltra_Dynamic_Sky_C::Fog_Start_Distance_when_Clear' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Density_where_Start_Distance_Reaches_Zero) == 0x000AA0, "Member 'AUltra_Dynamic_Sky_C::Fog_Density_where_Start_Distance_Reaches_Zero' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Randomize_Cloud_Formation_on_Run) == 0x000AA8, "Member 'AUltra_Dynamic_Sky_C::Randomize_Cloud_Formation_on_Run' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, ThreeD_Noise_Vertical_Movement) == 0x000AB0, "Member 'AUltra_Dynamic_Sky_C::ThreeD_Noise_Vertical_Movement' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Formation_Change_Speed) == 0x000AB8, "Member 'AUltra_Dynamic_Sky_C::Formation_Change_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Macro_Variation) == 0x000AC0, "Member 'AUltra_Dynamic_Sky_C::Macro_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Macro_Scale) == 0x000AC8, "Member 'AUltra_Dynamic_Sky_C::Macro_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Multiscattering_Phase_1) == 0x000AD0, "Member 'AUltra_Dynamic_Sky_C::Multiscattering_Phase_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Multiscattering_Phase_2) == 0x000AD8, "Member 'AUltra_Dynamic_Sky_C::Multiscattering_Phase_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Multiscattering_Eccentricity) == 0x000AE0, "Member 'AUltra_Dynamic_Sky_C::Multiscattering_Eccentricity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_Speed) == 0x000AE8, "Member 'AUltra_Dynamic_Sky_C::Time_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Internal_Time_of_Day) == 0x000AF0, "Member 'AUltra_Dynamic_Sky_C::Internal_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Weather_BP) == 0x000AF8, "Member 'AUltra_Dynamic_Sky_C::Weather_BP' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tracing_Max_Start_Distance) == 0x000B00, "Member 'AUltra_Dynamic_Sky_C::Tracing_Max_Start_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Static_Clouds_MID) == 0x000B08, "Member 'AUltra_Dynamic_Sky_C::Static_Clouds_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Color_1) == 0x000B10, "Member 'AUltra_Dynamic_Sky_C::Aurora_Color_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Color_2) == 0x000B20, "Member 'AUltra_Dynamic_Sky_C::Aurora_Color_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Color_3) == 0x000B30, "Member 'AUltra_Dynamic_Sky_C::Aurora_Color_3' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_MID) == 0x000B40, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Sky_Mode_Scalability_Map) == 0x000B48, "Member 'AUltra_Dynamic_Sky_C::Use_Sky_Mode_Scalability_Map' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Mode_Scalability_Map) == 0x000B50, "Member 'AUltra_Dynamic_Sky_C::Sky_Mode_Scalability_Map' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Disk_Intensity) == 0x000BA0, "Member 'AUltra_Dynamic_Sky_C::Sun_Disk_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Disk_Color_Curve) == 0x000BA8, "Member 'AUltra_Dynamic_Sky_C::Sun_Disk_Color_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Intensity_Curve) == 0x000BB0, "Member 'AUltra_Dynamic_Sky_C::Aurora_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Clouds_Fog_MID) == 0x000BB8, "Member 'AUltra_Dynamic_Sky_C::Inside_Clouds_Fog_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tracing_Max_Distance__Inside_Cloud_Layer_) == 0x000BC0, "Member 'AUltra_Dynamic_Sky_C::Tracing_Max_Distance__Inside_Cloud_Layer_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tracing_Max_Distance__Outside_Cloud_Layer_) == 0x000BC8, "Member 'AUltra_Dynamic_Sky_C::Tracing_Max_Distance__Outside_Cloud_Layer_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Enable_Fog_Inside_Clouds) == 0x000BD0, "Member 'AUltra_Dynamic_Sky_C::Enable_Fog_Inside_Clouds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Texture) == 0x000BD8, "Member 'AUltra_Dynamic_Sky_C::Aurora_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, TwoD_Aurora_Max_Samples) == 0x000C08, "Member 'AUltra_Dynamic_Sky_C::TwoD_Aurora_Max_Samples' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, TwoD_Aurora_Sample_Step_Size) == 0x000C10, "Member 'AUltra_Dynamic_Sky_C::TwoD_Aurora_Sample_Step_Size' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, TwoD_Aurora_Line_Exponent) == 0x000C18, "Member 'AUltra_Dynamic_Sky_C::TwoD_Aurora_Line_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, TwoD_Aurora_Mask_Exponent) == 0x000C20, "Member 'AUltra_Dynamic_Sky_C::TwoD_Aurora_Mask_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_Sample_Count_Scale) == 0x000C28, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_Layer_Height) == 0x000C30, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_Layer_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_Bottom_Altitude) == 0x000C38, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_Bottom_Altitude' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Density_Daytime_Mutliplier) == 0x000C40, "Member 'AUltra_Dynamic_Sky_C::Fog_Density_Daytime_Mutliplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Density_Nighttime_Multiplier) == 0x000C48, "Member 'AUltra_Dynamic_Sky_C::Fog_Density_Nighttime_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Height_Fog_Falloff) == 0x000C50, "Member 'AUltra_Dynamic_Sky_C::Base_Height_Fog_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloudy_Height_Fog_Falloff) == 0x000C58, "Member 'AUltra_Dynamic_Sky_C::Cloudy_Height_Fog_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Foggy_Height_Fog_Falloff) == 0x000C60, "Member 'AUltra_Dynamic_Sky_C::Foggy_Height_Fog_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Cloud_Fog_Strength) == 0x000C68, "Member 'AUltra_Dynamic_Sky_C::Inside_Cloud_Fog_Strength' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Cloud_Fog_Color) == 0x000C70, "Member 'AUltra_Dynamic_Sky_C::Inside_Cloud_Fog_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, TwoD_Overcast_Turbulence) == 0x000C80, "Member 'AUltra_Dynamic_Sky_C::TwoD_Overcast_Turbulence' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Close_Fade_Distance) == 0x000C88, "Member 'AUltra_Dynamic_Sky_C::Close_Fade_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Close_Fade_Offset) == 0x000C90, "Member 'AUltra_Dynamic_Sky_C::Close_Fade_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Two_Layers) == 0x000C98, "Member 'AUltra_Dynamic_Sky_C::Two_Layers' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_2_Coverage_Scale) == 0x000CA0, "Member 'AUltra_Dynamic_Sky_C::Layer_2_Coverage_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_2_Extinction_Scale) == 0x000CA8, "Member 'AUltra_Dynamic_Sky_C::Layer_2_Extinction_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_2_Cloud_Scale) == 0x000CB0, "Member 'AUltra_Dynamic_Sky_C::Layer_2_Cloud_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_2_Mip_Offset) == 0x000CC0, "Member 'AUltra_Dynamic_Sky_C::Layer_2_Mip_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Distance_Between_Layers) == 0x000CC8, "Member 'AUltra_Dynamic_Sky_C::Distance_Between_Layers' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Enable_Sun_Light_Shaft_Bloom) == 0x000CD0, "Member 'AUltra_Dynamic_Sky_C::Enable_Sun_Light_Shaft_Bloom' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Shaft_Bloom_Scale) == 0x000CD8, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Shaft_Bloom_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Shaft_Max_Brightness) == 0x000CE8, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Shaft_Max_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Shaft_Bloom_Threshold) == 0x000CF8, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Shaft_Bloom_Threshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Shaft_Tint_Color) == 0x000D08, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Shaft_Tint_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Enable_Moon_Light_Shaft_Bloom) == 0x000D18, "Member 'AUltra_Dynamic_Sky_C::Enable_Moon_Light_Shaft_Bloom' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Shaft_Bloom_Scale) == 0x000D20, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Shaft_Bloom_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Shaft_Max_Brightness) == 0x000D30, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Shaft_Max_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Shaft_Bloom_Threshold) == 0x000D40, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Shaft_Bloom_Threshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Shaft_Tint_Color) == 0x000D50, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Shaft_Tint_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Factor_Absent_Directional_Lights_Brightness) == 0x000D60, "Member 'AUltra_Dynamic_Sky_C::Factor_Absent_Directional_Lights_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Real_Time_Capture_Uses_Time_Slicing) == 0x000D61, "Member 'AUltra_Dynamic_Sky_C::Real_Time_Capture_Uses_Time_Slicing' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Mobile_Overrides) == 0x000D62, "Member 'AUltra_Dynamic_Sky_C::Use_Mobile_Overrides' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Clouds_Replacement) == 0x000D63, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Clouds_Replacement' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Real_Time_Capture_Sky_Light_Replacement) == 0x000D64, "Member 'AUltra_Dynamic_Sky_C::Real_Time_Capture_Sky_Light_Replacement' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Adjust_For_Mobile_Renderer) == 0x000D65, "Member 'AUltra_Dynamic_Sky_C::Adjust_For_Mobile_Renderer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Mobile_Platforms) == 0x000D68, "Member 'AUltra_Dynamic_Sky_C::Mobile_Platforms' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Target) == 0x000D78, "Member 'AUltra_Dynamic_Sky_C::Moon_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Mobile) == 0x000D90, "Member 'AUltra_Dynamic_Sky_C::Mobile' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulate_Real_Sun) == 0x000D91, "Member 'AUltra_Dynamic_Sky_C::Simulate_Real_Sun' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulate_Real_Moon) == 0x000D92, "Member 'AUltra_Dynamic_Sky_C::Simulate_Real_Moon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulate_Real_Stars) == 0x000D93, "Member 'AUltra_Dynamic_Sky_C::Simulate_Real_Stars' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Location_Preset) == 0x000D94, "Member 'AUltra_Dynamic_Sky_C::Location_Preset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Latitude) == 0x000D98, "Member 'AUltra_Dynamic_Sky_C::Latitude' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Longitude) == 0x000DA0, "Member 'AUltra_Dynamic_Sky_C::Longitude' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_Zone) == 0x000DA8, "Member 'AUltra_Dynamic_Sky_C::Time_Zone' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Year) == 0x000DB0, "Member 'AUltra_Dynamic_Sky_C::Year' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Month) == 0x000DB4, "Member 'AUltra_Dynamic_Sky_C::Month' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Day) == 0x000DB8, "Member 'AUltra_Dynamic_Sky_C::Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, North_Yaw) == 0x000DC0, "Member 'AUltra_Dynamic_Sky_C::North_Yaw' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulation_Speed) == 0x000DC8, "Member 'AUltra_Dynamic_Sky_C::Simulation_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, True_Real_World_Time) == 0x000DD0, "Member 'AUltra_Dynamic_Sky_C::True_Real_World_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Apply_Daylight_Savings_Time) == 0x000DD1, "Member 'AUltra_Dynamic_Sky_C::Apply_Daylight_Savings_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_Start_Month) == 0x000DD4, "Member 'AUltra_Dynamic_Sky_C::DST_Start_Month' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_Start_Day) == 0x000DD8, "Member 'AUltra_Dynamic_Sky_C::DST_Start_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_End_Month) == 0x000DDC, "Member 'AUltra_Dynamic_Sky_C::DST_End_Month' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_End_Day) == 0x000DE0, "Member 'AUltra_Dynamic_Sky_C::DST_End_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_Change_Hour) == 0x000DE4, "Member 'AUltra_Dynamic_Sky_C::DST_Change_Hour' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Months) == 0x000DE8, "Member 'AUltra_Dynamic_Sky_C::Months' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Months__Leap_Year_) == 0x000DF8, "Member 'AUltra_Dynamic_Sky_C::Months__Leap_Year_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stellar_Calibration) == 0x000E08, "Member 'AUltra_Dynamic_Sky_C::Stellar_Calibration' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lunar_Orbit_Calibration) == 0x000E10, "Member 'AUltra_Dynamic_Sky_C::Lunar_Orbit_Calibration' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lunar_Inclination_Calibration) == 0x000E18, "Member 'AUltra_Dynamic_Sky_C::Lunar_Inclination_Calibration' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Runtime) == 0x000E20, "Member 'AUltra_Dynamic_Sky_C::Runtime' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Daylight_Savings_Time) == 0x000E21, "Member 'AUltra_Dynamic_Sky_C::Daylight_Savings_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Total_Days_Elapsed) == 0x000E24, "Member 'AUltra_Dynamic_Sky_C::Total_Days_Elapsed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Clouds_Move_with_Time_of_Day) == 0x000E28, "Member 'AUltra_Dynamic_Sky_C::Clouds_Move_with_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_of_Day_Movement_Multiplier) == 0x000E30, "Member 'AUltra_Dynamic_Sky_C::Time_of_Day_Movement_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_MID_Parent_Instances) == 0x000E38, "Member 'AUltra_Dynamic_Sky_C::Sky_MID_Parent_Instances' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Shadows) == 0x000E88, "Member 'AUltra_Dynamic_Sky_C::Fog_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dust_Shadows) == 0x000E90, "Member 'AUltra_Dynamic_Sky_C::Dust_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, TwoD_Cloud_Shadows_Speed) == 0x000E98, "Member 'AUltra_Dynamic_Sky_C::TwoD_Cloud_Shadows_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, TwoD_Cloud_Shadows_Scale) == 0x000EA0, "Member 'AUltra_Dynamic_Sky_C::TwoD_Cloud_Shadows_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Disable_Directional_Light_Shadows_when_Fully_Shadowed_by_Clouds) == 0x000EA8, "Member 'AUltra_Dynamic_Sky_C::Disable_Directional_Light_Shadows_when_Fully_Shadowed_by_Clouds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Light_Function_Material) == 0x000EB0, "Member 'AUltra_Dynamic_Sky_C::Custom_Light_Function_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Force_Light_Functions_On) == 0x000EB8, "Member 'AUltra_Dynamic_Sky_C::Force_Light_Functions_On' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_of_Day_Replication_Period) == 0x000EC0, "Member 'AUltra_Dynamic_Sky_C::Time_of_Day_Replication_Period' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Time_of_Day) == 0x000EC8, "Member 'AUltra_Dynamic_Sky_C::Replicated_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Moon_Phase) == 0x000ED0, "Member 'AUltra_Dynamic_Sky_C::Replicated_Moon_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_Sun_Radius_as_it_Nears_Horizon) == 0x000ED8, "Member 'AUltra_Dynamic_Sky_C::Scale_Sun_Radius_as_it_Nears_Horizon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Specular_Scale) == 0x000EE0, "Member 'AUltra_Dynamic_Sky_C::Sun_Specular_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_Moon_Radius_as_it_Nears_Horizon) == 0x000EE8, "Member 'AUltra_Dynamic_Sky_C::Scale_Moon_Radius_as_it_Nears_Horizon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Colors_from_Sky_Atmosphere) == 0x000EF0, "Member 'AUltra_Dynamic_Sky_C::Fog_Colors_from_Sky_Atmosphere' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusty_Height_Fog_Falloff) == 0x000EF8, "Member 'AUltra_Dynamic_Sky_C::Dusty_Height_Fog_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Specular_Scale) == 0x000F00, "Member 'AUltra_Dynamic_Sky_C::Moon_Specular_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Day_Length) == 0x000F08, "Member 'AUltra_Dynamic_Sky_C::Replicated_Day_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Night_Length) == 0x000F10, "Member 'AUltra_Dynamic_Sky_C::Replicated_Night_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Time_Speed) == 0x000F18, "Member 'AUltra_Dynamic_Sky_C::Replicated_Time_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Simulation_Speed) == 0x000F20, "Member 'AUltra_Dynamic_Sky_C::Replicated_Simulation_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Ambient_Light_from_Sky_Atmosphere) == 0x000F28, "Member 'AUltra_Dynamic_Sky_C::Ambient_Light_from_Sky_Atmosphere' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, High_Frequency_Disable_Distance) == 0x000F30, "Member 'AUltra_Dynamic_Sky_C::High_Frequency_Disable_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Change_to_Simplified_Material_when_Overcast) == 0x000F38, "Member 'AUltra_Dynamic_Sky_C::Change_to_Simplified_Material_when_Overcast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simplified_Material_Cloud_Coverage_Threshold) == 0x000F40, "Member 'AUltra_Dynamic_Sky_C::Simplified_Material_Cloud_Coverage_Threshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simplified_Material_Fade_Length) == 0x000F48, "Member 'AUltra_Dynamic_Sky_C::Simplified_Material_Fade_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_View_Samples_when_Overcast) == 0x000F50, "Member 'AUltra_Dynamic_Sky_C::Scale_View_Samples_when_Overcast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Current_Volumetric_Clouds_MID) == 0x000F58, "Member 'AUltra_Dynamic_Sky_C::Current_Volumetric_Clouds_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Clouds_Position) == 0x000F60, "Member 'AUltra_Dynamic_Sky_C::Clouds_Position' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Last_Clouds_Time_of_Day_Factor) == 0x000F78, "Member 'AUltra_Dynamic_Sky_C::Last_Clouds_Time_of_Day_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Starting_Cloud_Texture_Velocity) == 0x000F80, "Member 'AUltra_Dynamic_Sky_C::Starting_Cloud_Texture_Velocity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Control_Sky_Atmosphere_Settings) == 0x000F98, "Member 'AUltra_Dynamic_Sky_C::Control_Sky_Atmosphere_Settings' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Rayleigh_Scattering_Color__Day_) == 0x000F9C, "Member 'AUltra_Dynamic_Sky_C::Rayleigh_Scattering_Color__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk__1) == 0x000FAC, "Member 'AUltra_Dynamic_Sky_C::Dusk__1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Rayleigh_Scattering_Color__Night_) == 0x000FBC, "Member 'AUltra_Dynamic_Sky_C::Rayleigh_Scattering_Color__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Desaturate_Rayleigh_Scattering_when_Cloudy) == 0x000FD0, "Member 'AUltra_Dynamic_Sky_C::Desaturate_Rayleigh_Scattering_when_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Brighten_Rayleigh_Scattering_When_Cloudy) == 0x000FD8, "Member 'AUltra_Dynamic_Sky_C::Brighten_Rayleigh_Scattering_When_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Current_Tick_Set) == 0x000FE0, "Member 'AUltra_Dynamic_Sky_C::Current_Tick_Set' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Coverage_Change_Speed) == 0x000FE8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Coverage_Change_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_of_Day_Change_Speed) == 0x000FF0, "Member 'AUltra_Dynamic_Sky_C::Time_of_Day_Change_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Change_Speed) == 0x000FF8, "Member 'AUltra_Dynamic_Sky_C::Fog_Change_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dust_Change_Speed) == 0x001000, "Member 'AUltra_Dynamic_Sky_C::Dust_Change_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Current_Time_of_Day_Offset) == 0x001008, "Member 'AUltra_Dynamic_Sky_C::Current_Time_of_Day_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Last_Frame_Cloud_Coverage) == 0x001010, "Member 'AUltra_Dynamic_Sky_C::Last_Frame_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Coverage_Change_This_Frame) == 0x001018, "Member 'AUltra_Dynamic_Sky_C::Cloud_Coverage_Change_This_Frame' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Properties) == 0x001020, "Member 'AUltra_Dynamic_Sky_C::Properties' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Last_Frame_Time_of_Day) == 0x001070, "Member 'AUltra_Dynamic_Sky_C::Last_Frame_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Sky_Glow) == 0x001078, "Member 'AUltra_Dynamic_Sky_C::Night_Sky_Glow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Sky_Glow_Color) == 0x001080, "Member 'AUltra_Dynamic_Sky_C::Night_Sky_Glow_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Light_Pollution_Intensity) == 0x001090, "Member 'AUltra_Dynamic_Sky_C::Light_Pollution_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Light_Pollution_Color) == 0x001098, "Member 'AUltra_Dynamic_Sky_C::Light_Pollution_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Fog_Post_Process_MID) == 0x0010A8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Fog_Post_Process_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dimming_Range_Lower_Bound) == 0x0010B0, "Member 'AUltra_Dynamic_Sky_C::Dimming_Range_Lower_Bound' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dimming_Range_Upper_Bound) == 0x0010B8, "Member 'AUltra_Dynamic_Sky_C::Dimming_Range_Upper_Bound' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dimming_Range_Exponent) == 0x0010C0, "Member 'AUltra_Dynamic_Sky_C::Dimming_Range_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Sky_Sphere_Material) == 0x0010C8, "Member 'AUltra_Dynamic_Sky_C::Custom_Sky_Sphere_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Snow_Contribution) == 0x0010D0, "Member 'AUltra_Dynamic_Sky_C::Fog_Snow_Contribution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Midnight) == 0x0010D8, "Member 'AUltra_Dynamic_Sky_C::Midnight' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunrise_Color__Absorption_) == 0x0010E8, "Member 'AUltra_Dynamic_Sky_C::Sunrise_Color__Absorption_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunrise_Color_Intensity__Absorption_Scale_) == 0x0010F8, "Member 'AUltra_Dynamic_Sky_C::Sunrise_Color_Intensity__Absorption_Scale_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulated_Sunrise_Time) == 0x001100, "Member 'AUltra_Dynamic_Sky_C::Simulated_Sunrise_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulated_Sunset_Time) == 0x001108, "Member 'AUltra_Dynamic_Sky_C::Simulated_Sunset_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Disallow_Tick_Skip) == 0x001110, "Member 'AUltra_Dynamic_Sky_C::Disallow_Tick_Skip' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Cloud_Height) == 0x001118, "Member 'AUltra_Dynamic_Sky_C::Base_Cloud_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Enable_Sun_Lens_Flare) == 0x001120, "Member 'AUltra_Dynamic_Sky_C::Enable_Sun_Lens_Flare' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lens_Flare_Type) == 0x001121, "Member 'AUltra_Dynamic_Sky_C::Lens_Flare_Type' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lens_Flare_Strength) == 0x001128, "Member 'AUltra_Dynamic_Sky_C::Lens_Flare_Strength' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lens_Flare_Tint) == 0x001130, "Member 'AUltra_Dynamic_Sky_C::Lens_Flare_Tint' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lens_Flare_MID) == 0x001140, "Member 'AUltra_Dynamic_Sky_C::Lens_Flare_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Lens_Flare_Parent_Instance) == 0x001148, "Member 'AUltra_Dynamic_Sky_C::Custom_Lens_Flare_Parent_Instance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_Flare_Elements) == 0x001150, "Member 'AUltra_Dynamic_Sky_C::Scale_Flare_Elements' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dynamic_Sky_Light_Transition_Time) == 0x001158, "Member 'AUltra_Dynamic_Sky_C::Dynamic_Sky_Light_Transition_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Target_Sky_Light_Multiplier) == 0x001160, "Member 'AUltra_Dynamic_Sky_C::Target_Sky_Light_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dynamic_Sky_Light_Multiplier) == 0x001168, "Member 'AUltra_Dynamic_Sky_C::Dynamic_Sky_Light_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Override_with_New_Changes) == 0x001170, "Member 'AUltra_Dynamic_Sky_C::Override_with_New_Changes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Turbulence_MID) == 0x001178, "Member 'AUltra_Dynamic_Sky_C::Overcast_Turbulence_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_View_Samples_when_Camera_is_In_Cloud_Layer) == 0x001180, "Member 'AUltra_Dynamic_Sky_C::Scale_View_Samples_when_Camera_is_In_Cloud_Layer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Low_Material_Quality_Sample_Count_Scale) == 0x001188, "Member 'AUltra_Dynamic_Sky_C::Low_Material_Quality_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Medium_Material_Quality_Sample_Count_Scale) == 0x001190, "Member 'AUltra_Dynamic_Sky_C::Medium_Material_Quality_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Epic_Material_Quality_Sample_Count_Scale) == 0x001198, "Member 'AUltra_Dynamic_Sky_C::Epic_Material_Quality_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Epic_Quality_Volume_Texture) == 0x0011A0, "Member 'AUltra_Dynamic_Sky_C::Epic_Quality_Volume_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, High_Quality_Volume_Texture) == 0x0011D0, "Member 'AUltra_Dynamic_Sky_C::High_Quality_Volume_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Low_Quality_Volume_Texture) == 0x001200, "Member 'AUltra_Dynamic_Sky_C::Low_Quality_Volume_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Cloud_Fog_Parent_Material) == 0x001230, "Member 'AUltra_Dynamic_Sky_C::Inside_Cloud_Fog_Parent_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Cloud_Fog_System) == 0x001260, "Member 'AUltra_Dynamic_Sky_C::Inside_Cloud_Fog_System' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Post_Process_Cloud_Fog_Parent_Material) == 0x001290, "Member 'AUltra_Dynamic_Sky_C::Post_Process_Cloud_Fog_Parent_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_and_Shadow_MIDs) == 0x0012C0, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_and_Shadow_MIDs' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_MIDs) == 0x0012D0, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_MIDs' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Current_Intensity_Value) == 0x0012E0, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Current_Intensity_Value' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Twilight_Color__Absorption_) == 0x0012E8, "Member 'AUltra_Dynamic_Sky_C::Twilight_Color__Absorption_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Twilight_Color_Intensity__Absorption_Scale_) == 0x0012F8, "Member 'AUltra_Dynamic_Sky_C::Twilight_Color_Intensity__Absorption_Scale_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Keep_Planet_Top_at_Camera_XY_Location) == 0x001300, "Member 'AUltra_Dynamic_Sky_C::Keep_Planet_Top_at_Camera_XY_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Sky_Color__Day_) == 0x001304, "Member 'AUltra_Dynamic_Sky_C::Base_Sky_Color__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk__2) == 0x001314, "Member 'AUltra_Dynamic_Sky_C::Dusk__2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Sky_Color__Night_) == 0x001324, "Member 'AUltra_Dynamic_Sky_C::Base_Sky_Color__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Light_Color__Day_) == 0x001334, "Member 'AUltra_Dynamic_Sky_C::Cloud_Light_Color__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk__3) == 0x001344, "Member 'AUltra_Dynamic_Sky_C::Dusk__3' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Light_Color__Night_) == 0x001354, "Member 'AUltra_Dynamic_Sky_C::Cloud_Light_Color__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Dark_Color__Day_) == 0x001364, "Member 'AUltra_Dynamic_Sky_C::Cloud_Dark_Color__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk__4) == 0x001374, "Member 'AUltra_Dynamic_Sky_C::Dusk__4' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Dark_Color__Night_) == 0x001384, "Member 'AUltra_Dynamic_Sky_C::Cloud_Dark_Color__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Glow_Color) == 0x001394, "Member 'AUltra_Dynamic_Sky_C::Sun_Glow_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Glow_Tint) == 0x0013A4, "Member 'AUltra_Dynamic_Sky_C::Moon_Glow_Tint' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Intensity_Curve) == 0x0013B8, "Member 'AUltra_Dynamic_Sky_C::Directional_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Light_Scattering_Curve) == 0x0013C0, "Member 'AUltra_Dynamic_Sky_C::Directional_Light_Scattering_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Atmospheric_Scattering_LUT_Texture) == 0x0013C8, "Member 'AUltra_Dynamic_Sky_C::Atmospheric_Scattering_LUT_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Color_Mode) == 0x0013D0, "Member 'AUltra_Dynamic_Sky_C::Fog_Color_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Color_Intensity_Scale) == 0x0013D8, "Member 'AUltra_Dynamic_Sky_C::Fog_Color_Intensity_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Scattering_Color_Curve) == 0x0013E0, "Member 'AUltra_Dynamic_Sky_C::Fog_Scattering_Color_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Inscattering_Sun) == 0x0013E8, "Member 'AUltra_Dynamic_Sky_C::Fog_Inscattering_Sun' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Inscattering_Moon) == 0x0013F8, "Member 'AUltra_Dynamic_Sky_C::Fog_Inscattering_Moon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Directional_Scattering_Color_Curve) == 0x001408, "Member 'AUltra_Dynamic_Sky_C::Fog_Directional_Scattering_Color_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Directional_Inscattering) == 0x001410, "Member 'AUltra_Dynamic_Sky_C::Fog_Directional_Inscattering' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Foggy_Desaturation) == 0x001420, "Member 'AUltra_Dynamic_Sky_C::Foggy_Desaturation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Desaturation) == 0x001428, "Member 'AUltra_Dynamic_Sky_C::Overcast_Desaturation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Brightness_Day) == 0x001430, "Member 'AUltra_Dynamic_Sky_C::Overcast_Brightness_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Brightness_Night) == 0x001438, "Member 'AUltra_Dynamic_Sky_C::Overcast_Brightness_Night' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, All_Fog_Colors_Multiplier) == 0x001440, "Member 'AUltra_Dynamic_Sky_C::All_Fog_Colors_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Atmosphere_Fog_Influence_Curve) == 0x001450, "Member 'AUltra_Dynamic_Sky_C::Sky_Atmosphere_Fog_Influence_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dust_Amount) == 0x001458, "Member 'AUltra_Dynamic_Sky_C::Dust_Amount' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dust_Color) == 0x001460, "Member 'AUltra_Dynamic_Sky_C::Dust_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Volumetric_Fog) == 0x001470, "Member 'AUltra_Dynamic_Sky_C::Use_Volumetric_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Disable_Height_Fog_Above_Volumetric_Cloud_Layer) == 0x001471, "Member 'AUltra_Dynamic_Sky_C::Disable_Height_Fog_Above_Volumetric_Cloud_Layer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Height_Fog_Density) == 0x001474, "Member 'AUltra_Dynamic_Sky_C::Height_Fog_Density' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Using_Cloud_Fog_Post_Process) == 0x001478, "Member 'AUltra_Dynamic_Sky_C::Using_Cloud_Fog_Post_Process' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Current_Camera_Location) == 0x001480, "Member 'AUltra_Dynamic_Sky_C::Current_Camera_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Ambient_Fog_Color) == 0x001498, "Member 'AUltra_Dynamic_Sky_C::Ambient_Fog_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Base_Fog_Color) == 0x0014A8, "Member 'AUltra_Dynamic_Sky_C::Directional_Base_Fog_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scaled_Directional_Base_Fog_Color) == 0x0014B8, "Member 'AUltra_Dynamic_Sky_C::Scaled_Directional_Base_Fog_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_Parent_Material) == 0x0014C8, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_Parent_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Masks_Texture) == 0x0014F8, "Member 'AUltra_Dynamic_Sky_C::Moon_Masks_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_and_Static_Clouds_MID) == 0x001528, "Member 'AUltra_Dynamic_Sky_C::Sky_and_Static_Clouds_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_and_Shadows_MIDs) == 0x001538, "Member 'AUltra_Dynamic_Sky_C::Sky_and_Shadows_MIDs' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Turbulence_Parent_Material) == 0x001548, "Member 'AUltra_Dynamic_Sky_C::Overcast_Turbulence_Parent_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Forward_Shading) == 0x001578, "Member 'AUltra_Dynamic_Sky_C::Forward_Shading' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Hourly) == 0x001580, "Member 'AUltra_Dynamic_Sky_C::Hourly' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Event_Hour) == 0x001590, "Member 'AUltra_Dynamic_Sky_C::Event_Hour' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Wisps_Color_Intensity) == 0x001594, "Member 'AUltra_Dynamic_Sky_C::Cloud_Wisps_Color_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Max_Sun_Source_Angle_Scale) == 0x001598, "Member 'AUltra_Dynamic_Sky_C::Max_Sun_Source_Angle_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Source_Angle_Softness) == 0x0015A0, "Member 'AUltra_Dynamic_Sky_C::Sun_Source_Angle_Softness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Max_Moon_Source_Angle_Scale) == 0x0015A8, "Member 'AUltra_Dynamic_Sky_C::Max_Moon_Source_Angle_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Time_A) == 0x0015B0, "Member 'AUltra_Dynamic_Sky_C::Transition_Time_A' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Time_B) == 0x0015B8, "Member 'AUltra_Dynamic_Sky_C::Transition_Time_B' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transitioning_Time) == 0x0015C0, "Member 'AUltra_Dynamic_Sky_C::Transitioning_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Easing_Function) == 0x0015C1, "Member 'AUltra_Dynamic_Sky_C::Transition_Easing_Function' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Easing_Exponent) == 0x0015C8, "Member 'AUltra_Dynamic_Sky_C::Transition_Easing_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Timer) == 0x0015D0, "Member 'AUltra_Dynamic_Sky_C::Transition_Timer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Duration) == 0x0015D8, "Member 'AUltra_Dynamic_Sky_C::Transition_Duration' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Days_Counted) == 0x0015E0, "Member 'AUltra_Dynamic_Sky_C::Transition_Days_Counted' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Can_Go_Backwards) == 0x0015E4, "Member 'AUltra_Dynamic_Sky_C::Transition_Can_Go_Backwards' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Source_Angle_Softness) == 0x0015E8, "Member 'AUltra_Dynamic_Sky_C::Moon_Source_Angle_Softness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Bias_Day) == 0x0015F0, "Member 'AUltra_Dynamic_Sky_C::Exposure_Bias_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Bias_Night) == 0x0015F4, "Member 'AUltra_Dynamic_Sky_C::Exposure_Bias_Night' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Bias_Cloudy) == 0x0015F8, "Member 'AUltra_Dynamic_Sky_C::Exposure_Bias_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Bias_Foggy) == 0x0015FC, "Member 'AUltra_Dynamic_Sky_C::Exposure_Bias_Foggy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Bias_Dusty) == 0x001600, "Member 'AUltra_Dynamic_Sky_C::Exposure_Bias_Dusty' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Min_Brightness) == 0x001604, "Member 'AUltra_Dynamic_Sky_C::Exposure_Min_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Max_Brightness) == 0x001608, "Member 'AUltra_Dynamic_Sky_C::Exposure_Max_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Apply_Interior_Adjustments) == 0x00160C, "Member 'AUltra_Dynamic_Sky_C::Apply_Interior_Adjustments' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extra_Fog_Start_Distance_in_Interior) == 0x001610, "Member 'AUltra_Dynamic_Sky_C::Extra_Fog_Start_Distance_in_Interior' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Density_Multiplier_in_Interior) == 0x001618, "Member 'AUltra_Dynamic_Sky_C::Fog_Density_Multiplier_in_Interior' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Bias_in_Interior) == 0x001620, "Member 'AUltra_Dynamic_Sky_C::Exposure_Bias_in_Interior' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Intensity_Multiplier_in_Interiors) == 0x001628, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Intensity_Multiplier_in_Interiors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Intensity_Multiplier_in_Interiors) == 0x001630, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Intensity_Multiplier_in_Interiors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Intensity_Multiplier_in_Interiors) == 0x001638, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Intensity_Multiplier_in_Interiors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extra_Sun_Volumetric_Scattering_in_Interiors) == 0x001640, "Member 'AUltra_Dynamic_Sky_C::Extra_Sun_Volumetric_Scattering_in_Interiors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extra_Moon_Volumetric_Scattering_in_Interiors) == 0x001648, "Member 'AUltra_Dynamic_Sky_C::Extra_Moon_Volumetric_Scattering_in_Interiors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Occlusion_Sampling_Mode) == 0x001650, "Member 'AUltra_Dynamic_Sky_C::Occlusion_Sampling_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Max_Interior_Trace_Distance) == 0x001658, "Member 'AUltra_Dynamic_Sky_C::Max_Interior_Trace_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Interior_Occlusion_Trace_Channel) == 0x001660, "Member 'AUltra_Dynamic_Sky_C::Interior_Occlusion_Trace_Channel' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Interior_Occlusion_Update_Period) == 0x001668, "Member 'AUltra_Dynamic_Sky_C::Interior_Occlusion_Update_Period' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Rainbow_MID) == 0x001670, "Member 'AUltra_Dynamic_Sky_C::Rainbow_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadow_Disable_Threshold) == 0x001678, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadow_Disable_Threshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fraction_of_Trace_Hits_for_No_Occlusion) == 0x001680, "Member 'AUltra_Dynamic_Sky_C::Fraction_of_Trace_Hits_for_No_Occlusion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fraction_of_Trace_Hits_for_Full_Occlusion) == 0x001688, "Member 'AUltra_Dynamic_Sky_C::Fraction_of_Trace_Hits_for_Full_Occlusion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Bottom_World_Height) == 0x001690, "Member 'AUltra_Dynamic_Sky_C::Cloud_Bottom_World_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Floats_Old) == 0x001698, "Member 'AUltra_Dynamic_Sky_C::Cached_Floats_Old' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Floats_New) == 0x0016A8, "Member 'AUltra_Dynamic_Sky_C::Cached_Floats_New' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cache_Alpha) == 0x0016B8, "Member 'AUltra_Dynamic_Sky_C::Cache_Alpha' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Filling_Starting_Cache) == 0x0016C0, "Member 'AUltra_Dynamic_Sky_C::Filling_Starting_Cache' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cache_Period) == 0x0016C8, "Member 'AUltra_Dynamic_Sky_C::Cache_Period' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Colors_Old) == 0x0016D0, "Member 'AUltra_Dynamic_Sky_C::Cached_Colors_Old' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Colors_New) == 0x0016E0, "Member 'AUltra_Dynamic_Sky_C::Cached_Colors_New' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Vectors_Old) == 0x0016F0, "Member 'AUltra_Dynamic_Sky_C::Cached_Vectors_Old' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Vectors_New) == 0x001700, "Member 'AUltra_Dynamic_Sky_C::Cached_Vectors_New' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Sun_Vector) == 0x001710, "Member 'AUltra_Dynamic_Sky_C::Cached_Sun_Vector' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Moon_Vector) == 0x001728, "Member 'AUltra_Dynamic_Sky_C::Cached_Moon_Vector' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Change_This_Frame) == 0x001740, "Member 'AUltra_Dynamic_Sky_C::Fog_Change_This_Frame' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Last_Frame_Fog) == 0x001748, "Member 'AUltra_Dynamic_Sky_C::Last_Frame_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Last_Frame_Dust) == 0x001750, "Member 'AUltra_Dynamic_Sky_C::Last_Frame_Dust' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dust_Change_This_Frame) == 0x001758, "Member 'AUltra_Dynamic_Sky_C::Dust_Change_This_Frame' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Value_Changing) == 0x001760, "Member 'AUltra_Dynamic_Sky_C::Cached_Value_Changing' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Max_Property_Cache_Period) == 0x001770, "Member 'AUltra_Dynamic_Sky_C::Max_Property_Cache_Period' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_of_Last_Cache) == 0x001778, "Member 'AUltra_Dynamic_Sky_C::Time_of_Last_Cache' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Preset_Location_Coordinates) == 0x001780, "Member 'AUltra_Dynamic_Sky_C::Preset_Location_Coordinates' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Disable_Image_Based_Lens_Flares_when_Enabled) == 0x0017D0, "Member 'AUltra_Dynamic_Sky_C::Disable_Image_Based_Lens_Flares_when_Enabled' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Starting_Sky_Atmosphere_Height) == 0x0017D8, "Member 'AUltra_Dynamic_Sky_C::Starting_Sky_Atmosphere_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Post_Process_Components) == 0x0017E0, "Member 'AUltra_Dynamic_Sky_C::Post_Process_Components' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, User_Post_Process_Components) == 0x0017F0, "Member 'AUltra_Dynamic_Sky_C::User_Post_Process_Components' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Using_Post_Process_Components) == 0x001800, "Member 'AUltra_Dynamic_Sky_C::Using_Post_Process_Components' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Wisps_Tint__Day_) == 0x001804, "Member 'AUltra_Dynamic_Sky_C::Cloud_Wisps_Tint__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk__5) == 0x001814, "Member 'AUltra_Dynamic_Sky_C::Dusk__5' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Wisps_Tint__Night_) == 0x001824, "Member 'AUltra_Dynamic_Sky_C::Cloud_Wisps_Tint__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Increase_Wisps_Brightness_Around_Sun) == 0x001838, "Member 'AUltra_Dynamic_Sky_C::Increase_Wisps_Brightness_Around_Sun' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Increase_Wisps_Brightness_Around_Moon) == 0x001840, "Member 'AUltra_Dynamic_Sky_C::Increase_Wisps_Brightness_Around_Moon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Moon_Phase) == 0x001848, "Member 'AUltra_Dynamic_Sky_C::Cached_Moon_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Solar_Eclipse) == 0x001850, "Member 'AUltra_Dynamic_Sky_C::Solar_Eclipse' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Solar_Eclipse_Tint_Color) == 0x001854, "Member 'AUltra_Dynamic_Sky_C::Solar_Eclipse_Tint_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Solar_Eclipse_Intensity_Multiplier) == 0x001868, "Member 'AUltra_Dynamic_Sky_C::Solar_Eclipse_Intensity_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fade_Down_High_Sun_Light_Intensity_Below_Horizon) == 0x001870, "Member 'AUltra_Dynamic_Sky_C::Fade_Down_High_Sun_Light_Intensity_Below_Horizon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, UDS_Version) == 0x001878, "Member 'AUltra_Dynamic_Sky_C::UDS_Version' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, UDS_Version_Info) == 0x001888, "Member 'AUltra_Dynamic_Sky_C::UDS_Version_Info' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Clouds_B_Time) == 0x001890, "Member 'AUltra_Dynamic_Sky_C::Clouds_B_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Atmosphere_Overcast_Luminance) == 0x001898, "Member 'AUltra_Dynamic_Sky_C::Sky_Atmosphere_Overcast_Luminance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Old_Moon_Target) == 0x0018A0, "Member 'AUltra_Dynamic_Sky_C::Old_Moon_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Old_Sun_Target) == 0x0018B8, "Member 'AUltra_Dynamic_Sky_C::Old_Sun_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Targets_Change_Speed) == 0x0018D0, "Member 'AUltra_Dynamic_Sky_C::Targets_Change_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cache_Timer_Length) == 0x0018D8, "Member 'AUltra_Dynamic_Sky_C::Cache_Timer_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cache_Current_Timer) == 0x0018E0, "Member 'AUltra_Dynamic_Sky_C::Cache_Current_Timer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Initialized) == 0x0018E8, "Member 'AUltra_Dynamic_Sky_C::Initialized' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Preset) == 0x0018F0, "Member 'AUltra_Dynamic_Sky_C::Moon_Preset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moons) == 0x0018F8, "Member 'AUltra_Dynamic_Sky_C::Moons' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Space_Layer_Brightness__Night_) == 0x001908, "Member 'AUltra_Dynamic_Sky_C::Space_Layer_Brightness__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Space_Layer_Brightness__Day_) == 0x001910, "Member 'AUltra_Dynamic_Sky_C::Space_Layer_Brightness__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Space_Glow_Brightness) == 0x001918, "Member 'AUltra_Dynamic_Sky_C::Space_Glow_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, UDS_Space_Parent_Material) == 0x001920, "Member 'AUltra_Dynamic_Sky_C::UDS_Space_Parent_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Space_Planet_MIDs) == 0x001950, "Member 'AUltra_Dynamic_Sky_C::Space_Planet_MIDs' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Space_Scene_Components) == 0x001960, "Member 'AUltra_Dynamic_Sky_C::Space_Scene_Components' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Space_Glow_MIDs) == 0x001970, "Member 'AUltra_Dynamic_Sky_C::Space_Glow_MIDs' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Space_Planet_Components) == 0x0019C0, "Member 'AUltra_Dynamic_Sky_C::Space_Planet_Components' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Space_Layer_Active) == 0x0019D0, "Member 'AUltra_Dynamic_Sky_C::Space_Layer_Active' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, UDS_Space_Sim_Stars_Parent_Material) == 0x0019D8, "Member 'AUltra_Dynamic_Sky_C::UDS_Space_Sim_Stars_Parent_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Solar_Eclipse_Tint) == 0x001A08, "Member 'AUltra_Dynamic_Sky_C::Cached_Solar_Eclipse_Tint' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Sun_Radius) == 0x001A18, "Member 'AUltra_Dynamic_Sky_C::Cached_Sun_Radius' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Eclipse_Percent) == 0x001A20, "Member 'AUltra_Dynamic_Sky_C::Cached_Eclipse_Percent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Moon_Cutout) == 0x001A28, "Member 'AUltra_Dynamic_Sky_C::Cached_Moon_Cutout' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Moon_Scale) == 0x001A30, "Member 'AUltra_Dynamic_Sky_C::Cached_Moon_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Last_Construction_Script_Time) == 0x001A38, "Member 'AUltra_Dynamic_Sky_C::Last_Construction_Script_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Create_New_MIDs) == 0x001A40, "Member 'AUltra_Dynamic_Sky_C::Create_New_MIDs' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Minus_Lighting_Channel_0) == 0x001A41, "Member 'AUltra_Dynamic_Sky_C::Sun_Minus_Lighting_Channel_0' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Minus_Lighting_Channel_1) == 0x001A42, "Member 'AUltra_Dynamic_Sky_C::Sun_Minus_Lighting_Channel_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Minus_Lighting_Channel_2) == 0x001A43, "Member 'AUltra_Dynamic_Sky_C::Sun_Minus_Lighting_Channel_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Low_Moon_Light_Color_Tint) == 0x001A44, "Member 'AUltra_Dynamic_Sky_C::Low_Moon_Light_Color_Tint' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Minus_Lighting_Channel_0) == 0x001A54, "Member 'AUltra_Dynamic_Sky_C::Moon_Minus_Lighting_Channel_0' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Minus_Lighting_Channel_1) == 0x001A55, "Member 'AUltra_Dynamic_Sky_C::Moon_Minus_Lighting_Channel_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Minus_Lighting_Channel_2) == 0x001A56, "Member 'AUltra_Dynamic_Sky_C::Moon_Minus_Lighting_Channel_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Show_Trace_Debugs) == 0x001A57, "Member 'AUltra_Dynamic_Sky_C::Show_Trace_Debugs' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Space_Roots) == 0x001A58, "Member 'AUltra_Dynamic_Sky_C::Space_Roots' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Render_Water_Caustics) == 0x001A68, "Member 'AUltra_Dynamic_Sky_C::Render_Water_Caustics' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Water_Level) == 0x001A70, "Member 'AUltra_Dynamic_Sky_C::Water_Level' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Caustics_Intensity) == 0x001A78, "Member 'AUltra_Dynamic_Sky_C::Caustics_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Caustics_Falloff) == 0x001A80, "Member 'AUltra_Dynamic_Sky_C::Caustics_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Deep_Water_Falloff) == 0x001A88, "Member 'AUltra_Dynamic_Sky_C::Deep_Water_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Caustics_Texture_Scale) == 0x001A90, "Member 'AUltra_Dynamic_Sky_C::Caustics_Texture_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moons_Cloud_Mask) == 0x001A98, "Member 'AUltra_Dynamic_Sky_C::Moons_Cloud_Mask' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Blur_Caustics_with_Depth) == 0x001AA0, "Member 'AUltra_Dynamic_Sky_C::Blur_Caustics_with_Depth' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Blur_Caustics_in_Cloud_Shadow) == 0x001AA8, "Member 'AUltra_Dynamic_Sky_C::Blur_Caustics_in_Cloud_Shadow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Blur_Caustics_with_Camera_Distance) == 0x001AB0, "Member 'AUltra_Dynamic_Sky_C::Blur_Caustics_with_Camera_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunset_Event_State) == 0x001AB8, "Member 'AUltra_Dynamic_Sky_C::Sunset_Event_State' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Cloudiness_Above_Cloud_Layer) == 0x001ABC, "Member 'AUltra_Dynamic_Sky_C::Fog_Cloudiness_Above_Cloud_Layer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Editor_Camera_Normalized_Height_in_Layer) == 0x001AC0, "Member 'AUltra_Dynamic_Sky_C::Editor_Camera_Normalized_Height_in_Layer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Camera_Cloud_Layer_Normalized_Height) == 0x001AC8, "Member 'AUltra_Dynamic_Sky_C::Camera_Cloud_Layer_Normalized_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Camera_Sky_Atmosphere_Normalized_Density) == 0x001AD0, "Member 'AUltra_Dynamic_Sky_C::Camera_Sky_Atmosphere_Normalized_Density' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Fog_Base_Color) == 0x001AD8, "Member 'AUltra_Dynamic_Sky_C::Moon_Fog_Base_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Fog_Base_Color) == 0x001AE8, "Member 'AUltra_Dynamic_Sky_C::Sun_Fog_Base_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Sky_Atmosphere_Luminance) == 0x001AF8, "Member 'AUltra_Dynamic_Sky_C::Cached_Sky_Atmosphere_Luminance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Old_Cloud_Layer_Camera_Level) == 0x001B08, "Member 'AUltra_Dynamic_Sky_C::Old_Cloud_Layer_Camera_Level' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Camera_Relative_Change_Speed) == 0x001B10, "Member 'AUltra_Dynamic_Sky_C::Cloud_Camera_Relative_Change_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Sky_Atmosphere_Absorption_Color) == 0x001B18, "Member 'AUltra_Dynamic_Sky_C::Cached_Sky_Atmosphere_Absorption_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Coverage_Target_Resolution) == 0x001B28, "Member 'AUltra_Dynamic_Sky_C::Cloud_Coverage_Target_Resolution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Coverage_Render_Target) == 0x001B30, "Member 'AUltra_Dynamic_Sky_C::Cloud_Coverage_Render_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Coverage_Target_Size) == 0x001B38, "Member 'AUltra_Dynamic_Sky_C::Cloud_Coverage_Target_Size' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Painted_Cloud_Coverage_Opacity) == 0x001B40, "Member 'AUltra_Dynamic_Sky_C::Painted_Cloud_Coverage_Opacity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_2_Painted_Cloud_Coverage_Opacity) == 0x001B48, "Member 'AUltra_Dynamic_Sky_C::Layer_2_Painted_Cloud_Coverage_Opacity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Painted_Coverage_Affects_Global_Values) == 0x001B50, "Member 'AUltra_Dynamic_Sky_C::Painted_Coverage_Affects_Global_Values' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Editor_Cloud_Coverage_Target_Location) == 0x001B58, "Member 'AUltra_Dynamic_Sky_C::Editor_Cloud_Coverage_Target_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Local_Painting_Cell_Data) == 0x001B68, "Member 'AUltra_Dynamic_Sky_C::Local_Painting_Cell_Data' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Local_Painted_Cell_Size) == 0x001BB8, "Member 'AUltra_Dynamic_Sky_C::Local_Painted_Cell_Size' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Painting_Active) == 0x001BBC, "Member 'AUltra_Dynamic_Sky_C::Cloud_Painting_Active' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Coverage_Target_Location) == 0x001BC0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Coverage_Target_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Current_Cloud_Coverage_Render_Target_Mapping) == 0x001BD0, "Member 'AUltra_Dynamic_Sky_C::Current_Cloud_Coverage_Render_Target_Mapping' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Coverage_Target_in_Use) == 0x001BE0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Coverage_Target_in_Use' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Async_Loading_Queue) == 0x001BE8, "Member 'AUltra_Dynamic_Sky_C::Async_Loading_Queue' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Async_Loaded_Objects) == 0x001BF8, "Member 'AUltra_Dynamic_Sky_C::Async_Loaded_Objects' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Async_Loading_Active) == 0x001C08, "Member 'AUltra_Dynamic_Sky_C::Async_Loading_Active' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Coverage_After_Painting) == 0x001C10, "Member 'AUltra_Dynamic_Sky_C::Cloud_Coverage_After_Painting' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Paint_Can_Add_Coverage) == 0x001C18, "Member 'AUltra_Dynamic_Sky_C::Cloud_Paint_Can_Add_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Paint_Can_Subtract_Coverage) == 0x001C19, "Member 'AUltra_Dynamic_Sky_C::Cloud_Paint_Can_Subtract_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Enable_Volumetric_Cloud_Light_Rays) == 0x001C1A, "Member 'AUltra_Dynamic_Sky_C::Enable_Volumetric_Cloud_Light_Rays' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Light_Ray_Intensity) == 0x001C20, "Member 'AUltra_Dynamic_Sky_C::Light_Ray_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Light_Ray_Tint_Color) == 0x001C28, "Member 'AUltra_Dynamic_Sky_C::Light_Ray_Tint_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Light_Rays_Point_Spacing) == 0x001C38, "Member 'AUltra_Dynamic_Sky_C::Light_Rays_Point_Spacing' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Light_Ray_Length) == 0x001C40, "Member 'AUltra_Dynamic_Sky_C::Light_Ray_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Individual_Clouds_Light_Rays) == 0x001C48, "Member 'AUltra_Dynamic_Sky_C::Individual_Clouds_Light_Rays' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_Light_Ray_Width) == 0x001C50, "Member 'AUltra_Dynamic_Sky_C::Scale_Light_Ray_Width' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Light_Rays_Max_Distance__Km_) == 0x001C58, "Member 'AUltra_Dynamic_Sky_C::Light_Rays_Max_Distance__Km_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Light_Rays_Depth_Fade_Distance) == 0x001C60, "Member 'AUltra_Dynamic_Sky_C::Light_Rays_Depth_Fade_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Light_Rays_3D_Noise_Scale) == 0x001C68, "Member 'AUltra_Dynamic_Sky_C::Light_Rays_3D_Noise_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Light_Rays_Niagara_System) == 0x001C70, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Light_Rays_Niagara_System' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Max_Light_Ray_Length) == 0x001CA0, "Member 'AUltra_Dynamic_Sky_C::Max_Light_Ray_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Top_World_Height) == 0x001CA8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Top_World_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Light_Ray_Vector) == 0x001CB0, "Member 'AUltra_Dynamic_Sky_C::Cached_Light_Ray_Vector' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Light_Rays_Using_Sun) == 0x001CC8, "Member 'AUltra_Dynamic_Sky_C::Light_Rays_Using_Sun' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cached_Light_Ray_Strength) == 0x001CD0, "Member 'AUltra_Dynamic_Sky_C::Cached_Light_Ray_Strength' has a wrong offset!");

}

