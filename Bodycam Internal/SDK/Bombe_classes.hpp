#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Bombe

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "E_Team_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Bombe.Bombe_C
// 0x0090 (0x0320 - 0x0290)
class ABombe_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetComponent*                       WidgetFocus;                                       // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Timer;                                             // 0x02C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DefuseCurrent;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BombeActive;                                       // 0x02D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DefuseDelay;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AALS_AnimMan_CharacterBP_C*             PlayerAttached;                                    // 0x02E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ATaserCable_C*                          Cable;                                             // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CanStick;                                          // 0x02F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Animation_Speed;                               // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FuseDelay;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Explode;                                           // 0x0308(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGT_Bodycam_C*                          GT;                                                // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Bomb_Have_Been_Active;                             // 0x0318(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BreakDefuse();
	void Calc_FuseTime();
	void CanInterract(bool* Interract_);
	void CanPickup(class AALS_AnimMan_CharacterBP_C* Player, bool* Pickup_);
	void CanSwap_(bool* IsItemSwap_);
	void Defuse_0();
	void DefuseSoundWarning__Multicast_();
	void Drop(double Delay);
	void Drop__Server_();
	void ExecuteUbergraph_Bombe(int32 EntryPoint);
	void Explode__mutlicast_();
	void Explode__Server_();
	void FusingEffect__Multicast_();
	void Get_attach_Taser_Point(class FName* Attach_Point1, class FName* Attach_Point2);
	void GetItemPriority(int32* Priority);
	void GetOffset(struct FTransform* Offset);
	void GetOverlay(EALS_OverlayState* Overlay);
	void GetSocketToAttach(class FName* SocketToAttach);
	void Defuse(float PlayRate);
	void Interract(class APawn* Owner_0);
	void InterractDoor(double Z_Angle, bool ResetDoor);
	void Is_Stickable_(bool* Stickable_);
	void IsDefaultHandle(bool* IsDefaultHandle_);
	void Item_Focus();
	void Left_Click_Release__Client_();
	void Left_Client_event__Client_();
	void LeftClickEvent();
	void LeftClickReleaseEvent();
	void Loop_Im_Here();
	void OnRep_BombeActive();
	void Pickup(class AALS_AnimMan_CharacterBP_C* Owner_0);
	void Pickup__Server_(class AALS_AnimMan_CharacterBP_C* PlayerAttached_0);
	void ReceiveBeginPlay();
	void ReceivePointDamage(float Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveTick(float DeltaSeconds);
	void Set_Simulate_Physics__Multicast_(bool bSimulate);
	void Start_Fuse();
	void SwitchAnimation(class UAnimMontage** In, class UAnimMontage** Out, class USoundCue** InSound, class USoundCue** OutSound);
	void Throw__Multicast_(const struct FVector& InVector);
	void Throw__Server_(const struct FVector& InVector);
	void TryDefuse(class ATaserCable_C* Cable_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Bombe_C">();
	}
	static class ABombe_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABombe_C>();
	}
};
static_assert(alignof(ABombe_C) == 0x000008, "Wrong alignment on ABombe_C");
static_assert(sizeof(ABombe_C) == 0x000320, "Wrong size on ABombe_C");
static_assert(offsetof(ABombe_C, UberGraphFrame) == 0x000290, "Member 'ABombe_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABombe_C, WidgetFocus) == 0x000298, "Member 'ABombe_C::WidgetFocus' has a wrong offset!");
static_assert(offsetof(ABombe_C, Arrow) == 0x0002A0, "Member 'ABombe_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABombe_C, StaticMesh) == 0x0002A8, "Member 'ABombe_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABombe_C, TextRender) == 0x0002B0, "Member 'ABombe_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABombe_C, PointLight) == 0x0002B8, "Member 'ABombe_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABombe_C, Timer) == 0x0002C0, "Member 'ABombe_C::Timer' has a wrong offset!");
static_assert(offsetof(ABombe_C, DefuseCurrent) == 0x0002C8, "Member 'ABombe_C::DefuseCurrent' has a wrong offset!");
static_assert(offsetof(ABombe_C, BombeActive) == 0x0002D0, "Member 'ABombe_C::BombeActive' has a wrong offset!");
static_assert(offsetof(ABombe_C, DefuseDelay) == 0x0002D8, "Member 'ABombe_C::DefuseDelay' has a wrong offset!");
static_assert(offsetof(ABombe_C, PlayerAttached) == 0x0002E0, "Member 'ABombe_C::PlayerAttached' has a wrong offset!");
static_assert(offsetof(ABombe_C, Cable) == 0x0002E8, "Member 'ABombe_C::Cable' has a wrong offset!");
static_assert(offsetof(ABombe_C, CanStick) == 0x0002F0, "Member 'ABombe_C::CanStick' has a wrong offset!");
static_assert(offsetof(ABombe_C, Max_Animation_Speed) == 0x0002F8, "Member 'ABombe_C::Max_Animation_Speed' has a wrong offset!");
static_assert(offsetof(ABombe_C, FuseDelay) == 0x000300, "Member 'ABombe_C::FuseDelay' has a wrong offset!");
static_assert(offsetof(ABombe_C, Explode) == 0x000308, "Member 'ABombe_C::Explode' has a wrong offset!");
static_assert(offsetof(ABombe_C, GT) == 0x000310, "Member 'ABombe_C::GT' has a wrong offset!");
static_assert(offsetof(ABombe_C, Bomb_Have_Been_Active) == 0x000318, "Member 'ABombe_C::Bomb_Have_Been_Active' has a wrong offset!");

}

