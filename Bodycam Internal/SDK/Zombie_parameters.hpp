#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Zombie

#include "Basic.hpp"

#include "E_Team_structs.hpp"
#include "STR_TEST_structs.hpp"
#include "STR_PCInfo_structs.hpp"
#include "Engine_structs.hpp"
#include "STR_Actor_structs.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "STR_GamemodeWinInfo_structs.hpp"
#include "STR_KickVote_structs.hpp"
#include "AIModule_structs.hpp"
#include "ALS_MovementState_structs.hpp"
#include "ALS_MovementAction_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "ALS_RotationMode_structs.hpp"
#include "STR_ZombieSkin_structs.hpp"
#include "ALS_Stance_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "STR_Score_structs.hpp"
#include "GameMode_structs.hpp"


namespace SDK::Params
{

// Function Zombie.Zombie_C.ApplyPointDamage
// 0x0058 (0x0058 - 0x0000)
struct Zombie_C_ApplyPointDamage final
{
public:
	double                                        Damage;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RagdollForce;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShotFromDirection;                                 // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      KillerPC;                                          // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableHeadShot;                                   // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_ApplyPointDamage) == 0x000008, "Wrong alignment on Zombie_C_ApplyPointDamage");
static_assert(sizeof(Zombie_C_ApplyPointDamage) == 0x000058, "Wrong size on Zombie_C_ApplyPointDamage");
static_assert(offsetof(Zombie_C_ApplyPointDamage, Damage) == 0x000000, "Member 'Zombie_C_ApplyPointDamage::Damage' has a wrong offset!");
static_assert(offsetof(Zombie_C_ApplyPointDamage, RagdollForce) == 0x000008, "Member 'Zombie_C_ApplyPointDamage::RagdollForce' has a wrong offset!");
static_assert(offsetof(Zombie_C_ApplyPointDamage, BoneName) == 0x000010, "Member 'Zombie_C_ApplyPointDamage::BoneName' has a wrong offset!");
static_assert(offsetof(Zombie_C_ApplyPointDamage, Location) == 0x000018, "Member 'Zombie_C_ApplyPointDamage::Location' has a wrong offset!");
static_assert(offsetof(Zombie_C_ApplyPointDamage, ShotFromDirection) == 0x000030, "Member 'Zombie_C_ApplyPointDamage::ShotFromDirection' has a wrong offset!");
static_assert(offsetof(Zombie_C_ApplyPointDamage, KillerPC) == 0x000048, "Member 'Zombie_C_ApplyPointDamage::KillerPC' has a wrong offset!");
static_assert(offsetof(Zombie_C_ApplyPointDamage, DisableHeadShot) == 0x000050, "Member 'Zombie_C_ApplyPointDamage::DisableHeadShot' has a wrong offset!");

// Function Zombie.Zombie_C.BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit_0;                                             // 0x0030(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x000118, "Wrong size on Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, Hit_0) == 0x000030, "Member 'Zombie_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::Hit_0' has a wrong offset!");

// Function Zombie.Zombie_C.BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Zombie_C_BndEvt__Zombie_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function Zombie.Zombie_C.BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Zombie_C_BndEvt__Zombie_BoxSound_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function Zombie.Zombie_C.BoneDamage
// 0x0038 (0x0038 - 0x0000)
struct Zombie_C_BoneDamage final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Damage;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DamageFinal;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_BoneDamage) == 0x000008, "Wrong alignment on Zombie_C_BoneDamage");
static_assert(sizeof(Zombie_C_BoneDamage) == 0x000038, "Wrong size on Zombie_C_BoneDamage");
static_assert(offsetof(Zombie_C_BoneDamage, bone) == 0x000000, "Member 'Zombie_C_BoneDamage::bone' has a wrong offset!");
static_assert(offsetof(Zombie_C_BoneDamage, Damage) == 0x000008, "Member 'Zombie_C_BoneDamage::Damage' has a wrong offset!");
static_assert(offsetof(Zombie_C_BoneDamage, DamageFinal) == 0x000010, "Member 'Zombie_C_BoneDamage::DamageFinal' has a wrong offset!");
static_assert(offsetof(Zombie_C_BoneDamage, K2Node_SwitchName_CmpSuccess) == 0x000018, "Member 'Zombie_C_BoneDamage::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Zombie_C_BoneDamage, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'Zombie_C_BoneDamage::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_BoneDamage, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'Zombie_C_BoneDamage::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_BoneDamage, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000030, "Member 'Zombie_C_BoneDamage::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");

// Function Zombie.Zombie_C.BPI_Get_CurrentStates
// 0x000A (0x000A - 0x0000)
struct Zombie_C_BPI_Get_CurrentStates final
{
public:
	EMovementMode                                 PawnMovementMode;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            MovementState;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            PrevMovementState;                                 // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           MovementAction;                                    // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             RotationMode;                                      // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     ActualGait;                                        // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   ActualStance;                                      // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 ViewMode;                                          // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             OverlayState;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             OverlayState__Client_;                             // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_BPI_Get_CurrentStates) == 0x000001, "Wrong alignment on Zombie_C_BPI_Get_CurrentStates");
static_assert(sizeof(Zombie_C_BPI_Get_CurrentStates) == 0x00000A, "Wrong size on Zombie_C_BPI_Get_CurrentStates");
static_assert(offsetof(Zombie_C_BPI_Get_CurrentStates, PawnMovementMode) == 0x000000, "Member 'Zombie_C_BPI_Get_CurrentStates::PawnMovementMode' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_CurrentStates, MovementState) == 0x000001, "Member 'Zombie_C_BPI_Get_CurrentStates::MovementState' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_CurrentStates, PrevMovementState) == 0x000002, "Member 'Zombie_C_BPI_Get_CurrentStates::PrevMovementState' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_CurrentStates, MovementAction) == 0x000003, "Member 'Zombie_C_BPI_Get_CurrentStates::MovementAction' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_CurrentStates, RotationMode) == 0x000004, "Member 'Zombie_C_BPI_Get_CurrentStates::RotationMode' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_CurrentStates, ActualGait) == 0x000005, "Member 'Zombie_C_BPI_Get_CurrentStates::ActualGait' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_CurrentStates, ActualStance) == 0x000006, "Member 'Zombie_C_BPI_Get_CurrentStates::ActualStance' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_CurrentStates, ViewMode) == 0x000007, "Member 'Zombie_C_BPI_Get_CurrentStates::ViewMode' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_CurrentStates, OverlayState) == 0x000008, "Member 'Zombie_C_BPI_Get_CurrentStates::OverlayState' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_CurrentStates, OverlayState__Client_) == 0x000009, "Member 'Zombie_C_BPI_Get_CurrentStates::OverlayState__Client_' has a wrong offset!");

// Function Zombie.Zombie_C.BPI_Get_EssentialValues
// 0x0080 (0x0080 - 0x0000)
struct Zombie_C_BPI_Get_EssentialValues final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Acceleration;                                      // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MovementInput;                                     // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMovementInput;                                  // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Speed;                                             // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovementInputAmount;                               // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AimingRotation;                                    // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        AimYawRate;                                        // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_BPI_Get_EssentialValues) == 0x000008, "Wrong alignment on Zombie_C_BPI_Get_EssentialValues");
static_assert(sizeof(Zombie_C_BPI_Get_EssentialValues) == 0x000080, "Wrong size on Zombie_C_BPI_Get_EssentialValues");
static_assert(offsetof(Zombie_C_BPI_Get_EssentialValues, Velocity) == 0x000000, "Member 'Zombie_C_BPI_Get_EssentialValues::Velocity' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_EssentialValues, Acceleration) == 0x000018, "Member 'Zombie_C_BPI_Get_EssentialValues::Acceleration' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_EssentialValues, MovementInput) == 0x000030, "Member 'Zombie_C_BPI_Get_EssentialValues::MovementInput' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_EssentialValues, IsMoving) == 0x000048, "Member 'Zombie_C_BPI_Get_EssentialValues::IsMoving' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_EssentialValues, HasMovementInput) == 0x000049, "Member 'Zombie_C_BPI_Get_EssentialValues::HasMovementInput' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_EssentialValues, Speed) == 0x000050, "Member 'Zombie_C_BPI_Get_EssentialValues::Speed' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_EssentialValues, MovementInputAmount) == 0x000058, "Member 'Zombie_C_BPI_Get_EssentialValues::MovementInputAmount' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_EssentialValues, AimingRotation) == 0x000060, "Member 'Zombie_C_BPI_Get_EssentialValues::AimingRotation' has a wrong offset!");
static_assert(offsetof(Zombie_C_BPI_Get_EssentialValues, AimYawRate) == 0x000078, "Member 'Zombie_C_BPI_Get_EssentialValues::AimYawRate' has a wrong offset!");

// Function Zombie.Zombie_C.BPI_Set_Gait
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_BPI_Set_Gait final
{
public:
	EALS_Gait                                     NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_BPI_Set_Gait) == 0x000001, "Wrong alignment on Zombie_C_BPI_Set_Gait");
static_assert(sizeof(Zombie_C_BPI_Set_Gait) == 0x000001, "Wrong size on Zombie_C_BPI_Set_Gait");
static_assert(offsetof(Zombie_C_BPI_Set_Gait, NewGait) == 0x000000, "Member 'Zombie_C_BPI_Set_Gait::NewGait' has a wrong offset!");

// Function Zombie.Zombie_C.BPI_Set_MovementAction
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_BPI_Set_MovementAction final
{
public:
	EALS_MovementAction                           NewMovementAction;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_BPI_Set_MovementAction) == 0x000001, "Wrong alignment on Zombie_C_BPI_Set_MovementAction");
static_assert(sizeof(Zombie_C_BPI_Set_MovementAction) == 0x000001, "Wrong size on Zombie_C_BPI_Set_MovementAction");
static_assert(offsetof(Zombie_C_BPI_Set_MovementAction, NewMovementAction) == 0x000000, "Member 'Zombie_C_BPI_Set_MovementAction::NewMovementAction' has a wrong offset!");

// Function Zombie.Zombie_C.BPI_Set_MovementState
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_BPI_Set_MovementState final
{
public:
	EALS_MovementState                            NewMovementState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_BPI_Set_MovementState) == 0x000001, "Wrong alignment on Zombie_C_BPI_Set_MovementState");
static_assert(sizeof(Zombie_C_BPI_Set_MovementState) == 0x000001, "Wrong size on Zombie_C_BPI_Set_MovementState");
static_assert(offsetof(Zombie_C_BPI_Set_MovementState, NewMovementState) == 0x000000, "Member 'Zombie_C_BPI_Set_MovementState::NewMovementState' has a wrong offset!");

// Function Zombie.Zombie_C.BPI_Set_OverlayState
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_BPI_Set_OverlayState final
{
public:
	EALS_OverlayState                             NewOverlayState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_BPI_Set_OverlayState) == 0x000001, "Wrong alignment on Zombie_C_BPI_Set_OverlayState");
static_assert(sizeof(Zombie_C_BPI_Set_OverlayState) == 0x000001, "Wrong size on Zombie_C_BPI_Set_OverlayState");
static_assert(offsetof(Zombie_C_BPI_Set_OverlayState, NewOverlayState) == 0x000000, "Member 'Zombie_C_BPI_Set_OverlayState::NewOverlayState' has a wrong offset!");

// Function Zombie.Zombie_C.BPI_Set_RotationMode
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_BPI_Set_RotationMode final
{
public:
	EALS_RotationMode                             NewRotationMode;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_BPI_Set_RotationMode) == 0x000001, "Wrong alignment on Zombie_C_BPI_Set_RotationMode");
static_assert(sizeof(Zombie_C_BPI_Set_RotationMode) == 0x000001, "Wrong size on Zombie_C_BPI_Set_RotationMode");
static_assert(offsetof(Zombie_C_BPI_Set_RotationMode, NewRotationMode) == 0x000000, "Member 'Zombie_C_BPI_Set_RotationMode::NewRotationMode' has a wrong offset!");

// Function Zombie.Zombie_C.BPI_Set_ViewMode
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_BPI_Set_ViewMode final
{
public:
	EALS_ViewMode                                 NewViewMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_BPI_Set_ViewMode) == 0x000001, "Wrong alignment on Zombie_C_BPI_Set_ViewMode");
static_assert(sizeof(Zombie_C_BPI_Set_ViewMode) == 0x000001, "Wrong size on Zombie_C_BPI_Set_ViewMode");
static_assert(offsetof(Zombie_C_BPI_Set_ViewMode, NewViewMode) == 0x000000, "Member 'Zombie_C_BPI_Set_ViewMode::NewViewMode' has a wrong offset!");

// Function Zombie.Zombie_C.CanCreateKickVote
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_CanCreateKickVote final
{
public:
	bool                                          CanCreateKickVote_;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_CanCreateKickVote) == 0x000001, "Wrong alignment on Zombie_C_CanCreateKickVote");
static_assert(sizeof(Zombie_C_CanCreateKickVote) == 0x000001, "Wrong size on Zombie_C_CanCreateKickVote");
static_assert(offsetof(Zombie_C_CanCreateKickVote, CanCreateKickVote_) == 0x000000, "Member 'Zombie_C_CanCreateKickVote::CanCreateKickVote_' has a wrong offset!");

// Function Zombie.Zombie_C.CanKickThisPlayer?
// 0x0018 (0x0018 - 0x0000)
struct Zombie_C_CanKickThisPlayer_ final
{
public:
	class FString                                 PlayerID;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          True_;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_CanKickThisPlayer_) == 0x000008, "Wrong alignment on Zombie_C_CanKickThisPlayer_");
static_assert(sizeof(Zombie_C_CanKickThisPlayer_) == 0x000018, "Wrong size on Zombie_C_CanKickThisPlayer_");
static_assert(offsetof(Zombie_C_CanKickThisPlayer_, PlayerID) == 0x000000, "Member 'Zombie_C_CanKickThisPlayer_::PlayerID' has a wrong offset!");
static_assert(offsetof(Zombie_C_CanKickThisPlayer_, True_) == 0x000010, "Member 'Zombie_C_CanKickThisPlayer_::True_' has a wrong offset!");

// Function Zombie.Zombie_C.CanReachDestination
// 0x0080 (0x0080 - 0x0000)
struct Zombie_C_CanReachDestination final
{
public:
	struct FVector                                PathStart;                                         // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PathEnd;                                           // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PathLenght;                                        // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNavigationPath*                        CallFunc_FindPathToLocationSynchronously_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPathLength_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_CanReachDestination) == 0x000008, "Wrong alignment on Zombie_C_CanReachDestination");
static_assert(sizeof(Zombie_C_CanReachDestination) == 0x000080, "Wrong size on Zombie_C_CanReachDestination");
static_assert(offsetof(Zombie_C_CanReachDestination, PathStart) == 0x000000, "Member 'Zombie_C_CanReachDestination::PathStart' has a wrong offset!");
static_assert(offsetof(Zombie_C_CanReachDestination, PathEnd) == 0x000018, "Member 'Zombie_C_CanReachDestination::PathEnd' has a wrong offset!");
static_assert(offsetof(Zombie_C_CanReachDestination, ReturnValue) == 0x000030, "Member 'Zombie_C_CanReachDestination::ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_CanReachDestination, PathLenght) == 0x000038, "Member 'Zombie_C_CanReachDestination::PathLenght' has a wrong offset!");
static_assert(offsetof(Zombie_C_CanReachDestination, CallFunc_FindPathToLocationSynchronously_ReturnValue) == 0x000040, "Member 'Zombie_C_CanReachDestination::CallFunc_FindPathToLocationSynchronously_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_CanReachDestination, CallFunc_GetPathLength_ReturnValue) == 0x000048, "Member 'Zombie_C_CanReachDestination::CallFunc_GetPathLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_CanReachDestination, CallFunc_Array_LastIndex_ReturnValue) == 0x000050, "Member 'Zombie_C_CanReachDestination::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_CanReachDestination, CallFunc_Array_Get_Item) == 0x000058, "Member 'Zombie_C_CanReachDestination::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Zombie_C_CanReachDestination, CallFunc_Vector_Distance_ReturnValue) == 0x000070, "Member 'Zombie_C_CanReachDestination::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_CanReachDestination, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000078, "Member 'Zombie_C_CanReachDestination::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");

// Function Zombie.Zombie_C.ExecuteUbergraph_Zombie
// 0x1390 (0x1390 - 0x0000)
struct Zombie_C_ExecuteUbergraph_Zombie final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName_4;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_3;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_1;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_2;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_2;            // 0x0040(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_1;                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_3;            // 0x0058(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_4;            // 0x0070(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Temp_object_Variable;                              // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Temp_object_Variable_1;                            // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Temp_object_Variable_2;                            // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Temp_object_Variable_3;                            // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Temp_object_Variable_4;                            // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x00B8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x00D0(0x0008)(NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_5;                            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_6;                            // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_7;                            // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_8;                            // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName_9;                   // 0x0104(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x010E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x010F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_6;            // 0x0110(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_String;                               // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Delay;                                // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_TimeCount;                            // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_NewParam;                             // 0x0140(0x0018)()
	E_Team                                        K2Node_Event_Team;                                 // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_Selected_Level_Name;                  // 0x015C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Index;                                // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Team                                        K2Node_Event_Team_PlayerKilled_;                   // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_MilitaryIndex;                        // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_TerroristIndex;                       // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Team                                        K2Node_Event_WiiningTeam;                          // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_Score                             K2Node_Event_Score;                                // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Win_;                                 // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Slomo;                                // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTR_KickVote                          K2Node_Event_PlayerInfo;                           // 0x0190(0x0048)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_SteamID;                              // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTR_PCInfo                            K2Node_Event_Target_2;                             // 0x01E8(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Yes_;                                 // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_PCInfo                            K2Node_Event_Target_1;                             // 0x0230(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTR_PCInfo                            K2Node_Event_Target;                               // 0x0270(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	EGameMode                                     K2Node_Event_Gamemode;                             // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsReady_;                             // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsTalking;                            // 0x02B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B3[0x5];                                      // 0x02B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_Event_PC;                                   // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            K2Node_Event_NewMovementState;                     // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           K2Node_Event_NewMovementAction;                    // 0x02C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             K2Node_Event_NewRotationMode;                      // 0x02C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     K2Node_Event_NewGait;                              // 0x02C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 K2Node_Event_NewViewMode;                          // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             K2Node_Event_NewOverlayState;                      // 0x02C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C6[0x2];                                      // 0x02C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Damage;                               // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_RagdollForce;                         // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_BoneName;                             // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Location;                             // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_ShotFromDirection;                    // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_Event_KillerPC;                             // 0x0310(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_DisableHeadShot;                      // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Xp_C>             K2Node_DynamicCast_AsBPI_Xp;                       // 0x0320(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0338(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0340(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BoneDamage_DamageFinal;                   // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0370(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0388(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0390(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x3];                                      // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          Temp_byte_Variable;                                // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIAsyncTaskBlueprintProxy*             CallFunc_CreateMoveToProxyObject_ReturnValue;      // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x03C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C2[0x6];                                      // 0x03C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x03C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_DestLocation;                   // 0x03D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Actor;                          // 0x03E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGM_Zombie_C*                           K2Node_DynamicCast_AsGM_Zombie;                    // 0x03F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0400(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_419[0x3];                                      // 0x0419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector3f_X;                          // 0x041C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector3f_Y;                          // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector3f_Z;                          // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x0428(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0430(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0450(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0468(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0480(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0498(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x04B0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0598(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x0599(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x059A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59B[0x1];                                      // 0x059B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable_1;                              // 0x059C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x05A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x05A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A6[0x2];                                      // 0x05A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue_1;                // 0x05A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGM_Zombie_C*                           K2Node_DynamicCast_AsGM_Zombie_1;                  // 0x05B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x05B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B9[0x3];                                      // 0x05B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DamageReceived;                       // 0x05BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageType*                      K2Node_Event_DamageType;                           // 0x05C0(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Origin;                               // 0x05C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_HitInfo;                              // 0x05E0(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AController*                            K2Node_Event_InstigatedBy;                         // 0x06C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x06D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x06D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x06D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DA[0x2];                                      // 0x06DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x06DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x06E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E4[0x4];                                      // 0x06E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x06E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0700(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0718(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0730(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0748(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0750(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0758(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0760(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0768(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0770(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0774(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0778(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77C[0x4];                                      // 0x077C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0780(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0798(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x07B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x07B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x07D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FL_Vector_Multiply_Float_ReturnValue;     // 0x07F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0808(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0810(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0818(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0820(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0828(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0840(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0858(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_5;                   // 0x0860(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AZombie_C*>                      CallFunc_GetAllActorsOfClass_OutActors;            // 0x0868(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsDead_Dead_;                             // 0x0878(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0879(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_87A[0x6];                                      // 0x087A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_interact_C>       K2Node_DynamicCast_AsBPI_Interact;                 // 0x0880(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0890(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult;                 // 0x0891(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_892[0x6];                                      // 0x0892(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1; // 0x0898(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x08A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A1[0xF];                                      // 0x08A1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x08B0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0910(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0928(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0940(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_7;            // 0x0958(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBodycam_Interface_C>  K2Node_DynamicCast_AsBodycam_Interface;            // 0x0968(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0978(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_Dead__1;                           // 0x0979(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_97A[0x2];                                      // 0x097A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_8;            // 0x097C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_6;                   // 0x098C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_994[0x4];                                      // 0x0994(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0998(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x09B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x09B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x09D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x09D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue_1;         // 0x09F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0A08(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue_1;       // 0x0A20(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_Dead__2;                           // 0x0A38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A39[0x7];                                      // 0x0A39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_FL_Vector_Multiply_Float_ReturnValue_1;   // 0x0A40(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FL_Vector_Multiply_Float_ReturnValue_2;   // 0x0A58(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0A70(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0A88(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0B70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0B71(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0B72(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0B73(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0B74(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0B78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B7C[0x4];                                      // 0x0B7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0B80(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0B98(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0BB0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0BC8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0BE0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0BE8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0BF0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0BF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x0C00(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0C08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x0C0C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0C10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C14[0x4];                                      // 0x0C14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0C18(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0C30(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AALS_AnimMan_CharacterBP_C*             K2Node_DynamicCast_AsALS_Anim_Man_Character_BP;    // 0x0C48(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0C50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0C51(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0C52(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C53[0x5];                                      // 0x0C53(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0C58(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0C60(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0C78(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AALS_AnimMan_CharacterBP_C*             K2Node_DynamicCast_AsALS_Anim_Man_Character_BP_1;  // 0x0C90(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0C98(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_3;               // 0x0C99(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9A[0x6];                                      // 0x0C9A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBodycam_Interface_C>  K2Node_DynamicCast_AsBodycam_Interface_1;          // 0x0CA0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0CB0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_Dead__3;                           // 0x0CB1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CB2[0x2];                                      // 0x0CB2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_9;            // 0x0CB4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_1;               // 0x0CC4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC5[0x3];                                      // 0x0CC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBodycam_Interface_C>  K2Node_DynamicCast_AsBodycam_Interface_2;          // 0x0CC8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0CD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD9[0x7];                                      // 0x0CD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWW_RagdollSystem_C*                    CallFunc_GetRagdollSystem_Ragdoll_System;          // 0x0CE0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0CE8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0CF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0CF1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0CF2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CF3[0x5];                                      // 0x0CF3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue_1;                // 0x0CF8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0D10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D11[0x7];                                      // 0x0D11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0D18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0D20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0D21(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D22[0x6];                                      // 0x0D22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x0D28(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue_2;                // 0x0D40(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_3;                     // 0x0D48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D49[0x7];                                      // 0x0D49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGM_Zombie_C*                           K2Node_DynamicCast_AsGM_Zombie_2;                  // 0x0D50(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0D58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D59[0x7];                                      // 0x0D59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_6;        // 0x0D60(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanReachDestination_ReturnValue;          // 0x0D78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D79[0x7];                                      // 0x0D79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_CanReachDestination_PathLenght;           // 0x0D80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0D88(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0D89(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D8A[0x6];                                      // 0x0D8A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          K2Node_CustomEvent_NewMesh;                        // 0x0D90(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             K2Node_CustomEvent_Materials;                      // 0x0D98(0x0010)(ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0DA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0DA9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0DAA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DAB[0x1];                                      // 0x0DAB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0DAC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_CustomEvent_MontageToPlay;                  // 0x0DB0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_PlayRate;                       // 0x0DB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimMontage_ReturnValue;              // 0x0DBC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_Select_Default;                             // 0x0DC0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x0DC8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x0DD0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x0DD8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x0DE0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x0DF8(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0EE0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_2;            // 0x0EE8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_2;         // 0x0EE9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EEA[0x2];                                      // 0x0EEA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_2;                    // 0x0EEC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_2;                // 0x0EF0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EF4[0x4];                                      // 0x0EF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_2;                // 0x0EF8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_2;             // 0x0F10(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_2;                  // 0x0F28(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_2;            // 0x0F40(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_2;                 // 0x0F58(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_2;                // 0x0F60(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_2;            // 0x0F68(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_2;             // 0x0F70(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_2;                // 0x0F78(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_2;                 // 0x0F80(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_2;            // 0x0F84(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_2;               // 0x0F88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F8C[0x4];                                      // 0x0F8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_2;              // 0x0F90(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_2;                // 0x0FA8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnyMontagePlaying_ReturnValue;          // 0x0FC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC1[0x3];                                      // 0x0FC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0FC4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_7;                   // 0x0FC8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_2;                      // 0x0FD0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x0FD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0FD9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FDA[0x6];                                      // 0x0FDA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue_3;            // 0x0FE0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0FE8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FE9[0x7];                                      // 0x0FE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x0FF0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0FF8(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Random_OutItem;                     // 0x1008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x1010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_10;           // 0x1014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_11;           // 0x1024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_4;               // 0x1034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_4;                     // 0x1035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_5;               // 0x1036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_Dead__4;                           // 0x1037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x1038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1039[0x7];                                     // 0x1039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_7;        // 0x1040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x1058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_8;                   // 0x1060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x1068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1069[0x7];                                     // 0x1069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x1070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_Dead__5;                           // 0x1078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1079[0x7];                                     // 0x1079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue_3;                // 0x1080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGM_Zombie_C*                           K2Node_DynamicCast_AsGM_Zombie_3;                  // 0x1088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x1090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1091[0x7];                                     // 0x1091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x1098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x10A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x10A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x10B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x10B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10B5[0x3];                                     // 0x10B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x10B8(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AALS_AnimMan_CharacterBP_C*             K2Node_DynamicCast_AsALS_Anim_Man_Character_BP_2;  // 0x11A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x11A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x11A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_5;                     // 0x11AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11AB[0x1];                                     // 0x11AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_12;           // 0x11AC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11BC[0x4];                                     // 0x11BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x11C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x11C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x11D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x11D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x11DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11DD[0x3];                                     // 0x11DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x11E0(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_2;          // 0x12C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AALS_AnimMan_CharacterBP_C*             K2Node_DynamicCast_AsALS_Anim_Man_Character_BP_3;  // 0x12E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x12E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12E9[0x7];                                     // 0x12E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x12F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_3;          // 0x12F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default_1;                           // 0x1310(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue_1;         // 0x1318(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x1320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_Dead__6;                           // 0x1321(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x1322(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x1323(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1324[0x4];                                     // 0x1324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_Select_Default_2;                           // 0x1328(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue_2;         // 0x1330(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x1338(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector3f                              CallFunc_BreakVector3f_InVec_ImplicitCast;         // 0x1340(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134C[0x4];                                     // 0x134C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MakeVector_X_ImplicitCast;                // 0x1350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Y_ImplicitCast;                // 0x1358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x1360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x1368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x1370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1374[0x4];                                     // 0x1374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_1;     // 0x1378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x1380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SpawnSoundAtLocation_VolumeMultiplier_ImplicitCast; // 0x1388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_ExecuteUbergraph_Zombie) == 0x000010, "Wrong alignment on Zombie_C_ExecuteUbergraph_Zombie");
static_assert(sizeof(Zombie_C_ExecuteUbergraph_Zombie) == 0x001390, "Wrong size on Zombie_C_ExecuteUbergraph_Zombie");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, EntryPoint) == 0x000000, "Member 'Zombie_C_ExecuteUbergraph_Zombie::EntryPoint' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_NotifyName_4) == 0x000008, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_NotifyName_4' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_NotifyName_3) == 0x000020, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_NotifyName_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_NotifyName_2) == 0x000038, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_NotifyName_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CreateDelegate_OutputDelegate_2) == 0x000040, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_NotifyName_1) == 0x000050, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_NotifyName_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CreateDelegate_OutputDelegate_3) == 0x000058, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_NotifyName) == 0x000068, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CreateDelegate_OutputDelegate_4) == 0x000070, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_name_Variable) == 0x000080, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_int_Variable) == 0x000088, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_object_Variable) == 0x000090, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_object_Variable_1) == 0x000098, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_object_Variable_2) == 0x0000A0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_object_Variable_3) == 0x0000A8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_object_Variable_4) == 0x0000B0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CreateDelegate_OutputDelegate_5) == 0x0000B8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_Variable) == 0x0000C8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0000D0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_object_Variable_5) == 0x0000D8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_object_Variable_6) == 0x0000E0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_Variable_1) == 0x0000E8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_object_Variable_7) == 0x0000F0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_object_Variable_8) == 0x0000F8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_Has_Been_Initd_Variable) == 0x000100, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_HasAuthority_ReturnValue) == 0x000101, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_NotifyName_9) == 0x000104, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_NotifyName_9' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_HasAuthority_ReturnValue_1) == 0x00010C, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_IsClosed_Variable) == 0x00010D, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_IsClosed_Variable_1) == 0x00010E, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_Has_Been_Initd_Variable_1) == 0x00010F, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CreateDelegate_OutputDelegate_6) == 0x000110, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_String) == 0x000120, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_String' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Delay) == 0x000130, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_TimeCount) == 0x000138, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_TimeCount' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_NewParam) == 0x000140, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_NewParam' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Team) == 0x000158, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Team' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Selected_Level_Name) == 0x00015C, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Selected_Level_Name' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Index) == 0x000164, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Index' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Team_PlayerKilled_) == 0x000168, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Team_PlayerKilled_' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_MilitaryIndex) == 0x00016C, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_MilitaryIndex' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_TerroristIndex) == 0x000170, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_TerroristIndex' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_WiiningTeam) == 0x000174, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_WiiningTeam' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Score) == 0x000178, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Score' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Win_) == 0x000180, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Win_' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Slomo) == 0x000188, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Slomo' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_PlayerInfo) == 0x000190, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_PlayerInfo' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_SteamID) == 0x0001D8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_SteamID' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Target_2) == 0x0001E8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Target_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Yes_) == 0x000228, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Yes_' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Target_1) == 0x000230, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Target_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Target) == 0x000270, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Target' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Gamemode) == 0x0002B0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Gamemode' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_IsReady_) == 0x0002B1, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_IsReady_' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_IsTalking) == 0x0002B2, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_IsTalking' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_PC) == 0x0002B8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_PC' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_NewMovementState) == 0x0002C0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_NewMovementState' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_NewMovementAction) == 0x0002C1, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_NewMovementAction' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_NewRotationMode) == 0x0002C2, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_NewRotationMode' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_NewGait) == 0x0002C3, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_NewGait' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_NewViewMode) == 0x0002C4, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_NewViewMode' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_NewOverlayState) == 0x0002C5, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_NewOverlayState' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Damage) == 0x0002C8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_RagdollForce) == 0x0002D0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_RagdollForce' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_BoneName) == 0x0002D8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_BoneName' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Location) == 0x0002E0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Location' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_ShotFromDirection) == 0x0002F8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_ShotFromDirection' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_KillerPC) == 0x000310, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_KillerPC' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_DisableHeadShot) == 0x000318, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_DisableHeadShot' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsBPI_Xp) == 0x000320, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsBPI_Xp' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess) == 0x000330, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_GetPawn_ReturnValue) == 0x000338, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000340, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BoneDamage_DamageFinal) == 0x000358, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BoneDamage_DamageFinal' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000360, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_SelectFloat_ReturnValue) == 0x000368, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000370, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetAnimInstance_ReturnValue) == 0x000388, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000390, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsValid_ReturnValue) == 0x0003A8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_DeltaSeconds) == 0x0003AC, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_byte_Variable) == 0x0003B0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_CreateMoveToProxyObject_ReturnValue) == 0x0003B8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_CreateMoveToProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsValid_ReturnValue_1) == 0x0003C0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsValid_ReturnValue_2) == 0x0003C1, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetGameMode_ReturnValue) == 0x0003C8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_DestLocation) == 0x0003D0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_DestLocation' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_Actor) == 0x0003E8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_Actor' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsGM_Zombie) == 0x0003F0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsGM_Zombie' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess_1) == 0x0003F8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000400, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000418, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakVector3f_X) == 0x00041C, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakVector3f_X' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakVector3f_Y) == 0x000420, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakVector3f_Y' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakVector3f_Z) == 0x000424, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakVector3f_Z' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x000428, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000430, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakVector_X) == 0x000448, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakVector_Y) == 0x000450, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakVector_Z) == 0x000458, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsValid_ReturnValue_3) == 0x000460, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_MakeVector_ReturnValue) == 0x000468, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000480, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_VLerp_ReturnValue) == 0x000498, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0004B0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000598, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_Has_Been_Initd_Variable_2) == 0x000599, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00059A, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_name_Variable_1) == 0x00059C, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_IsClosed_Variable_2) == 0x0005A4, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsValid_ReturnValue_4) == 0x0005A5, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetGameMode_ReturnValue_1) == 0x0005A8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetGameMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsGM_Zombie_1) == 0x0005B0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsGM_Zombie_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess_2) == 0x0005B8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_DamageReceived) == 0x0005BC, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_DamageReceived' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_DamageType) == 0x0005C0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_Origin) == 0x0005C8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_Origin' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_HitInfo) == 0x0005E0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_HitInfo' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_InstigatedBy) == 0x0006C8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_InstigatedBy' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Event_DamageCauser) == 0x0006D0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_bBlockingHit) == 0x0006D8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_bInitialOverlap) == 0x0006D9, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_Time) == 0x0006DC, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_Distance) == 0x0006E0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_Location) == 0x0006E8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_ImpactPoint) == 0x000700, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_Normal) == 0x000718, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_ImpactNormal) == 0x000730, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_PhysMat) == 0x000748, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_HitActor) == 0x000750, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_HitComponent) == 0x000758, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_HitBoneName) == 0x000760, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_BoneName) == 0x000768, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_HitItem) == 0x000770, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_ElementIndex) == 0x000774, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_FaceIndex) == 0x000778, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_TraceStart) == 0x000780, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_TraceEnd) == 0x000798, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0007B0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_FindLookAtRotation_ReturnValue) == 0x0007B8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_MapRangeClamped_ReturnValue) == 0x0007D0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x0007D8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_FL_Vector_Multiply_Float_ReturnValue) == 0x0007F0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_FL_Vector_Multiply_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakVector_X_1) == 0x000808, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakVector_Y_1) == 0x000810, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakVector_Z_1) == 0x000818, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000820, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetSocketLocation_ReturnValue) == 0x000828, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_MakeVector_ReturnValue_1) == 0x000840, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_RandomFloatInRange_ReturnValue) == 0x000858, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_NotifyName_5) == 0x000860, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_NotifyName_5' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetAllActorsOfClass_OutActors) == 0x000868, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsDead_Dead_) == 0x000878, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsDead_Dead_' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BooleanAND_ReturnValue_1) == 0x000879, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsBPI_Interact) == 0x000880, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsBPI_Interact' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess_3) == 0x000890, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_MovementResult) == 0x000891, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_MovementResult' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1) == 0x000898, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsValid_ReturnValue_5) == 0x0008A0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetSocketTransform_ReturnValue) == 0x0008B0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakTransform_Location) == 0x000910, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakTransform_Rotation) == 0x000928, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakTransform_Scale) == 0x000940, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CreateDelegate_OutputDelegate_7) == 0x000958, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsBodycam_Interface) == 0x000968, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsBodycam_Interface' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess_4) == 0x000978, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsDead_Dead__1) == 0x000979, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsDead_Dead__1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CreateDelegate_OutputDelegate_8) == 0x00097C, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_NotifyName_6) == 0x00098C, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_NotifyName_6' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetVelocity_ReturnValue) == 0x000998, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_VSize_ReturnValue) == 0x0009B0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x0009B8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0009D0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x0009D8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_FindLookAtRotation_ReturnValue_1) == 0x0009F0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_FindLookAtRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000A08, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Conv_RotatorToVector_ReturnValue_1) == 0x000A20, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Conv_RotatorToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsDead_Dead__2) == 0x000A38, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsDead_Dead__2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_FL_Vector_Multiply_Float_ReturnValue_1) == 0x000A40, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_FL_Vector_Multiply_Float_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_FL_Vector_Multiply_Float_ReturnValue_2) == 0x000A58, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_FL_Vector_Multiply_Float_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Add_VectorVector_ReturnValue) == 0x000A70, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_SphereTraceSingle_OutHit) == 0x000A88, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_SphereTraceSingle_ReturnValue) == 0x000B70, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsValid_ReturnValue_6) == 0x000B71, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000B72, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000B73, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_Time_1) == 0x000B74, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_Distance_1) == 0x000B78, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_Location_1) == 0x000B80, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000B98, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_Normal_1) == 0x000BB0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000BC8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_PhysMat_1) == 0x000BE0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_HitActor_1) == 0x000BE8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_HitComponent_1) == 0x000BF0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_HitBoneName_1) == 0x000BF8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_BoneName_1) == 0x000C00, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_HitItem_1) == 0x000C08, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_ElementIndex_1) == 0x000C0C, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_FaceIndex_1) == 0x000C10, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_TraceStart_1) == 0x000C18, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_TraceEnd_1) == 0x000C30, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsALS_Anim_Man_Character_BP) == 0x000C48, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsALS_Anim_Man_Character_BP' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess_5) == 0x000C50, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000C51, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BooleanAND_ReturnValue_2) == 0x000C52, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000C58, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_MakeVector_ReturnValue_2) == 0x000C60, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000C78, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsALS_Anim_Man_Character_BP_1) == 0x000C90, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsALS_Anim_Man_Character_BP_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess_6) == 0x000C98, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_Has_Been_Initd_Variable_3) == 0x000C99, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_Has_Been_Initd_Variable_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsBodycam_Interface_1) == 0x000CA0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsBodycam_Interface_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess_7) == 0x000CB0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsDead_Dead__3) == 0x000CB1, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsDead_Dead__3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CreateDelegate_OutputDelegate_9) == 0x000CB4, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_MovementResult_1) == 0x000CC4, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_MovementResult_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsBodycam_Interface_2) == 0x000CC8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsBodycam_Interface_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess_8) == 0x000CD8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetRagdollSystem_Ragdoll_System) == 0x000CE0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetRagdollSystem_Ragdoll_System' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsCharacter) == 0x000CE8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess_9) == 0x000CF0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Not_PreBool_ReturnValue) == 0x000CF1, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BooleanOR_ReturnValue) == 0x000CF2, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetVelocity_ReturnValue_1) == 0x000CF8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BooleanOR_ReturnValue_1) == 0x000D10, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_VSize_ReturnValue_1) == 0x000D18, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000D20, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsValid_ReturnValue_7) == 0x000D21, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x000D28, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetGameMode_ReturnValue_2) == 0x000D40, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetGameMode_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_IsClosed_Variable_3) == 0x000D48, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_IsClosed_Variable_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsGM_Zombie_2) == 0x000D50, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsGM_Zombie_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess_10) == 0x000D58, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_GetActorLocation_ReturnValue_6) == 0x000D60, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_GetActorLocation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_CanReachDestination_ReturnValue) == 0x000D78, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_CanReachDestination_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_CanReachDestination_PathLenght) == 0x000D80, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_CanReachDestination_PathLenght' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000D88, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Not_PreBool_ReturnValue_1) == 0x000D89, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_NewMesh) == 0x000D90, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_NewMesh' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_Materials) == 0x000D98, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_Materials' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Not_PreBool_ReturnValue_2) == 0x000DA8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BooleanAND_ReturnValue_3) == 0x000DA9, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BooleanOR_ReturnValue_2) == 0x000DAA, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000DAC, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_MontageToPlay) == 0x000DB0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_MontageToPlay' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_PlayRate) == 0x000DB8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_PlayRate' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_PlayAnimMontage_ReturnValue) == 0x000DBC, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_PlayAnimMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Select_Default) == 0x000DC0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_HitComponent) == 0x000DC8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_OtherActor_2) == 0x000DD0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_OtherComp_2) == 0x000DD8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_NormalImpulse) == 0x000DE0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_Hit) == 0x000DF8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000EE0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_bBlockingHit_2) == 0x000EE8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_bBlockingHit_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_bInitialOverlap_2) == 0x000EE9, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_bInitialOverlap_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_Time_2) == 0x000EEC, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_Time_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_Distance_2) == 0x000EF0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_Distance_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_Location_2) == 0x000EF8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_Location_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_ImpactPoint_2) == 0x000F10, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_ImpactPoint_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_Normal_2) == 0x000F28, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_Normal_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_ImpactNormal_2) == 0x000F40, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_ImpactNormal_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_PhysMat_2) == 0x000F58, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_PhysMat_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_HitActor_2) == 0x000F60, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_HitActor_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_HitComponent_2) == 0x000F68, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_HitComponent_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_HitBoneName_2) == 0x000F70, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_HitBoneName_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_BoneName_2) == 0x000F78, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_BoneName_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_HitItem_2) == 0x000F80, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_HitItem_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_ElementIndex_2) == 0x000F84, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_ElementIndex_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_FaceIndex_2) == 0x000F88, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_FaceIndex_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_TraceStart_2) == 0x000F90, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_TraceStart_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakHitResult_TraceEnd_2) == 0x000FA8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakHitResult_TraceEnd_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsAnyMontagePlaying_ReturnValue) == 0x000FC0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsAnyMontagePlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000FC4, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_NotifyName_7) == 0x000FC8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_NotifyName_7' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_VSize_ReturnValue_2) == 0x000FD0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x000FD8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BooleanAND_ReturnValue_4) == 0x000FD9, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_MapRangeClamped_ReturnValue_3) == 0x000FE0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_MapRangeClamped_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BooleanAND_ReturnValue_5) == 0x000FE8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x000FF0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000FF8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Array_Random_OutItem) == 0x001008, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Array_Random_OutIndex) == 0x001010, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CreateDelegate_OutputDelegate_10) == 0x001014, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CreateDelegate_OutputDelegate_10' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CreateDelegate_OutputDelegate_11) == 0x001024, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CreateDelegate_OutputDelegate_11' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_Has_Been_Initd_Variable_4) == 0x001034, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_Has_Been_Initd_Variable_4' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_IsClosed_Variable_4) == 0x001035, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_IsClosed_Variable_4' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_Has_Been_Initd_Variable_5) == 0x001036, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_Has_Been_Initd_Variable_5' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsDead_Dead__4) == 0x001037, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsDead_Dead__4' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_HasAuthority_ReturnValue_2) == 0x001038, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_GetActorLocation_ReturnValue_7) == 0x001040, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_GetActorLocation_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Vector_Distance_ReturnValue) == 0x001058, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CustomEvent_NotifyName_8) == 0x001060, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CustomEvent_NotifyName_8' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x001068, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_SelectFloat_ReturnValue_1) == 0x001070, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsDead_Dead__5) == 0x001078, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsDead_Dead__5' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetGameMode_ReturnValue_3) == 0x001080, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetGameMode_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsGM_Zombie_3) == 0x001088, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsGM_Zombie_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess_11) == 0x001090, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x001098, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0010A0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0010A8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x0010B0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x0010B4, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_SweepResult_1) == 0x0010B8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsALS_Anim_Man_Character_BP_2) == 0x0011A0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsALS_Anim_Man_Character_BP_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess_12) == 0x0011A8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0011A9, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, Temp_bool_IsClosed_Variable_5) == 0x0011AA, "Member 'Zombie_C_ExecuteUbergraph_Zombie::Temp_bool_IsClosed_Variable_5' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_CreateDelegate_OutputDelegate_12) == 0x0011AC, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_CreateDelegate_OutputDelegate_12' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0011C0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_OtherActor) == 0x0011C8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_OtherComp) == 0x0011D0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0011D8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_bFromSweep) == 0x0011DC, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_ComponentBoundEvent_SweepResult) == 0x0011E0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetSocketLocation_ReturnValue_2) == 0x0012C8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetSocketLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_AsALS_Anim_Man_Character_BP_3) == 0x0012E0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_AsALS_Anim_Man_Character_BP_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_DynamicCast_bSuccess_13) == 0x0012E8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_SpawnSoundAttached_ReturnValue) == 0x0012F0, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetSocketLocation_ReturnValue_3) == 0x0012F8, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetSocketLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Select_Default_1) == 0x001310, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_SpawnSoundAttached_ReturnValue_1) == 0x001318, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_SpawnSoundAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsValid_ReturnValue_8) == 0x001320, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsDead_Dead__6) == 0x001321, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsDead_Dead__6' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsValid_ReturnValue_9) == 0x001322, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_IsValid_ReturnValue_10) == 0x001323, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, K2Node_Select_Default_2) == 0x001328, "Member 'Zombie_C_ExecuteUbergraph_Zombie::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_SpawnSoundAttached_ReturnValue_2) == 0x001330, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_SpawnSoundAttached_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_GetAIController_ReturnValue) == 0x001338, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_BreakVector3f_InVec_ImplicitCast) == 0x001340, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_BreakVector3f_InVec_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_MakeVector_X_ImplicitCast) == 0x001350, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_MakeVector_X_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_MakeVector_Y_ImplicitCast) == 0x001358, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_MakeVector_Y_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x001360, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x001368, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Delay_Duration_ImplicitCast) == 0x001370, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_MapRangeClamped_Value_ImplicitCast_1) == 0x001378, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_MapRangeClamped_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x001380, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_ExecuteUbergraph_Zombie, CallFunc_SpawnSoundAtLocation_VolumeMultiplier_ImplicitCast) == 0x001388, "Member 'Zombie_C_ExecuteUbergraph_Zombie::CallFunc_SpawnSoundAtLocation_VolumeMultiplier_ImplicitCast' has a wrong offset!");

// Function Zombie.Zombie_C.Get BP Menu Controller Component
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_Get_BP_Menu_Controller_Component final
{
public:
	class UBP_MenuControllerComponent_C*          BP_Menu_Controller_Component;                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_Get_BP_Menu_Controller_Component) == 0x000008, "Wrong alignment on Zombie_C_Get_BP_Menu_Controller_Component");
static_assert(sizeof(Zombie_C_Get_BP_Menu_Controller_Component) == 0x000008, "Wrong size on Zombie_C_Get_BP_Menu_Controller_Component");
static_assert(offsetof(Zombie_C_Get_BP_Menu_Controller_Component, BP_Menu_Controller_Component) == 0x000000, "Member 'Zombie_C_Get_BP_Menu_Controller_Component::BP_Menu_Controller_Component' has a wrong offset!");

// Function Zombie.Zombie_C.Get Stamina
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_Get_Stamina final
{
public:
	double                                        Stamina;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_Get_Stamina) == 0x000008, "Wrong alignment on Zombie_C_Get_Stamina");
static_assert(sizeof(Zombie_C_Get_Stamina) == 0x000008, "Wrong size on Zombie_C_Get_Stamina");
static_assert(offsetof(Zombie_C_Get_Stamina, Stamina) == 0x000000, "Member 'Zombie_C_Get_Stamina::Stamina' has a wrong offset!");

// Function Zombie.Zombie_C.GetBlured
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_GetBlured final
{
public:
	double                                        Blured;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetBlured) == 0x000008, "Wrong alignment on Zombie_C_GetBlured");
static_assert(sizeof(Zombie_C_GetBlured) == 0x000008, "Wrong size on Zombie_C_GetBlured");
static_assert(offsetof(Zombie_C_GetBlured, Blured) == 0x000000, "Member 'Zombie_C_GetBlured::Blured' has a wrong offset!");

// Function Zombie.Zombie_C.GetBurnedRef
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_GetBurnedRef final
{
public:
	class USceneComponent*                        BurnedMesh;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetBurnedRef) == 0x000008, "Wrong alignment on Zombie_C_GetBurnedRef");
static_assert(sizeof(Zombie_C_GetBurnedRef) == 0x000008, "Wrong size on Zombie_C_GetBurnedRef");
static_assert(offsetof(Zombie_C_GetBurnedRef, BurnedMesh) == 0x000000, "Member 'Zombie_C_GetBurnedRef::BurnedMesh' has a wrong offset!");

// Function Zombie.Zombie_C.GetFlashBangEffect
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_GetFlashBangEffect final
{
public:
	double                                        FlashEffect;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetFlashBangEffect) == 0x000008, "Wrong alignment on Zombie_C_GetFlashBangEffect");
static_assert(sizeof(Zombie_C_GetFlashBangEffect) == 0x000008, "Wrong size on Zombie_C_GetFlashBangEffect");
static_assert(offsetof(Zombie_C_GetFlashBangEffect, FlashEffect) == 0x000000, "Member 'Zombie_C_GetFlashBangEffect::FlashEffect' has a wrong offset!");

// Function Zombie.Zombie_C.GetGameMode
// 0x0040 (0x0040 - 0x0000)
struct Zombie_C_GetGameMode final
{
public:
	struct FSTR_GamemodeWinInfo                   GameMode;                                          // 0x0000(0x0040)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetGameMode) == 0x000008, "Wrong alignment on Zombie_C_GetGameMode");
static_assert(sizeof(Zombie_C_GetGameMode) == 0x000040, "Wrong size on Zombie_C_GetGameMode");
static_assert(offsetof(Zombie_C_GetGameMode, GameMode) == 0x000000, "Member 'Zombie_C_GetGameMode::GameMode' has a wrong offset!");

// Function Zombie.Zombie_C.GetHealth
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_GetHealth final
{
public:
	double                                        Health;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetHealth) == 0x000008, "Wrong alignment on Zombie_C_GetHealth");
static_assert(sizeof(Zombie_C_GetHealth) == 0x000008, "Wrong size on Zombie_C_GetHealth");
static_assert(offsetof(Zombie_C_GetHealth, Health) == 0x000000, "Member 'Zombie_C_GetHealth::Health' has a wrong offset!");

// Function Zombie.Zombie_C.GetKickedPlayerVoted
// 0x0010 (0x0010 - 0x0000)
struct Zombie_C_GetKickedPlayerVoted final
{
public:
	TArray<class FString>                         KickplayerAlreadyVote;                             // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(Zombie_C_GetKickedPlayerVoted) == 0x000008, "Wrong alignment on Zombie_C_GetKickedPlayerVoted");
static_assert(sizeof(Zombie_C_GetKickedPlayerVoted) == 0x000010, "Wrong size on Zombie_C_GetKickedPlayerVoted");
static_assert(offsetof(Zombie_C_GetKickedPlayerVoted, KickplayerAlreadyVote) == 0x000000, "Member 'Zombie_C_GetKickedPlayerVoted::KickplayerAlreadyVote' has a wrong offset!");

// Function Zombie.Zombie_C.GetMappedSpeed
// 0x0070 (0x0070 - 0x0000)
struct Zombie_C_GetMappedSpeed final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LocSprintSpeed;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LocRunSpeed;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LocWalkSpeed;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetSpeed_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetSpeed_ReturnValue_1;                   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetSpeed_ReturnValue_2;                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetMappedSpeed) == 0x000008, "Wrong alignment on Zombie_C_GetMappedSpeed");
static_assert(sizeof(Zombie_C_GetMappedSpeed) == 0x000070, "Wrong size on Zombie_C_GetMappedSpeed");
static_assert(offsetof(Zombie_C_GetMappedSpeed, ReturnValue) == 0x000000, "Member 'Zombie_C_GetMappedSpeed::ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, LocSprintSpeed) == 0x000008, "Member 'Zombie_C_GetMappedSpeed::LocSprintSpeed' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, LocRunSpeed) == 0x000010, "Member 'Zombie_C_GetMappedSpeed::LocRunSpeed' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, LocWalkSpeed) == 0x000018, "Member 'Zombie_C_GetMappedSpeed::LocWalkSpeed' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, Temp_bool_Variable) == 0x000020, "Member 'Zombie_C_GetMappedSpeed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, Temp_bool_Variable_1) == 0x000021, "Member 'Zombie_C_GetMappedSpeed::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, CallFunc_GetSpeed_ReturnValue) == 0x000028, "Member 'Zombie_C_GetMappedSpeed::CallFunc_GetSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, CallFunc_MapRangeClamped_ReturnValue) == 0x000030, "Member 'Zombie_C_GetMappedSpeed::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000038, "Member 'Zombie_C_GetMappedSpeed::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000040, "Member 'Zombie_C_GetMappedSpeed::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, CallFunc_GetSpeed_ReturnValue_1) == 0x000048, "Member 'Zombie_C_GetMappedSpeed::CallFunc_GetSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, CallFunc_GetSpeed_ReturnValue_2) == 0x000050, "Member 'Zombie_C_GetMappedSpeed::CallFunc_GetSpeed_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000058, "Member 'Zombie_C_GetMappedSpeed::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000059, "Member 'Zombie_C_GetMappedSpeed::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, K2Node_Select_Default) == 0x000060, "Member 'Zombie_C_GetMappedSpeed::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetMappedSpeed, K2Node_Select_Default_1) == 0x000068, "Member 'Zombie_C_GetMappedSpeed::K2Node_Select_Default_1' has a wrong offset!");

// Function Zombie.Zombie_C.GetMenuSettings
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_GetMenuSettings final
{
public:
	class UBP_MenuControllerComponent_C*          Bp_MenuController;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetMenuSettings) == 0x000008, "Wrong alignment on Zombie_C_GetMenuSettings");
static_assert(sizeof(Zombie_C_GetMenuSettings) == 0x000008, "Wrong size on Zombie_C_GetMenuSettings");
static_assert(offsetof(Zombie_C_GetMenuSettings, Bp_MenuController) == 0x000000, "Member 'Zombie_C_GetMenuSettings::Bp_MenuController' has a wrong offset!");

// Function Zombie.Zombie_C.GetMutePlayer
// 0x0010 (0x0010 - 0x0000)
struct Zombie_C_GetMutePlayer final
{
public:
	TArray<class FString>                         MutePlayer;                                        // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(Zombie_C_GetMutePlayer) == 0x000008, "Wrong alignment on Zombie_C_GetMutePlayer");
static_assert(sizeof(Zombie_C_GetMutePlayer) == 0x000010, "Wrong size on Zombie_C_GetMutePlayer");
static_assert(offsetof(Zombie_C_GetMutePlayer, MutePlayer) == 0x000000, "Member 'Zombie_C_GetMutePlayer::MutePlayer' has a wrong offset!");

// Function Zombie.Zombie_C.GetPlayerConnected
// 0x0010 (0x0010 - 0x0000)
struct Zombie_C_GetPlayerConnected final
{
public:
	TArray<struct FSTR_PCInfo>                    PlayerConnected;                                   // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(Zombie_C_GetPlayerConnected) == 0x000008, "Wrong alignment on Zombie_C_GetPlayerConnected");
static_assert(sizeof(Zombie_C_GetPlayerConnected) == 0x000010, "Wrong size on Zombie_C_GetPlayerConnected");
static_assert(offsetof(Zombie_C_GetPlayerConnected, PlayerConnected) == 0x000000, "Member 'Zombie_C_GetPlayerConnected::PlayerConnected' has a wrong offset!");

// Function Zombie.Zombie_C.GetPlayerKickVote
// 0x0010 (0x0010 - 0x0000)
struct Zombie_C_GetPlayerKickVote final
{
public:
	TArray<struct FSTR_KickVote>                  KickVotePlayer;                                    // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(Zombie_C_GetPlayerKickVote) == 0x000008, "Wrong alignment on Zombie_C_GetPlayerKickVote");
static_assert(sizeof(Zombie_C_GetPlayerKickVote) == 0x000010, "Wrong size on Zombie_C_GetPlayerKickVote");
static_assert(offsetof(Zombie_C_GetPlayerKickVote, KickVotePlayer) == 0x000000, "Member 'Zombie_C_GetPlayerKickVote::KickVotePlayer' has a wrong offset!");

// Function Zombie.Zombie_C.GetPlayerSkin
// 0x02E8 (0x02E8 - 0x0000)
struct Zombie_C_GetPlayerSkin final
{
public:
	struct FSTR_TEST                              Player_Skin;                                       // 0x0000(0x02E0)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          Valid_;                                            // 0x02E0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetPlayerSkin) == 0x000008, "Wrong alignment on Zombie_C_GetPlayerSkin");
static_assert(sizeof(Zombie_C_GetPlayerSkin) == 0x0002E8, "Wrong size on Zombie_C_GetPlayerSkin");
static_assert(offsetof(Zombie_C_GetPlayerSkin, Player_Skin) == 0x000000, "Member 'Zombie_C_GetPlayerSkin::Player_Skin' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetPlayerSkin, Valid_) == 0x0002E0, "Member 'Zombie_C_GetPlayerSkin::Valid_' has a wrong offset!");

// Function Zombie.Zombie_C.GetRagdollSystem
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_GetRagdollSystem final
{
public:
	class UWW_RagdollSystem_C*                    Ragdoll_System;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetRagdollSystem) == 0x000008, "Wrong alignment on Zombie_C_GetRagdollSystem");
static_assert(sizeof(Zombie_C_GetRagdollSystem) == 0x000008, "Wrong size on Zombie_C_GetRagdollSystem");
static_assert(offsetof(Zombie_C_GetRagdollSystem, Ragdoll_System) == 0x000000, "Member 'Zombie_C_GetRagdollSystem::Ragdoll_System' has a wrong offset!");

// Function Zombie.Zombie_C.GetRandomSpeed
// 0x0060 (0x0060 - 0x0000)
struct Zombie_C_GetRandomSpeed final
{
public:
	TArray<double>                                AvailableSpeed;                                    // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_2;                              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Random_OutItem;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue_1;       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_VariableSet_MaxWalkSpeed_ImplicitCast;      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomBoolWithWeight_Weight_ImplicitCast; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetRandomSpeed) == 0x000008, "Wrong alignment on Zombie_C_GetRandomSpeed");
static_assert(sizeof(Zombie_C_GetRandomSpeed) == 0x000060, "Wrong size on Zombie_C_GetRandomSpeed");
static_assert(offsetof(Zombie_C_GetRandomSpeed, AvailableSpeed) == 0x000000, "Member 'Zombie_C_GetRandomSpeed::AvailableSpeed' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, Temp_int_Variable) == 0x000010, "Member 'Zombie_C_GetRandomSpeed::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, Temp_real_Variable) == 0x000014, "Member 'Zombie_C_GetRandomSpeed::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, Temp_real_Variable_1) == 0x000018, "Member 'Zombie_C_GetRandomSpeed::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, Temp_real_Variable_2) == 0x00001C, "Member 'Zombie_C_GetRandomSpeed::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x000020, "Member 'Zombie_C_GetRandomSpeed::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000024, "Member 'Zombie_C_GetRandomSpeed::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, K2Node_Select_Default) == 0x000028, "Member 'Zombie_C_GetRandomSpeed::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000030, "Member 'Zombie_C_GetRandomSpeed::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, CallFunc_Array_Random_OutItem) == 0x000038, "Member 'Zombie_C_GetRandomSpeed::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, CallFunc_Array_Random_OutIndex) == 0x000040, "Member 'Zombie_C_GetRandomSpeed::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, CallFunc_MapRangeClamped_ReturnValue) == 0x000048, "Member 'Zombie_C_GetRandomSpeed::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, CallFunc_RandomBoolWithWeight_ReturnValue_1) == 0x000050, "Member 'Zombie_C_GetRandomSpeed::CallFunc_RandomBoolWithWeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, CallFunc_BooleanOR_ReturnValue) == 0x000051, "Member 'Zombie_C_GetRandomSpeed::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, K2Node_VariableSet_MaxWalkSpeed_ImplicitCast) == 0x000054, "Member 'Zombie_C_GetRandomSpeed::K2Node_VariableSet_MaxWalkSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetRandomSpeed, CallFunc_RandomBoolWithWeight_Weight_ImplicitCast) == 0x000058, "Member 'Zombie_C_GetRandomSpeed::CallFunc_RandomBoolWithWeight_Weight_ImplicitCast' has a wrong offset!");

// Function Zombie.Zombie_C.GetReady?
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_GetReady_ final
{
public:
	bool                                          IsReady_;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetReady_) == 0x000001, "Wrong alignment on Zombie_C_GetReady_");
static_assert(sizeof(Zombie_C_GetReady_) == 0x000001, "Wrong size on Zombie_C_GetReady_");
static_assert(offsetof(Zombie_C_GetReady_, IsReady_) == 0x000000, "Member 'Zombie_C_GetReady_::IsReady_' has a wrong offset!");

// Function Zombie.Zombie_C.GetServerSteamID
// 0x0010 (0x0010 - 0x0000)
struct Zombie_C_GetServerSteamID final
{
public:
	class FString                                 SteamID;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetServerSteamID) == 0x000008, "Wrong alignment on Zombie_C_GetServerSteamID");
static_assert(sizeof(Zombie_C_GetServerSteamID) == 0x000010, "Wrong size on Zombie_C_GetServerSteamID");
static_assert(offsetof(Zombie_C_GetServerSteamID, SteamID) == 0x000000, "Member 'Zombie_C_GetServerSteamID::SteamID' has a wrong offset!");

// Function Zombie.Zombie_C.GetSpeed
// 0x0058 (0x0058 - 0x0000)
struct Zombie_C_GetSpeed final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetSpeed) == 0x000008, "Wrong alignment on Zombie_C_GetSpeed");
static_assert(sizeof(Zombie_C_GetSpeed) == 0x000058, "Wrong size on Zombie_C_GetSpeed");
static_assert(offsetof(Zombie_C_GetSpeed, ReturnValue) == 0x000000, "Member 'Zombie_C_GetSpeed::ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetSpeed, CallFunc_GetVelocity_ReturnValue) == 0x000008, "Member 'Zombie_C_GetSpeed::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetSpeed, CallFunc_BreakVector_X) == 0x000020, "Member 'Zombie_C_GetSpeed::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetSpeed, CallFunc_BreakVector_Y) == 0x000028, "Member 'Zombie_C_GetSpeed::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetSpeed, CallFunc_BreakVector_Z) == 0x000030, "Member 'Zombie_C_GetSpeed::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetSpeed, CallFunc_MakeVector_ReturnValue) == 0x000038, "Member 'Zombie_C_GetSpeed::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetSpeed, CallFunc_VSize_ReturnValue) == 0x000050, "Member 'Zombie_C_GetSpeed::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function Zombie.Zombie_C.GetStarterWeapons
// 0x0010 (0x0010 - 0x0000)
struct Zombie_C_GetStarterWeapons final
{
public:
	TArray<struct FSTR_Actor>                     Weapons;                                           // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(Zombie_C_GetStarterWeapons) == 0x000008, "Wrong alignment on Zombie_C_GetStarterWeapons");
static_assert(sizeof(Zombie_C_GetStarterWeapons) == 0x000010, "Wrong size on Zombie_C_GetStarterWeapons");
static_assert(offsetof(Zombie_C_GetStarterWeapons, Weapons) == 0x000000, "Member 'Zombie_C_GetStarterWeapons::Weapons' has a wrong offset!");

// Function Zombie.Zombie_C.GetSteamID
// 0x0010 (0x0010 - 0x0000)
struct Zombie_C_GetSteamID final
{
public:
	class FString                                 SteamID;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetSteamID) == 0x000008, "Wrong alignment on Zombie_C_GetSteamID");
static_assert(sizeof(Zombie_C_GetSteamID) == 0x000010, "Wrong size on Zombie_C_GetSteamID");
static_assert(offsetof(Zombie_C_GetSteamID, SteamID) == 0x000000, "Member 'Zombie_C_GetSteamID::SteamID' has a wrong offset!");

// Function Zombie.Zombie_C.GetSurvivorStatuts
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_GetSurvivorStatuts final
{
public:
	class UWW_SurvivorStatus_C*                   SurvivorComponant;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetSurvivorStatuts) == 0x000008, "Wrong alignment on Zombie_C_GetSurvivorStatuts");
static_assert(sizeof(Zombie_C_GetSurvivorStatuts) == 0x000008, "Wrong size on Zombie_C_GetSurvivorStatuts");
static_assert(offsetof(Zombie_C_GetSurvivorStatuts, SurvivorComponant) == 0x000000, "Member 'Zombie_C_GetSurvivorStatuts::SurvivorComponant' has a wrong offset!");

// Function Zombie.Zombie_C.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_GetTeam final
{
public:
	E_Team                                        Team;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_GetTeam) == 0x000001, "Wrong alignment on Zombie_C_GetTeam");
static_assert(sizeof(Zombie_C_GetTeam) == 0x000001, "Wrong size on Zombie_C_GetTeam");
static_assert(offsetof(Zombie_C_GetTeam, Team) == 0x000000, "Member 'Zombie_C_GetTeam::Team' has a wrong offset!");

// Function Zombie.Zombie_C.GetTeamList
// 0x0018 (0x0018 - 0x0000)
struct Zombie_C_GetTeamList final
{
public:
	E_Team                                        Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTR_PCInfo>                    Info;                                              // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(Zombie_C_GetTeamList) == 0x000008, "Wrong alignment on Zombie_C_GetTeamList");
static_assert(sizeof(Zombie_C_GetTeamList) == 0x000018, "Wrong size on Zombie_C_GetTeamList");
static_assert(offsetof(Zombie_C_GetTeamList, Team) == 0x000000, "Member 'Zombie_C_GetTeamList::Team' has a wrong offset!");
static_assert(offsetof(Zombie_C_GetTeamList, Info) == 0x000008, "Member 'Zombie_C_GetTeamList::Info' has a wrong offset!");

// Function Zombie.Zombie_C.GetTopScore
// 0x0010 (0x0010 - 0x0000)
struct Zombie_C_GetTopScore final
{
public:
	TArray<struct FSTR_PCInfo>                    TopScore;                                          // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(Zombie_C_GetTopScore) == 0x000008, "Wrong alignment on Zombie_C_GetTopScore");
static_assert(sizeof(Zombie_C_GetTopScore) == 0x000010, "Wrong size on Zombie_C_GetTopScore");
static_assert(offsetof(Zombie_C_GetTopScore, TopScore) == 0x000000, "Member 'Zombie_C_GetTopScore::TopScore' has a wrong offset!");

// Function Zombie.Zombie_C.IsDead
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_IsDead final
{
public:
	bool                                          Dead_;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_IsDead) == 0x000001, "Wrong alignment on Zombie_C_IsDead");
static_assert(sizeof(Zombie_C_IsDead) == 0x000001, "Wrong size on Zombie_C_IsDead");
static_assert(offsetof(Zombie_C_IsDead, Dead_) == 0x000000, "Member 'Zombie_C_IsDead::Dead_' has a wrong offset!");

// Function Zombie.Zombie_C.IsDestroyabe?
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_IsDestroyabe_ final
{
public:
	bool                                          Destroyable_;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_IsDestroyabe_) == 0x000001, "Wrong alignment on Zombie_C_IsDestroyabe_");
static_assert(sizeof(Zombie_C_IsDestroyabe_) == 0x000001, "Wrong size on Zombie_C_IsDestroyabe_");
static_assert(offsetof(Zombie_C_IsDestroyabe_, Destroyable_) == 0x000000, "Member 'Zombie_C_IsDestroyabe_::Destroyable_' has a wrong offset!");

// Function Zombie.Zombie_C.IsReady?
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_IsReady_ final
{
public:
	bool                                          IsReady__0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_IsReady_) == 0x000001, "Wrong alignment on Zombie_C_IsReady_");
static_assert(sizeof(Zombie_C_IsReady_) == 0x000001, "Wrong size on Zombie_C_IsReady_");
static_assert(offsetof(Zombie_C_IsReady_, IsReady__0) == 0x000000, "Member 'Zombie_C_IsReady_::IsReady__0' has a wrong offset!");

// Function Zombie.Zombie_C.IsStress
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_IsStress final
{
public:
	bool                                          Yes_;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_IsStress) == 0x000001, "Wrong alignment on Zombie_C_IsStress");
static_assert(sizeof(Zombie_C_IsStress) == 0x000001, "Wrong size on Zombie_C_IsStress");
static_assert(offsetof(Zombie_C_IsStress, Yes_) == 0x000000, "Member 'Zombie_C_IsStress::Yes_' has a wrong offset!");

// Function Zombie.Zombie_C.IsTalking?
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_IsTalking_ final
{
public:
	bool                                          IsTalking__0;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_IsTalking_) == 0x000001, "Wrong alignment on Zombie_C_IsTalking_");
static_assert(sizeof(Zombie_C_IsTalking_) == 0x000001, "Wrong size on Zombie_C_IsTalking_");
static_assert(offsetof(Zombie_C_IsTalking_, IsTalking__0) == 0x000000, "Member 'Zombie_C_IsTalking_::IsTalking__0' has a wrong offset!");

// Function Zombie.Zombie_C.Kick?
// 0x0040 (0x0040 - 0x0000)
struct Zombie_C_Kick_ final
{
public:
	struct FSTR_PCInfo                            Target;                                            // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_Kick_) == 0x000008, "Wrong alignment on Zombie_C_Kick_");
static_assert(sizeof(Zombie_C_Kick_) == 0x000040, "Wrong size on Zombie_C_Kick_");
static_assert(offsetof(Zombie_C_Kick_, Target) == 0x000000, "Member 'Zombie_C_Kick_::Target' has a wrong offset!");

// Function Zombie.Zombie_C.KickPlayer
// 0x0048 (0x0048 - 0x0000)
struct Zombie_C_KickPlayer final
{
public:
	struct FSTR_KickVote                          PlayerInfo;                                        // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_KickPlayer) == 0x000008, "Wrong alignment on Zombie_C_KickPlayer");
static_assert(sizeof(Zombie_C_KickPlayer) == 0x000048, "Wrong size on Zombie_C_KickPlayer");
static_assert(offsetof(Zombie_C_KickPlayer, PlayerInfo) == 0x000000, "Member 'Zombie_C_KickPlayer::PlayerInfo' has a wrong offset!");

// Function Zombie.Zombie_C.MuteID
// 0x0010 (0x0010 - 0x0000)
struct Zombie_C_MuteID final
{
public:
	class FString                                 SteamID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_MuteID) == 0x000008, "Wrong alignment on Zombie_C_MuteID");
static_assert(sizeof(Zombie_C_MuteID) == 0x000010, "Wrong size on Zombie_C_MuteID");
static_assert(offsetof(Zombie_C_MuteID, SteamID) == 0x000000, "Member 'Zombie_C_MuteID::SteamID' has a wrong offset!");

// Function Zombie.Zombie_C.NewKickVote
// 0x0040 (0x0040 - 0x0000)
struct Zombie_C_NewKickVote final
{
public:
	struct FSTR_PCInfo                            Target;                                            // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_NewKickVote) == 0x000008, "Wrong alignment on Zombie_C_NewKickVote");
static_assert(sizeof(Zombie_C_NewKickVote) == 0x000040, "Wrong size on Zombie_C_NewKickVote");
static_assert(offsetof(Zombie_C_NewKickVote, Target) == 0x000000, "Member 'Zombie_C_NewKickVote::Target' has a wrong offset!");

// Function Zombie.Zombie_C.OnBlendOut_51E0283846B84EF1D5A1089E527759EB
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_OnBlendOut_51E0283846B84EF1D5A1089E527759EB final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnBlendOut_51E0283846B84EF1D5A1089E527759EB) == 0x000004, "Wrong alignment on Zombie_C_OnBlendOut_51E0283846B84EF1D5A1089E527759EB");
static_assert(sizeof(Zombie_C_OnBlendOut_51E0283846B84EF1D5A1089E527759EB) == 0x000008, "Wrong size on Zombie_C_OnBlendOut_51E0283846B84EF1D5A1089E527759EB");
static_assert(offsetof(Zombie_C_OnBlendOut_51E0283846B84EF1D5A1089E527759EB, NotifyName) == 0x000000, "Member 'Zombie_C_OnBlendOut_51E0283846B84EF1D5A1089E527759EB::NotifyName' has a wrong offset!");

// Function Zombie.Zombie_C.OnBlendOut_588418C1439E8F322E510C896D6B1D47
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_OnBlendOut_588418C1439E8F322E510C896D6B1D47 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnBlendOut_588418C1439E8F322E510C896D6B1D47) == 0x000004, "Wrong alignment on Zombie_C_OnBlendOut_588418C1439E8F322E510C896D6B1D47");
static_assert(sizeof(Zombie_C_OnBlendOut_588418C1439E8F322E510C896D6B1D47) == 0x000008, "Wrong size on Zombie_C_OnBlendOut_588418C1439E8F322E510C896D6B1D47");
static_assert(offsetof(Zombie_C_OnBlendOut_588418C1439E8F322E510C896D6B1D47, NotifyName) == 0x000000, "Member 'Zombie_C_OnBlendOut_588418C1439E8F322E510C896D6B1D47::NotifyName' has a wrong offset!");

// Function Zombie.Zombie_C.OnCompleted_51E0283846B84EF1D5A1089E527759EB
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_OnCompleted_51E0283846B84EF1D5A1089E527759EB final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnCompleted_51E0283846B84EF1D5A1089E527759EB) == 0x000004, "Wrong alignment on Zombie_C_OnCompleted_51E0283846B84EF1D5A1089E527759EB");
static_assert(sizeof(Zombie_C_OnCompleted_51E0283846B84EF1D5A1089E527759EB) == 0x000008, "Wrong size on Zombie_C_OnCompleted_51E0283846B84EF1D5A1089E527759EB");
static_assert(offsetof(Zombie_C_OnCompleted_51E0283846B84EF1D5A1089E527759EB, NotifyName) == 0x000000, "Member 'Zombie_C_OnCompleted_51E0283846B84EF1D5A1089E527759EB::NotifyName' has a wrong offset!");

// Function Zombie.Zombie_C.OnCompleted_588418C1439E8F322E510C896D6B1D47
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_OnCompleted_588418C1439E8F322E510C896D6B1D47 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnCompleted_588418C1439E8F322E510C896D6B1D47) == 0x000004, "Wrong alignment on Zombie_C_OnCompleted_588418C1439E8F322E510C896D6B1D47");
static_assert(sizeof(Zombie_C_OnCompleted_588418C1439E8F322E510C896D6B1D47) == 0x000008, "Wrong size on Zombie_C_OnCompleted_588418C1439E8F322E510C896D6B1D47");
static_assert(offsetof(Zombie_C_OnCompleted_588418C1439E8F322E510C896D6B1D47, NotifyName) == 0x000000, "Member 'Zombie_C_OnCompleted_588418C1439E8F322E510C896D6B1D47::NotifyName' has a wrong offset!");

// Function Zombie.Zombie_C.OnFail_1E20234A4E4A5354DF248D943913FED2
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_OnFail_1E20234A4E4A5354DF248D943913FED2 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnFail_1E20234A4E4A5354DF248D943913FED2) == 0x000001, "Wrong alignment on Zombie_C_OnFail_1E20234A4E4A5354DF248D943913FED2");
static_assert(sizeof(Zombie_C_OnFail_1E20234A4E4A5354DF248D943913FED2) == 0x000001, "Wrong size on Zombie_C_OnFail_1E20234A4E4A5354DF248D943913FED2");
static_assert(offsetof(Zombie_C_OnFail_1E20234A4E4A5354DF248D943913FED2, MovementResult) == 0x000000, "Member 'Zombie_C_OnFail_1E20234A4E4A5354DF248D943913FED2::MovementResult' has a wrong offset!");

// Function Zombie.Zombie_C.OnInterrupted_51E0283846B84EF1D5A1089E527759EB
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_OnInterrupted_51E0283846B84EF1D5A1089E527759EB final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnInterrupted_51E0283846B84EF1D5A1089E527759EB) == 0x000004, "Wrong alignment on Zombie_C_OnInterrupted_51E0283846B84EF1D5A1089E527759EB");
static_assert(sizeof(Zombie_C_OnInterrupted_51E0283846B84EF1D5A1089E527759EB) == 0x000008, "Wrong size on Zombie_C_OnInterrupted_51E0283846B84EF1D5A1089E527759EB");
static_assert(offsetof(Zombie_C_OnInterrupted_51E0283846B84EF1D5A1089E527759EB, NotifyName) == 0x000000, "Member 'Zombie_C_OnInterrupted_51E0283846B84EF1D5A1089E527759EB::NotifyName' has a wrong offset!");

// Function Zombie.Zombie_C.OnInterrupted_588418C1439E8F322E510C896D6B1D47
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_OnInterrupted_588418C1439E8F322E510C896D6B1D47 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnInterrupted_588418C1439E8F322E510C896D6B1D47) == 0x000004, "Wrong alignment on Zombie_C_OnInterrupted_588418C1439E8F322E510C896D6B1D47");
static_assert(sizeof(Zombie_C_OnInterrupted_588418C1439E8F322E510C896D6B1D47) == 0x000008, "Wrong size on Zombie_C_OnInterrupted_588418C1439E8F322E510C896D6B1D47");
static_assert(offsetof(Zombie_C_OnInterrupted_588418C1439E8F322E510C896D6B1D47, NotifyName) == 0x000000, "Member 'Zombie_C_OnInterrupted_588418C1439E8F322E510C896D6B1D47::NotifyName' has a wrong offset!");

// Function Zombie.Zombie_C.OnNotifyBegin_51E0283846B84EF1D5A1089E527759EB
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_OnNotifyBegin_51E0283846B84EF1D5A1089E527759EB final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnNotifyBegin_51E0283846B84EF1D5A1089E527759EB) == 0x000004, "Wrong alignment on Zombie_C_OnNotifyBegin_51E0283846B84EF1D5A1089E527759EB");
static_assert(sizeof(Zombie_C_OnNotifyBegin_51E0283846B84EF1D5A1089E527759EB) == 0x000008, "Wrong size on Zombie_C_OnNotifyBegin_51E0283846B84EF1D5A1089E527759EB");
static_assert(offsetof(Zombie_C_OnNotifyBegin_51E0283846B84EF1D5A1089E527759EB, NotifyName) == 0x000000, "Member 'Zombie_C_OnNotifyBegin_51E0283846B84EF1D5A1089E527759EB::NotifyName' has a wrong offset!");

// Function Zombie.Zombie_C.OnNotifyBegin_588418C1439E8F322E510C896D6B1D47
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_OnNotifyBegin_588418C1439E8F322E510C896D6B1D47 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnNotifyBegin_588418C1439E8F322E510C896D6B1D47) == 0x000004, "Wrong alignment on Zombie_C_OnNotifyBegin_588418C1439E8F322E510C896D6B1D47");
static_assert(sizeof(Zombie_C_OnNotifyBegin_588418C1439E8F322E510C896D6B1D47) == 0x000008, "Wrong size on Zombie_C_OnNotifyBegin_588418C1439E8F322E510C896D6B1D47");
static_assert(offsetof(Zombie_C_OnNotifyBegin_588418C1439E8F322E510C896D6B1D47, NotifyName) == 0x000000, "Member 'Zombie_C_OnNotifyBegin_588418C1439E8F322E510C896D6B1D47::NotifyName' has a wrong offset!");

// Function Zombie.Zombie_C.OnNotifyEnd_51E0283846B84EF1D5A1089E527759EB
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_OnNotifyEnd_51E0283846B84EF1D5A1089E527759EB final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnNotifyEnd_51E0283846B84EF1D5A1089E527759EB) == 0x000004, "Wrong alignment on Zombie_C_OnNotifyEnd_51E0283846B84EF1D5A1089E527759EB");
static_assert(sizeof(Zombie_C_OnNotifyEnd_51E0283846B84EF1D5A1089E527759EB) == 0x000008, "Wrong size on Zombie_C_OnNotifyEnd_51E0283846B84EF1D5A1089E527759EB");
static_assert(offsetof(Zombie_C_OnNotifyEnd_51E0283846B84EF1D5A1089E527759EB, NotifyName) == 0x000000, "Member 'Zombie_C_OnNotifyEnd_51E0283846B84EF1D5A1089E527759EB::NotifyName' has a wrong offset!");

// Function Zombie.Zombie_C.OnNotifyEnd_588418C1439E8F322E510C896D6B1D47
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_OnNotifyEnd_588418C1439E8F322E510C896D6B1D47 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnNotifyEnd_588418C1439E8F322E510C896D6B1D47) == 0x000004, "Wrong alignment on Zombie_C_OnNotifyEnd_588418C1439E8F322E510C896D6B1D47");
static_assert(sizeof(Zombie_C_OnNotifyEnd_588418C1439E8F322E510C896D6B1D47) == 0x000008, "Wrong size on Zombie_C_OnNotifyEnd_588418C1439E8F322E510C896D6B1D47");
static_assert(offsetof(Zombie_C_OnNotifyEnd_588418C1439E8F322E510C896D6B1D47, NotifyName) == 0x000000, "Member 'Zombie_C_OnNotifyEnd_588418C1439E8F322E510C896D6B1D47::NotifyName' has a wrong offset!");

// Function Zombie.Zombie_C.OnPlayerDeath
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_OnPlayerDeath final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnPlayerDeath) == 0x000008, "Wrong alignment on Zombie_C_OnPlayerDeath");
static_assert(sizeof(Zombie_C_OnPlayerDeath) == 0x000008, "Wrong size on Zombie_C_OnPlayerDeath");
static_assert(offsetof(Zombie_C_OnPlayerDeath, PC) == 0x000000, "Member 'Zombie_C_OnPlayerDeath::PC' has a wrong offset!");

// Function Zombie.Zombie_C.OnRep_ZombieSkin
// 0x0028 (0x0028 - 0x0000)
struct Zombie_C_OnRep_ZombieSkin final
{
public:
	struct FSTR_ZombieSkin                        CallFunc_GetDataTableRowFromName_OutRow;           // 0x0000(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnRep_ZombieSkin) == 0x000008, "Wrong alignment on Zombie_C_OnRep_ZombieSkin");
static_assert(sizeof(Zombie_C_OnRep_ZombieSkin) == 0x000028, "Wrong size on Zombie_C_OnRep_ZombieSkin");
static_assert(offsetof(Zombie_C_OnRep_ZombieSkin, CallFunc_GetDataTableRowFromName_OutRow) == 0x000000, "Member 'Zombie_C_OnRep_ZombieSkin::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(Zombie_C_OnRep_ZombieSkin, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000020, "Member 'Zombie_C_OnRep_ZombieSkin::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function Zombie.Zombie_C.OnSuccess_1E20234A4E4A5354DF248D943913FED2
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_OnSuccess_1E20234A4E4A5354DF248D943913FED2 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnSuccess_1E20234A4E4A5354DF248D943913FED2) == 0x000001, "Wrong alignment on Zombie_C_OnSuccess_1E20234A4E4A5354DF248D943913FED2");
static_assert(sizeof(Zombie_C_OnSuccess_1E20234A4E4A5354DF248D943913FED2) == 0x000001, "Wrong size on Zombie_C_OnSuccess_1E20234A4E4A5354DF248D943913FED2");
static_assert(offsetof(Zombie_C_OnSuccess_1E20234A4E4A5354DF248D943913FED2, MovementResult) == 0x000000, "Member 'Zombie_C_OnSuccess_1E20234A4E4A5354DF248D943913FED2::MovementResult' has a wrong offset!");

// Function Zombie.Zombie_C.OnTrySelectTeam
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_OnTrySelectTeam final
{
public:
	E_Team                                        Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_OnTrySelectTeam) == 0x000001, "Wrong alignment on Zombie_C_OnTrySelectTeam");
static_assert(sizeof(Zombie_C_OnTrySelectTeam) == 0x000001, "Wrong size on Zombie_C_OnTrySelectTeam");
static_assert(offsetof(Zombie_C_OnTrySelectTeam, Team) == 0x000000, "Member 'Zombie_C_OnTrySelectTeam::Team' has a wrong offset!");

// Function Zombie.Zombie_C.PassTroughtWindows
// 0x0020 (0x0020 - 0x0000)
struct Zombie_C_PassTroughtWindows final
{
public:
	struct FVector                                DestLocation;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_PassTroughtWindows) == 0x000008, "Wrong alignment on Zombie_C_PassTroughtWindows");
static_assert(sizeof(Zombie_C_PassTroughtWindows) == 0x000020, "Wrong size on Zombie_C_PassTroughtWindows");
static_assert(offsetof(Zombie_C_PassTroughtWindows, DestLocation) == 0x000000, "Member 'Zombie_C_PassTroughtWindows::DestLocation' has a wrong offset!");
static_assert(offsetof(Zombie_C_PassTroughtWindows, Actor) == 0x000018, "Member 'Zombie_C_PassTroughtWindows::Actor' has a wrong offset!");

// Function Zombie.Zombie_C.Play Anim Montage (Multicast)
// 0x0010 (0x0010 - 0x0000)
struct Zombie_C_Play_Anim_Montage__Multicast_ final
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRate;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_Play_Anim_Montage__Multicast_) == 0x000008, "Wrong alignment on Zombie_C_Play_Anim_Montage__Multicast_");
static_assert(sizeof(Zombie_C_Play_Anim_Montage__Multicast_) == 0x000010, "Wrong size on Zombie_C_Play_Anim_Montage__Multicast_");
static_assert(offsetof(Zombie_C_Play_Anim_Montage__Multicast_, MontageToPlay) == 0x000000, "Member 'Zombie_C_Play_Anim_Montage__Multicast_::MontageToPlay' has a wrong offset!");
static_assert(offsetof(Zombie_C_Play_Anim_Montage__Multicast_, PlayRate) == 0x000008, "Member 'Zombie_C_Play_Anim_Montage__Multicast_::PlayRate' has a wrong offset!");

// Function Zombie.Zombie_C.RagdollUpdate
// 0x00F8 (0x00F8 - 0x0000)
struct Zombie_C_RagdollUpdate final
{
public:
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_2;          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_3;          // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FL_Vector_Multiply_Float_ReturnValue;     // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue_1;         // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue_1;       // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FL_Vector_Multiply_Float_ReturnValue_1;   // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_RagdollUpdate) == 0x000008, "Wrong alignment on Zombie_C_RagdollUpdate");
static_assert(sizeof(Zombie_C_RagdollUpdate) == 0x0000F8, "Wrong size on Zombie_C_RagdollUpdate");
static_assert(offsetof(Zombie_C_RagdollUpdate, CallFunc_GetSocketLocation_ReturnValue) == 0x000000, "Member 'Zombie_C_RagdollUpdate::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdate, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'Zombie_C_RagdollUpdate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdate, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000020, "Member 'Zombie_C_RagdollUpdate::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdate, CallFunc_FindLookAtRotation_ReturnValue) == 0x000038, "Member 'Zombie_C_RagdollUpdate::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdate, CallFunc_GetSocketLocation_ReturnValue_2) == 0x000050, "Member 'Zombie_C_RagdollUpdate::CallFunc_GetSocketLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdate, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000068, "Member 'Zombie_C_RagdollUpdate::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdate, CallFunc_GetSocketLocation_ReturnValue_3) == 0x000080, "Member 'Zombie_C_RagdollUpdate::CallFunc_GetSocketLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdate, CallFunc_FL_Vector_Multiply_Float_ReturnValue) == 0x000098, "Member 'Zombie_C_RagdollUpdate::CallFunc_FL_Vector_Multiply_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdate, CallFunc_FindLookAtRotation_ReturnValue_1) == 0x0000B0, "Member 'Zombie_C_RagdollUpdate::CallFunc_FindLookAtRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdate, CallFunc_Conv_RotatorToVector_ReturnValue_1) == 0x0000C8, "Member 'Zombie_C_RagdollUpdate::CallFunc_Conv_RotatorToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdate, CallFunc_FL_Vector_Multiply_Float_ReturnValue_1) == 0x0000E0, "Member 'Zombie_C_RagdollUpdate::CallFunc_FL_Vector_Multiply_Float_ReturnValue_1' has a wrong offset!");

// Function Zombie.Zombie_C.RagdollUpdateLocation
// 0x0488 (0x0488 - 0x0000)
struct Zombie_C_RagdollUpdateLocation final
{
public:
	struct FRotator                               TargetRagdollRotation;                             // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                TargetRagdollLocation;                             // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0030(0x0010)(ConstParm, ReferenceParm)
	double                                        CallFunc_BreakVector_X;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X_1;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetSocketRotation_ReturnValue;            // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00E8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E2[0x2];                                      // 0x01E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0250(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0258(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0260(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0288(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x02B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector_X_2;                          // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0338(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0350(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0368(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Option_0_ImplicitCast;               // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast_1;   // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_RagdollUpdateLocation) == 0x000008, "Wrong alignment on Zombie_C_RagdollUpdateLocation");
static_assert(sizeof(Zombie_C_RagdollUpdateLocation) == 0x000488, "Wrong size on Zombie_C_RagdollUpdateLocation");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, TargetRagdollRotation) == 0x000000, "Member 'Zombie_C_RagdollUpdateLocation::TargetRagdollRotation' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, TargetRagdollLocation) == 0x000018, "Member 'Zombie_C_RagdollUpdateLocation::TargetRagdollLocation' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, Temp_object_Variable) == 0x000030, "Member 'Zombie_C_RagdollUpdateLocation::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakVector_X) == 0x000040, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakVector_Y) == 0x000048, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakVector_Z) == 0x000050, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, Temp_bool_Variable) == 0x000058, "Member 'Zombie_C_RagdollUpdateLocation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakVector_X_1) == 0x000060, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakVector_Y_1) == 0x000068, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakVector_Z_1) == 0x000070, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000078, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_GetSocketRotation_ReturnValue) == 0x000090, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_GetSocketRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakRotator_Roll) == 0x0000A8, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakRotator_Pitch) == 0x0000AC, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakRotator_Yaw) == 0x0000B0, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x0000B4, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000C0, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_MakeVector_ReturnValue) == 0x0000D0, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_LineTraceSingle_OutHit) == 0x0000E8, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_LineTraceSingle_ReturnValue) == 0x0001D0, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, K2Node_Select_Default) == 0x0001D8, "Member 'Zombie_C_RagdollUpdateLocation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_bBlockingHit) == 0x0001E0, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001E1, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_Time) == 0x0001E4, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_Distance) == 0x0001E8, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_Location) == 0x0001F0, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_ImpactPoint) == 0x000208, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_Normal) == 0x000220, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_ImpactNormal) == 0x000238, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_PhysMat) == 0x000250, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_HitActor) == 0x000258, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_HitComponent) == 0x000260, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_HitBoneName) == 0x000268, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_BoneName) == 0x000270, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_HitItem) == 0x000278, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_ElementIndex) == 0x00027C, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_FaceIndex) == 0x000280, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_TraceStart) == 0x000288, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakHitResult_TraceEnd) == 0x0002A0, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_MakeRotator_ReturnValue) == 0x0002B8, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakVector_X_2) == 0x0002D0, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakVector_Y_2) == 0x0002D8, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakVector_Z_2) == 0x0002E0, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakVector_X_3) == 0x0002E8, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakVector_Y_3) == 0x0002F0, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_BreakVector_Z_3) == 0x0002F8, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000300, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000308, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_Abs_ReturnValue) == 0x000310, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x000318, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x000320, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000328, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000330, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_MakeVector_ReturnValue_1) == 0x000338, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_SelectVector_ReturnValue) == 0x000350, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000368, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000450, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000458, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000460, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, K2Node_Select_Option_0_ImplicitCast) == 0x000468, "Member 'Zombie_C_RagdollUpdateLocation::K2Node_Select_Option_0_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000470, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000478, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_RagdollUpdateLocation, CallFunc_Subtract_DoubleDouble_A_ImplicitCast_1) == 0x000480, "Member 'Zombie_C_RagdollUpdateLocation::CallFunc_Subtract_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");

// Function Zombie.Zombie_C.RandomSkin (Multicast)
// 0x0018 (0x0018 - 0x0000)
struct Zombie_C_RandomSkin__Multicast_ final
{
public:
	class USkeletalMesh*                          NewMesh;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             Materials_0;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(Zombie_C_RandomSkin__Multicast_) == 0x000008, "Wrong alignment on Zombie_C_RandomSkin__Multicast_");
static_assert(sizeof(Zombie_C_RandomSkin__Multicast_) == 0x000018, "Wrong size on Zombie_C_RandomSkin__Multicast_");
static_assert(offsetof(Zombie_C_RandomSkin__Multicast_, NewMesh) == 0x000000, "Member 'Zombie_C_RandomSkin__Multicast_::NewMesh' has a wrong offset!");
static_assert(offsetof(Zombie_C_RandomSkin__Multicast_, Materials_0) == 0x000008, "Member 'Zombie_C_RandomSkin__Multicast_::Materials_0' has a wrong offset!");

// Function Zombie.Zombie_C.ReceiveRadialDamage
// 0x0120 (0x0120 - 0x0000)
struct Zombie_C_ReceiveRadialDamage final
{
public:
	float                                         DamageReceived;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Origin;                                            // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitInfo;                                           // 0x0028(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AController*                            InstigatedBy;                                      // 0x0110(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_ReceiveRadialDamage) == 0x000008, "Wrong alignment on Zombie_C_ReceiveRadialDamage");
static_assert(sizeof(Zombie_C_ReceiveRadialDamage) == 0x000120, "Wrong size on Zombie_C_ReceiveRadialDamage");
static_assert(offsetof(Zombie_C_ReceiveRadialDamage, DamageReceived) == 0x000000, "Member 'Zombie_C_ReceiveRadialDamage::DamageReceived' has a wrong offset!");
static_assert(offsetof(Zombie_C_ReceiveRadialDamage, DamageType) == 0x000008, "Member 'Zombie_C_ReceiveRadialDamage::DamageType' has a wrong offset!");
static_assert(offsetof(Zombie_C_ReceiveRadialDamage, Origin) == 0x000010, "Member 'Zombie_C_ReceiveRadialDamage::Origin' has a wrong offset!");
static_assert(offsetof(Zombie_C_ReceiveRadialDamage, HitInfo) == 0x000028, "Member 'Zombie_C_ReceiveRadialDamage::HitInfo' has a wrong offset!");
static_assert(offsetof(Zombie_C_ReceiveRadialDamage, InstigatedBy) == 0x000110, "Member 'Zombie_C_ReceiveRadialDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(Zombie_C_ReceiveRadialDamage, DamageCauser) == 0x000118, "Member 'Zombie_C_ReceiveRadialDamage::DamageCauser' has a wrong offset!");

// Function Zombie.Zombie_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Zombie_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_ReceiveTick) == 0x000004, "Wrong alignment on Zombie_C_ReceiveTick");
static_assert(sizeof(Zombie_C_ReceiveTick) == 0x000004, "Wrong size on Zombie_C_ReceiveTick");
static_assert(offsetof(Zombie_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Zombie_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function Zombie.Zombie_C.ServerTravel
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_ServerTravel final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_ServerTravel) == 0x000008, "Wrong alignment on Zombie_C_ServerTravel");
static_assert(sizeof(Zombie_C_ServerTravel) == 0x000008, "Wrong size on Zombie_C_ServerTravel");
static_assert(offsetof(Zombie_C_ServerTravel, Delay) == 0x000000, "Member 'Zombie_C_ServerTravel::Delay' has a wrong offset!");

// Function Zombie.Zombie_C.Slomo
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_Slomo final
{
public:
	double                                        Slomo_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_Slomo) == 0x000008, "Wrong alignment on Zombie_C_Slomo");
static_assert(sizeof(Zombie_C_Slomo) == 0x000008, "Wrong size on Zombie_C_Slomo");
static_assert(offsetof(Zombie_C_Slomo, Slomo_0) == 0x000000, "Member 'Zombie_C_Slomo::Slomo_0' has a wrong offset!");

// Function Zombie.Zombie_C.SmoothCharacterRotation
// 0x0098 (0x0098 - 0x0000)
struct Zombie_C_SmoothCharacterRotation final
{
public:
	struct FRotator                               Target;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        TargetInterpSpeed_Const_;                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ActorInterpSpeed_Smooth_;                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_Constant_ReturnValue;           // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast;         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_Constant_DeltaTime_ImplicitCast; // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_InterpSpeed_ImplicitCast;       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_Constant_InterpSpeed_ImplicitCast; // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_SmoothCharacterRotation) == 0x000008, "Wrong alignment on Zombie_C_SmoothCharacterRotation");
static_assert(sizeof(Zombie_C_SmoothCharacterRotation) == 0x000098, "Wrong size on Zombie_C_SmoothCharacterRotation");
static_assert(offsetof(Zombie_C_SmoothCharacterRotation, Target) == 0x000000, "Member 'Zombie_C_SmoothCharacterRotation::Target' has a wrong offset!");
static_assert(offsetof(Zombie_C_SmoothCharacterRotation, TargetInterpSpeed_Const_) == 0x000018, "Member 'Zombie_C_SmoothCharacterRotation::TargetInterpSpeed_Const_' has a wrong offset!");
static_assert(offsetof(Zombie_C_SmoothCharacterRotation, ActorInterpSpeed_Smooth_) == 0x000020, "Member 'Zombie_C_SmoothCharacterRotation::ActorInterpSpeed_Smooth_' has a wrong offset!");
static_assert(offsetof(Zombie_C_SmoothCharacterRotation, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000028, "Member 'Zombie_C_SmoothCharacterRotation::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_SmoothCharacterRotation, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000030, "Member 'Zombie_C_SmoothCharacterRotation::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_SmoothCharacterRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000038, "Member 'Zombie_C_SmoothCharacterRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_SmoothCharacterRotation, CallFunc_RInterpTo_ReturnValue) == 0x000050, "Member 'Zombie_C_SmoothCharacterRotation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_SmoothCharacterRotation, CallFunc_RInterpTo_Constant_ReturnValue) == 0x000068, "Member 'Zombie_C_SmoothCharacterRotation::CallFunc_RInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_SmoothCharacterRotation, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000080, "Member 'Zombie_C_SmoothCharacterRotation::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_SmoothCharacterRotation, CallFunc_RInterpTo_DeltaTime_ImplicitCast) == 0x000084, "Member 'Zombie_C_SmoothCharacterRotation::CallFunc_RInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_SmoothCharacterRotation, CallFunc_RInterpTo_Constant_DeltaTime_ImplicitCast) == 0x000088, "Member 'Zombie_C_SmoothCharacterRotation::CallFunc_RInterpTo_Constant_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_SmoothCharacterRotation, CallFunc_RInterpTo_InterpSpeed_ImplicitCast) == 0x00008C, "Member 'Zombie_C_SmoothCharacterRotation::CallFunc_RInterpTo_InterpSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_SmoothCharacterRotation, CallFunc_RInterpTo_Constant_InterpSpeed_ImplicitCast) == 0x000090, "Member 'Zombie_C_SmoothCharacterRotation::CallFunc_RInterpTo_Constant_InterpSpeed_ImplicitCast' has a wrong offset!");

// Function Zombie.Zombie_C.Talk
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_Talk final
{
public:
	bool                                          IsTalking;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_Talk) == 0x000001, "Wrong alignment on Zombie_C_Talk");
static_assert(sizeof(Zombie_C_Talk) == 0x000001, "Wrong size on Zombie_C_Talk");
static_assert(offsetof(Zombie_C_Talk, IsTalking) == 0x000000, "Member 'Zombie_C_Talk::IsTalking' has a wrong offset!");

// Function Zombie.Zombie_C.Target Distance
// 0x0100 (0x0100 - 0x0000)
struct Zombie_C_Target_Distance final
{
public:
	TArray<class AActor*>                         PlayerAvailable;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<double>                                Distance;                                          // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MinOfFloatArray_IndexOfMinValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MinOfFloatArray_MinValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AALS_AnimMan_CharacterBP_C*>     CallFunc_GetAllActorsOfClass_OutActors;            // 0x0058(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AALS_AnimMan_CharacterBP_C*             CallFunc_Array_Get_Item_1;                         // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBodycam_Interface_C>  K2Node_DynamicCast_AsBodycam_Interface;            // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_Dead_;                             // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CallFunc_MinOfFloatArray_FloatArray_ImplicitCast;  // 0x00F0(0x0010)(ConstParm, ReferenceParm)
};
static_assert(alignof(Zombie_C_Target_Distance) == 0x000008, "Wrong alignment on Zombie_C_Target_Distance");
static_assert(sizeof(Zombie_C_Target_Distance) == 0x000100, "Wrong size on Zombie_C_Target_Distance");
static_assert(offsetof(Zombie_C_Target_Distance, PlayerAvailable) == 0x000000, "Member 'Zombie_C_Target_Distance::PlayerAvailable' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, Distance) == 0x000010, "Member 'Zombie_C_Target_Distance::Distance' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, Temp_int_Array_Index_Variable) == 0x000020, "Member 'Zombie_C_Target_Distance::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'Zombie_C_Target_Distance::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'Zombie_C_Target_Distance::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_MinOfFloatArray_IndexOfMinValue) == 0x00002C, "Member 'Zombie_C_Target_Distance::CallFunc_MinOfFloatArray_IndexOfMinValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_MinOfFloatArray_MinValue) == 0x000030, "Member 'Zombie_C_Target_Distance::CallFunc_MinOfFloatArray_MinValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_Array_Get_Item) == 0x000038, "Member 'Zombie_C_Target_Distance::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000040, "Member 'Zombie_C_Target_Distance::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_GetAllActorsOfClass_OutActors) == 0x000058, "Member 'Zombie_C_Target_Distance::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'Zombie_C_Target_Distance::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_Array_Get_Item_1) == 0x000070, "Member 'Zombie_C_Target_Distance::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'Zombie_C_Target_Distance::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, K2Node_DynamicCast_AsBodycam_Interface) == 0x000080, "Member 'Zombie_C_Target_Distance::K2Node_DynamicCast_AsBodycam_Interface' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'Zombie_C_Target_Distance::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_IsDead_Dead_) == 0x000091, "Member 'Zombie_C_Target_Distance::CallFunc_IsDead_Dead_' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_Array_AddUnique_ReturnValue) == 0x000094, "Member 'Zombie_C_Target_Distance::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000098, "Member 'Zombie_C_Target_Distance::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_BreakVector_X) == 0x0000B0, "Member 'Zombie_C_Target_Distance::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_BreakVector_Y) == 0x0000B8, "Member 'Zombie_C_Target_Distance::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_BreakVector_Z) == 0x0000C0, "Member 'Zombie_C_Target_Distance::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_MakeVector_ReturnValue) == 0x0000C8, "Member 'Zombie_C_Target_Distance::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_Vector_Distance_ReturnValue) == 0x0000E0, "Member 'Zombie_C_Target_Distance::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_Array_Add_ReturnValue) == 0x0000E8, "Member 'Zombie_C_Target_Distance::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_Target_Distance, CallFunc_MinOfFloatArray_FloatArray_ImplicitCast) == 0x0000F0, "Member 'Zombie_C_Target_Distance::CallFunc_MinOfFloatArray_FloatArray_ImplicitCast' has a wrong offset!");

// Function Zombie.Zombie_C.UpdateGamemode
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_UpdateGamemode final
{
public:
	EGameMode                                     GameMode;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_UpdateGamemode) == 0x000001, "Wrong alignment on Zombie_C_UpdateGamemode");
static_assert(sizeof(Zombie_C_UpdateGamemode) == 0x000001, "Wrong size on Zombie_C_UpdateGamemode");
static_assert(offsetof(Zombie_C_UpdateGamemode, GameMode) == 0x000000, "Member 'Zombie_C_UpdateGamemode::GameMode' has a wrong offset!");

// Function Zombie.Zombie_C.UpdateGroudedRotation
// 0x0128 (0x0128 - 0x0000)
struct Zombie_C_UpdateGroudedRotation final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnyMontagePlaying_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENetRole                                      CallFunc_GetLocalRole_ReturnValue;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxAcceleration_ReturnValue;           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_1;                // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVectorValue_InTime_ImplicitCast;       // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Current_ImplicitCast;           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxAcceleration_ImplicitCast;   // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast; // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_GroundFriction_ImplicitCast;    // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SmoothCharacterRotation_ActorInterpSpeed_Smooth__ImplicitCast; // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_UpdateGroudedRotation) == 0x000008, "Wrong alignment on Zombie_C_UpdateGroudedRotation");
static_assert(sizeof(Zombie_C_UpdateGroudedRotation) == 0x000128, "Wrong size on Zombie_C_UpdateGroudedRotation");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_IsAnyMontagePlaying_ReturnValue) == 0x000008, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_IsAnyMontagePlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000010, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_GetVelocity_ReturnValue) == 0x000018, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_GetLocalRole_ReturnValue) == 0x000030, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_GetLocalRole_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_VSize_ReturnValue) == 0x000038, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000040, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_MapRangeClamped_ReturnValue) == 0x000048, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000050, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_GetMaxAcceleration_ReturnValue) == 0x000058, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_GetMaxAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_GetVectorValue_ReturnValue) == 0x000060, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_FInterpTo_ReturnValue) == 0x000078, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_BreakVector_X) == 0x000080, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_BreakVector_Y) == 0x000088, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_BreakVector_Z) == 0x000090, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_GetVelocity_ReturnValue_1) == 0x000098, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_GetVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_VSize_ReturnValue_1) == 0x0000B0, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_GetFloatValue_ReturnValue) == 0x0000BC, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0000C0, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_BreakRotator_Roll) == 0x0000D8, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_BreakRotator_Pitch) == 0x0000DC, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_BreakRotator_Yaw) == 0x0000E0, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_MakeRotator_ReturnValue) == 0x0000E8, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000100, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_GetVectorValue_InTime_ImplicitCast) == 0x000104, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_GetVectorValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_FInterpTo_Current_ImplicitCast) == 0x000108, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_FInterpTo_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, K2Node_VariableSet_MaxAcceleration_ImplicitCast) == 0x000110, "Member 'Zombie_C_UpdateGroudedRotation::K2Node_VariableSet_MaxAcceleration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast) == 0x000114, "Member 'Zombie_C_UpdateGroudedRotation::K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, K2Node_VariableSet_GroundFriction_ImplicitCast) == 0x000118, "Member 'Zombie_C_UpdateGroudedRotation::K2Node_VariableSet_GroundFriction_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateGroudedRotation, CallFunc_SmoothCharacterRotation_ActorInterpSpeed_Smooth__ImplicitCast) == 0x000120, "Member 'Zombie_C_UpdateGroudedRotation::CallFunc_SmoothCharacterRotation_ActorInterpSpeed_Smooth__ImplicitCast' has a wrong offset!");

// Function Zombie.Zombie_C.UpdateKickVote
// 0x0048 (0x0048 - 0x0000)
struct Zombie_C_UpdateKickVote final
{
public:
	struct FSTR_PCInfo                            Target;                                            // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Yes_;                                              // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_UpdateKickVote) == 0x000008, "Wrong alignment on Zombie_C_UpdateKickVote");
static_assert(sizeof(Zombie_C_UpdateKickVote) == 0x000048, "Wrong size on Zombie_C_UpdateKickVote");
static_assert(offsetof(Zombie_C_UpdateKickVote, Target) == 0x000000, "Member 'Zombie_C_UpdateKickVote::Target' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateKickVote, Yes_) == 0x000040, "Member 'Zombie_C_UpdateKickVote::Yes_' has a wrong offset!");

// Function Zombie.Zombie_C.UpdateMapSelection
// 0x000C (0x000C - 0x0000)
struct Zombie_C_UpdateMapSelection final
{
public:
	class FName                                   Selected_Level_Name;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_UpdateMapSelection) == 0x000004, "Wrong alignment on Zombie_C_UpdateMapSelection");
static_assert(sizeof(Zombie_C_UpdateMapSelection) == 0x00000C, "Wrong size on Zombie_C_UpdateMapSelection");
static_assert(offsetof(Zombie_C_UpdateMapSelection, Selected_Level_Name) == 0x000000, "Member 'Zombie_C_UpdateMapSelection::Selected_Level_Name' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateMapSelection, Index_0) == 0x000008, "Member 'Zombie_C_UpdateMapSelection::Index_0' has a wrong offset!");

// Function Zombie.Zombie_C.UpdateScore
// 0x0008 (0x0008 - 0x0000)
struct Zombie_C_UpdateScore final
{
public:
	struct FSTR_Score                             Score;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_UpdateScore) == 0x000004, "Wrong alignment on Zombie_C_UpdateScore");
static_assert(sizeof(Zombie_C_UpdateScore) == 0x000008, "Wrong size on Zombie_C_UpdateScore");
static_assert(offsetof(Zombie_C_UpdateScore, Score) == 0x000000, "Member 'Zombie_C_UpdateScore::Score' has a wrong offset!");

// Function Zombie.Zombie_C.UpdateTeamIndex (PlayerKilled)
// 0x0010 (0x0010 - 0x0000)
struct Zombie_C_UpdateTeamIndex__PlayerKilled_ final
{
public:
	E_Team                                        Team_PlayerKilled_;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MilitaryIndex;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TerroristIndex;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Team                                        WiiningTeam;                                       // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_UpdateTeamIndex__PlayerKilled_) == 0x000004, "Wrong alignment on Zombie_C_UpdateTeamIndex__PlayerKilled_");
static_assert(sizeof(Zombie_C_UpdateTeamIndex__PlayerKilled_) == 0x000010, "Wrong size on Zombie_C_UpdateTeamIndex__PlayerKilled_");
static_assert(offsetof(Zombie_C_UpdateTeamIndex__PlayerKilled_, Team_PlayerKilled_) == 0x000000, "Member 'Zombie_C_UpdateTeamIndex__PlayerKilled_::Team_PlayerKilled_' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateTeamIndex__PlayerKilled_, MilitaryIndex) == 0x000004, "Member 'Zombie_C_UpdateTeamIndex__PlayerKilled_::MilitaryIndex' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateTeamIndex__PlayerKilled_, TerroristIndex) == 0x000008, "Member 'Zombie_C_UpdateTeamIndex__PlayerKilled_::TerroristIndex' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateTeamIndex__PlayerKilled_, WiiningTeam) == 0x00000C, "Member 'Zombie_C_UpdateTeamIndex__PlayerKilled_::WiiningTeam' has a wrong offset!");

// Function Zombie.Zombie_C.UpdateTeamXP
// 0x0001 (0x0001 - 0x0000)
struct Zombie_C_UpdateTeamXP final
{
public:
	bool                                          Win_;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_UpdateTeamXP) == 0x000001, "Wrong alignment on Zombie_C_UpdateTeamXP");
static_assert(sizeof(Zombie_C_UpdateTeamXP) == 0x000001, "Wrong size on Zombie_C_UpdateTeamXP");
static_assert(offsetof(Zombie_C_UpdateTeamXP, Win_) == 0x000000, "Member 'Zombie_C_UpdateTeamXP::Win_' has a wrong offset!");

// Function Zombie.Zombie_C.UpdateTimer
// 0x0020 (0x0020 - 0x0000)
struct Zombie_C_UpdateTimer final
{
public:
	double                                        TimeCount;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   NewParam;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(Zombie_C_UpdateTimer) == 0x000008, "Wrong alignment on Zombie_C_UpdateTimer");
static_assert(sizeof(Zombie_C_UpdateTimer) == 0x000020, "Wrong size on Zombie_C_UpdateTimer");
static_assert(offsetof(Zombie_C_UpdateTimer, TimeCount) == 0x000000, "Member 'Zombie_C_UpdateTimer::TimeCount' has a wrong offset!");
static_assert(offsetof(Zombie_C_UpdateTimer, NewParam) == 0x000008, "Member 'Zombie_C_UpdateTimer::NewParam' has a wrong offset!");

// Function Zombie.Zombie_C.UpdateWarning
// 0x0010 (0x0010 - 0x0000)
struct Zombie_C_UpdateWarning final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_C_UpdateWarning) == 0x000008, "Wrong alignment on Zombie_C_UpdateWarning");
static_assert(sizeof(Zombie_C_UpdateWarning) == 0x000010, "Wrong size on Zombie_C_UpdateWarning");
static_assert(offsetof(Zombie_C_UpdateWarning, String) == 0x000000, "Member 'Zombie_C_UpdateWarning::String' has a wrong offset!");

}

