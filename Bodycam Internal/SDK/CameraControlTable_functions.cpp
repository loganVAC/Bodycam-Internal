#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CameraControlTable

#include "Basic.hpp"

#include "CameraControlTable_classes.hpp"
#include "CameraControlTable_parameters.hpp"


namespace SDK
{

// Function CameraControlTable.CameraControlTable_C.CanInterract
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Interract_                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::CanInterract(bool* Interract_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "CanInterract");

	Params::CameraControlTable_C_CanInterract Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Interract_ != nullptr)
		*Interract_ = Parms.Interract_;
}


// Function CameraControlTable.CameraControlTable_C.CanPickup
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AALS_AnimMan_CharacterBP_C*       Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Pickup_                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::CanPickup(class AALS_AnimMan_CharacterBP_C* Player, bool* Pickup_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "CanPickup");

	Params::CameraControlTable_C_CanPickup Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (Pickup_ != nullptr)
		*Pickup_ = Parms.Pickup_;
}


// Function CameraControlTable.CameraControlTable_C.CanSwap?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsItemSwap_                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::CanSwap_(bool* IsItemSwap_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "CanSwap?");

	Params::CameraControlTable_C_CanSwap_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsItemSwap_ != nullptr)
		*IsItemSwap_ = Parms.IsItemSwap_;
}


// Function CameraControlTable.CameraControlTable_C.Drop
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::Drop(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "Drop");

	Params::CameraControlTable_C_Drop Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CameraControlTable.CameraControlTable_C.ExecuteUbergraph_CameraControlTable
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::ExecuteUbergraph_CameraControlTable(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "ExecuteUbergraph_CameraControlTable");

	Params::CameraControlTable_C_ExecuteUbergraph_CameraControlTable Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CameraControlTable.CameraControlTable_C.Exit
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ACameraControlTable_C::Exit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "Exit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CameraControlTable.CameraControlTable_C.GetItemPriority
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Priority                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::GetItemPriority(int32* Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "GetItemPriority");

	Params::CameraControlTable_C_GetItemPriority Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Priority != nullptr)
		*Priority = Parms.Priority;
}


// Function CameraControlTable.CameraControlTable_C.GetListOfPlayer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AALS_AnimMan_CharacterBP_C*>PlayersReturn                                          (Parm, OutParm)

void ACameraControlTable_C::GetListOfPlayer(TArray<class AALS_AnimMan_CharacterBP_C*>* PlayersReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "GetListOfPlayer");

	Params::CameraControlTable_C_GetListOfPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayersReturn != nullptr)
		*PlayersReturn = std::move(Parms.PlayersReturn);
}


// Function CameraControlTable.CameraControlTable_C.GetOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Offset                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::GetOffset(struct FTransform* Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "GetOffset");

	Params::CameraControlTable_C_GetOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Offset != nullptr)
		*Offset = std::move(Parms.Offset);
}


// Function CameraControlTable.CameraControlTable_C.GetOverlay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       Overlay                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::GetOverlay(EALS_OverlayState* Overlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "GetOverlay");

	Params::CameraControlTable_C_GetOverlay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Overlay != nullptr)
		*Overlay = Parms.Overlay;
}


// Function CameraControlTable.CameraControlTable_C.GetSocketToAttach
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketToAttach                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::GetSocketToAttach(class FName* SocketToAttach)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "GetSocketToAttach");

	Params::CameraControlTable_C_GetSocketToAttach Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SocketToAttach != nullptr)
		*SocketToAttach = Parms.SocketToAttach;
}


// Function CameraControlTable.CameraControlTable_C.Interract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::Interract(class APawn* Owner_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "Interract");

	Params::CameraControlTable_C_Interract Parms{};

	Parms.Owner_0 = Owner_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CameraControlTable.CameraControlTable_C.InterractDoor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Z_Angle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ResetDoor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::InterractDoor(double Z_Angle, bool ResetDoor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "InterractDoor");

	Params::CameraControlTable_C_InterractDoor Parms{};

	Parms.Z_Angle = Z_Angle;
	Parms.ResetDoor = ResetDoor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CameraControlTable.CameraControlTable_C.Interreact (Server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::Interreact__Server_(class APawn* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "Interreact (Server)");

	Params::CameraControlTable_C_Interreact__Server_ Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CameraControlTable.CameraControlTable_C.IsDefaultHandle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDefaultHandle_                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::IsDefaultHandle(bool* IsDefaultHandle_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "IsDefaultHandle");

	Params::CameraControlTable_C_IsDefaultHandle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDefaultHandle_ != nullptr)
		*IsDefaultHandle_ = Parms.IsDefaultHandle_;
}


// Function CameraControlTable.CameraControlTable_C.Item Focus
// (Public, BlueprintCallable, BlueprintEvent)

void ACameraControlTable_C::Item_Focus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "Item Focus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CameraControlTable.CameraControlTable_C.LeftClickEvent
// (Public, BlueprintCallable, BlueprintEvent)

void ACameraControlTable_C::LeftClickEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "LeftClickEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CameraControlTable.CameraControlTable_C.LeftClickReleaseEvent
// (Public, BlueprintCallable, BlueprintEvent)

void ACameraControlTable_C::LeftClickReleaseEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "LeftClickReleaseEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CameraControlTable.CameraControlTable_C.Pickup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AALS_AnimMan_CharacterBP_C*       Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::Pickup(class AALS_AnimMan_CharacterBP_C* Owner_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "Pickup");

	Params::CameraControlTable_C_Pickup Parms{};

	Parms.Owner_0 = Owner_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CameraControlTable.CameraControlTable_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ACameraControlTable_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CameraControlTable.CameraControlTable_C.SwitchAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     In                                                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Out                                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USoundCue*                        InSound                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USoundCue*                        OutSound                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::SwitchAnimation(class UAnimMontage** In, class UAnimMontage** Out, class USoundCue** InSound, class USoundCue** OutSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "SwitchAnimation");

	Params::CameraControlTable_C_SwitchAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (In != nullptr)
		*In = Parms.In;

	if (Out != nullptr)
		*Out = Parms.Out;

	if (InSound != nullptr)
		*InSound = Parms.InSound;

	if (OutSound != nullptr)
		*OutSound = Parms.OutSound;
}


// Function CameraControlTable.CameraControlTable_C.SwitchCamera
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::SwitchCamera(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "SwitchCamera");

	Params::CameraControlTable_C_SwitchCamera Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CameraControlTable.CameraControlTable_C.Update Nearest Camera to Player
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ACamera_C*                        Camera_0                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ACameraControlTable_C::Update_Nearest_Camera_to_Player(class APawn* Player, class ACamera_C** Camera_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "Update Nearest Camera to Player");

	Params::CameraControlTable_C_Update_Nearest_Camera_to_Player Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (Camera_0 != nullptr)
		*Camera_0 = Parms.Camera_0;
}


// Function CameraControlTable.CameraControlTable_C.UpdateTranistion (HUD)
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ACameraControlTable_C::UpdateTranistion__HUD_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraControlTable_C", "UpdateTranistion (HUD)");

	UObject::ProcessEvent(Func, nullptr);
}

}

