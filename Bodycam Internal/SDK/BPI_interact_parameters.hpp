#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_interact

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ALS_OverlayState_structs.hpp"


namespace SDK::Params
{

// Function BPI_interact.BPI_interact_C.CanInterract
// 0x0001 (0x0001 - 0x0000)
struct BPI_interact_C_CanInterract final
{
public:
	bool                                          Interract_;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_interact_C_CanInterract) == 0x000001, "Wrong alignment on BPI_interact_C_CanInterract");
static_assert(sizeof(BPI_interact_C_CanInterract) == 0x000001, "Wrong size on BPI_interact_C_CanInterract");
static_assert(offsetof(BPI_interact_C_CanInterract, Interract_) == 0x000000, "Member 'BPI_interact_C_CanInterract::Interract_' has a wrong offset!");

// Function BPI_interact.BPI_interact_C.CanPickup
// 0x0010 (0x0010 - 0x0000)
struct BPI_interact_C_CanPickup final
{
public:
	class AALS_AnimMan_CharacterBP_C*             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Pickup_;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_interact_C_CanPickup) == 0x000008, "Wrong alignment on BPI_interact_C_CanPickup");
static_assert(sizeof(BPI_interact_C_CanPickup) == 0x000010, "Wrong size on BPI_interact_C_CanPickup");
static_assert(offsetof(BPI_interact_C_CanPickup, Player) == 0x000000, "Member 'BPI_interact_C_CanPickup::Player' has a wrong offset!");
static_assert(offsetof(BPI_interact_C_CanPickup, Pickup_) == 0x000008, "Member 'BPI_interact_C_CanPickup::Pickup_' has a wrong offset!");

// Function BPI_interact.BPI_interact_C.CanSwap?
// 0x0001 (0x0001 - 0x0000)
struct BPI_interact_C_CanSwap_ final
{
public:
	bool                                          IsItemSwap_;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_interact_C_CanSwap_) == 0x000001, "Wrong alignment on BPI_interact_C_CanSwap_");
static_assert(sizeof(BPI_interact_C_CanSwap_) == 0x000001, "Wrong size on BPI_interact_C_CanSwap_");
static_assert(offsetof(BPI_interact_C_CanSwap_, IsItemSwap_) == 0x000000, "Member 'BPI_interact_C_CanSwap_::IsItemSwap_' has a wrong offset!");

// Function BPI_interact.BPI_interact_C.Drop
// 0x0008 (0x0008 - 0x0000)
struct BPI_interact_C_Drop final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_interact_C_Drop) == 0x000008, "Wrong alignment on BPI_interact_C_Drop");
static_assert(sizeof(BPI_interact_C_Drop) == 0x000008, "Wrong size on BPI_interact_C_Drop");
static_assert(offsetof(BPI_interact_C_Drop, Delay) == 0x000000, "Member 'BPI_interact_C_Drop::Delay' has a wrong offset!");

// Function BPI_interact.BPI_interact_C.GetItemPriority
// 0x0004 (0x0004 - 0x0000)
struct BPI_interact_C_GetItemPriority final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_interact_C_GetItemPriority) == 0x000004, "Wrong alignment on BPI_interact_C_GetItemPriority");
static_assert(sizeof(BPI_interact_C_GetItemPriority) == 0x000004, "Wrong size on BPI_interact_C_GetItemPriority");
static_assert(offsetof(BPI_interact_C_GetItemPriority, Priority) == 0x000000, "Member 'BPI_interact_C_GetItemPriority::Priority' has a wrong offset!");

// Function BPI_interact.BPI_interact_C.GetOffset
// 0x0060 (0x0060 - 0x0000)
struct BPI_interact_C_GetOffset final
{
public:
	struct FTransform                             Offset;                                            // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_interact_C_GetOffset) == 0x000010, "Wrong alignment on BPI_interact_C_GetOffset");
static_assert(sizeof(BPI_interact_C_GetOffset) == 0x000060, "Wrong size on BPI_interact_C_GetOffset");
static_assert(offsetof(BPI_interact_C_GetOffset, Offset) == 0x000000, "Member 'BPI_interact_C_GetOffset::Offset' has a wrong offset!");

// Function BPI_interact.BPI_interact_C.GetOverlay
// 0x0001 (0x0001 - 0x0000)
struct BPI_interact_C_GetOverlay final
{
public:
	EALS_OverlayState                             Overlay;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_interact_C_GetOverlay) == 0x000001, "Wrong alignment on BPI_interact_C_GetOverlay");
static_assert(sizeof(BPI_interact_C_GetOverlay) == 0x000001, "Wrong size on BPI_interact_C_GetOverlay");
static_assert(offsetof(BPI_interact_C_GetOverlay, Overlay) == 0x000000, "Member 'BPI_interact_C_GetOverlay::Overlay' has a wrong offset!");

// Function BPI_interact.BPI_interact_C.GetSocketToAttach
// 0x0008 (0x0008 - 0x0000)
struct BPI_interact_C_GetSocketToAttach final
{
public:
	class FName                                   SocketToAttach;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_interact_C_GetSocketToAttach) == 0x000004, "Wrong alignment on BPI_interact_C_GetSocketToAttach");
static_assert(sizeof(BPI_interact_C_GetSocketToAttach) == 0x000008, "Wrong size on BPI_interact_C_GetSocketToAttach");
static_assert(offsetof(BPI_interact_C_GetSocketToAttach, SocketToAttach) == 0x000000, "Member 'BPI_interact_C_GetSocketToAttach::SocketToAttach' has a wrong offset!");

// Function BPI_interact.BPI_interact_C.Interract
// 0x0008 (0x0008 - 0x0000)
struct BPI_interact_C_Interract final
{
public:
	class APawn*                                  Owner;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_interact_C_Interract) == 0x000008, "Wrong alignment on BPI_interact_C_Interract");
static_assert(sizeof(BPI_interact_C_Interract) == 0x000008, "Wrong size on BPI_interact_C_Interract");
static_assert(offsetof(BPI_interact_C_Interract, Owner) == 0x000000, "Member 'BPI_interact_C_Interract::Owner' has a wrong offset!");

// Function BPI_interact.BPI_interact_C.InterractDoor
// 0x0010 (0x0010 - 0x0000)
struct BPI_interact_C_InterractDoor final
{
public:
	double                                        Z_Angle;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResetDoor;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_interact_C_InterractDoor) == 0x000008, "Wrong alignment on BPI_interact_C_InterractDoor");
static_assert(sizeof(BPI_interact_C_InterractDoor) == 0x000010, "Wrong size on BPI_interact_C_InterractDoor");
static_assert(offsetof(BPI_interact_C_InterractDoor, Z_Angle) == 0x000000, "Member 'BPI_interact_C_InterractDoor::Z_Angle' has a wrong offset!");
static_assert(offsetof(BPI_interact_C_InterractDoor, ResetDoor) == 0x000008, "Member 'BPI_interact_C_InterractDoor::ResetDoor' has a wrong offset!");

// Function BPI_interact.BPI_interact_C.IsDefaultHandle
// 0x0001 (0x0001 - 0x0000)
struct BPI_interact_C_IsDefaultHandle final
{
public:
	bool                                          IsDefaultHandle_;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_interact_C_IsDefaultHandle) == 0x000001, "Wrong alignment on BPI_interact_C_IsDefaultHandle");
static_assert(sizeof(BPI_interact_C_IsDefaultHandle) == 0x000001, "Wrong size on BPI_interact_C_IsDefaultHandle");
static_assert(offsetof(BPI_interact_C_IsDefaultHandle, IsDefaultHandle_) == 0x000000, "Member 'BPI_interact_C_IsDefaultHandle::IsDefaultHandle_' has a wrong offset!");

// Function BPI_interact.BPI_interact_C.Pickup
// 0x0008 (0x0008 - 0x0000)
struct BPI_interact_C_Pickup final
{
public:
	class AALS_AnimMan_CharacterBP_C*             Owner;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_interact_C_Pickup) == 0x000008, "Wrong alignment on BPI_interact_C_Pickup");
static_assert(sizeof(BPI_interact_C_Pickup) == 0x000008, "Wrong size on BPI_interact_C_Pickup");
static_assert(offsetof(BPI_interact_C_Pickup, Owner) == 0x000000, "Member 'BPI_interact_C_Pickup::Owner' has a wrong offset!");

// Function BPI_interact.BPI_interact_C.SwitchAnimation
// 0x0020 (0x0020 - 0x0000)
struct BPI_interact_C_SwitchAnimation final
{
public:
	class UAnimMontage*                           In;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Out;                                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              InSound;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              OutSound;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_interact_C_SwitchAnimation) == 0x000008, "Wrong alignment on BPI_interact_C_SwitchAnimation");
static_assert(sizeof(BPI_interact_C_SwitchAnimation) == 0x000020, "Wrong size on BPI_interact_C_SwitchAnimation");
static_assert(offsetof(BPI_interact_C_SwitchAnimation, In) == 0x000000, "Member 'BPI_interact_C_SwitchAnimation::In' has a wrong offset!");
static_assert(offsetof(BPI_interact_C_SwitchAnimation, Out) == 0x000008, "Member 'BPI_interact_C_SwitchAnimation::Out' has a wrong offset!");
static_assert(offsetof(BPI_interact_C_SwitchAnimation, InSound) == 0x000010, "Member 'BPI_interact_C_SwitchAnimation::InSound' has a wrong offset!");
static_assert(offsetof(BPI_interact_C_SwitchAnimation, OutSound) == 0x000018, "Member 'BPI_interact_C_SwitchAnimation::OutSound' has a wrong offset!");

}

