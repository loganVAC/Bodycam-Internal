#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Weather_Mask_Projection_Box

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "UDS_DLWE_Mode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Weather_Mask_Projection_Box.Weather_Mask_Projection_Box_C
// 0x00F0 (0x0380 - 0x0290)
class AWeather_Mask_Projection_Box_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Box_Extent;                                        // 0x02B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Depth_Render_Target;                               // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        _Dust;                                             // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Mask_Wetness;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Blur_Radius;                                       // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Brush_MID;                                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Brush_Location;                                    // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Brush_Scale;                                       // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Center_Location;                                   // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      Corners;                                           // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Max_Distance;                                      // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Yaw;                                               // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_;                                             // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Blur_Slope__Wetness_;                              // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Capture_Pixel_Size;                                // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Exclude_Actors_from_Occlusion;                     // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	double                                        Top_Height;                                        // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Capture_Ready;                                     // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AUltra_Dynamic_Weather_C*               UDW;                                               // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Weather_Mask_Projection_Box(int32 EntryPoint);
	void Force_Update();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Recycle_Render_Target();
	void Test_Point_Occlusion(const struct FVector& Location, EUDS_DLWE_Mode Mode, bool* In_Volume, double* Occlusion);
	void Update_Capture();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Weather_Mask_Projection_Box_C">();
	}
	static class AWeather_Mask_Projection_Box_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWeather_Mask_Projection_Box_C>();
	}
};
static_assert(alignof(AWeather_Mask_Projection_Box_C) == 0x000008, "Wrong alignment on AWeather_Mask_Projection_Box_C");
static_assert(sizeof(AWeather_Mask_Projection_Box_C) == 0x000380, "Wrong size on AWeather_Mask_Projection_Box_C");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, UberGraphFrame) == 0x000290, "Member 'AWeather_Mask_Projection_Box_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Billboard) == 0x000298, "Member 'AWeather_Mask_Projection_Box_C::Billboard' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, SceneCaptureComponent2D) == 0x0002A0, "Member 'AWeather_Mask_Projection_Box_C::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Box) == 0x0002A8, "Member 'AWeather_Mask_Projection_Box_C::Box' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Box_Extent) == 0x0002B0, "Member 'AWeather_Mask_Projection_Box_C::Box_Extent' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Depth_Render_Target) == 0x0002C8, "Member 'AWeather_Mask_Projection_Box_C::Depth_Render_Target' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, _Dust) == 0x0002D0, "Member 'AWeather_Mask_Projection_Box_C::_Dust' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Mask_Wetness) == 0x0002D8, "Member 'AWeather_Mask_Projection_Box_C::Mask_Wetness' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Blur_Radius) == 0x0002E0, "Member 'AWeather_Mask_Projection_Box_C::Blur_Radius' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Brush_MID) == 0x0002E8, "Member 'AWeather_Mask_Projection_Box_C::Brush_MID' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Brush_Location) == 0x0002F0, "Member 'AWeather_Mask_Projection_Box_C::Brush_Location' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Brush_Scale) == 0x000300, "Member 'AWeather_Mask_Projection_Box_C::Brush_Scale' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Center_Location) == 0x000310, "Member 'AWeather_Mask_Projection_Box_C::Center_Location' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Corners) == 0x000320, "Member 'AWeather_Mask_Projection_Box_C::Corners' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Max_Distance) == 0x000330, "Member 'AWeather_Mask_Projection_Box_C::Max_Distance' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Yaw) == 0x000338, "Member 'AWeather_Mask_Projection_Box_C::Yaw' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Dust_) == 0x000340, "Member 'AWeather_Mask_Projection_Box_C::Dust_' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Blur_Slope__Wetness_) == 0x000348, "Member 'AWeather_Mask_Projection_Box_C::Blur_Slope__Wetness_' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Capture_Pixel_Size) == 0x000350, "Member 'AWeather_Mask_Projection_Box_C::Capture_Pixel_Size' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Exclude_Actors_from_Occlusion) == 0x000358, "Member 'AWeather_Mask_Projection_Box_C::Exclude_Actors_from_Occlusion' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Top_Height) == 0x000368, "Member 'AWeather_Mask_Projection_Box_C::Top_Height' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, Capture_Ready) == 0x000370, "Member 'AWeather_Mask_Projection_Box_C::Capture_Ready' has a wrong offset!");
static_assert(offsetof(AWeather_Mask_Projection_Box_C, UDW) == 0x000378, "Member 'AWeather_Mask_Projection_Box_C::UDW' has a wrong offset!");

}

