#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_Base_CharacterBP

#include "Basic.hpp"

#include "ALS_Base_CharacterBP_classes.hpp"
#include "ALS_Base_CharacterBP_parameters.hpp"


namespace SDK
{

// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.AddToCharacterRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         DeltaRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AALS_Base_CharacterBP_C::AddToCharacterRotation(const struct FRotator& DeltaRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "AddToCharacterRotation");

	Params::ALS_Base_CharacterBP_C_AddToCharacterRotation Parms{};

	Parms.DeltaRotation = std::move(DeltaRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.ApplyPointDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RagdollForce                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ShotFromDirection                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerController*                KillerPC                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    DisableHeadShot                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::ApplyPointDamage(double Damage, double RagdollForce, class FName BoneName, const struct FVector& Location, const struct FVector& ShotFromDirection, class APlayerController* KillerPC, bool DisableHeadShot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "ApplyPointDamage");

	Params::ALS_Base_CharacterBP_C_ApplyPointDamage Parms{};

	Parms.Damage = Damage;
	Parms.RagdollForce = RagdollForce;
	Parms.BoneName = BoneName;
	Parms.Location = std::move(Location);
	Parms.ShotFromDirection = std::move(ShotFromDirection);
	Parms.KillerPC = KillerPC;
	Parms.DisableHeadShot = DisableHeadShot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AALS_Base_CharacterBP_C::BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");

	Params::ALS_Base_CharacterBP_C_BndEvt__ALS_Base_CharacterBP_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Death
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::BPI_Death()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Death");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Get_3P_PivotTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform AALS_Base_CharacterBP_C::BPI_Get_3P_PivotTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Get_3P_PivotTarget");

	Params::ALS_Base_CharacterBP_C_BPI_Get_3P_PivotTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Get_3P_TraceParams
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TraceOrigin                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TraceRadius                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         TraceChannel                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Get_3P_TraceParams(struct FVector* TraceOrigin, double* TraceRadius, ETraceTypeQuery* TraceChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Get_3P_TraceParams");

	Params::ALS_Base_CharacterBP_C_BPI_Get_3P_TraceParams Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TraceOrigin != nullptr)
		*TraceOrigin = std::move(Parms.TraceOrigin);

	if (TraceRadius != nullptr)
		*TraceRadius = Parms.TraceRadius;

	if (TraceChannel != nullptr)
		*TraceChannel = Parms.TraceChannel;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Get_CameraParameters
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TP_FOV                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  FP_FOV                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RightShoulder_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Get_CameraParameters(double* TP_FOV, double* FP_FOV, bool* RightShoulder_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Get_CameraParameters");

	Params::ALS_Base_CharacterBP_C_BPI_Get_CameraParameters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TP_FOV != nullptr)
		*TP_FOV = Parms.TP_FOV;

	if (FP_FOV != nullptr)
		*FP_FOV = Parms.FP_FOV;

	if (RightShoulder_0 != nullptr)
		*RightShoulder_0 = Parms.RightShoulder_0;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Get_CurrentStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           PawnMovementMode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementState                      MovementState_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementState                      PrevMovementState_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementAction                     MovementAction_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_RotationMode                       RotationMode_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Gait                               ActualGait                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Stance                             ActualStance                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_ViewMode                           ViewMode_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_OverlayState                       OverlayState_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_OverlayState                       OverlayState__Client_                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* MovementState_0, EALS_MovementState* PrevMovementState_0, EALS_MovementAction* MovementAction_0, EALS_RotationMode* RotationMode_0, EALS_Gait* ActualGait, EALS_Stance* ActualStance, EALS_ViewMode* ViewMode_0, EALS_OverlayState* OverlayState_0, EALS_OverlayState* OverlayState__Client_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Get_CurrentStates");

	Params::ALS_Base_CharacterBP_C_BPI_Get_CurrentStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PawnMovementMode != nullptr)
		*PawnMovementMode = Parms.PawnMovementMode;

	if (MovementState_0 != nullptr)
		*MovementState_0 = Parms.MovementState_0;

	if (PrevMovementState_0 != nullptr)
		*PrevMovementState_0 = Parms.PrevMovementState_0;

	if (MovementAction_0 != nullptr)
		*MovementAction_0 = Parms.MovementAction_0;

	if (RotationMode_0 != nullptr)
		*RotationMode_0 = Parms.RotationMode_0;

	if (ActualGait != nullptr)
		*ActualGait = Parms.ActualGait;

	if (ActualStance != nullptr)
		*ActualStance = Parms.ActualStance;

	if (ViewMode_0 != nullptr)
		*ViewMode_0 = Parms.ViewMode_0;

	if (OverlayState_0 != nullptr)
		*OverlayState_0 = Parms.OverlayState_0;

	if (OverlayState__Client_ != nullptr)
		*OverlayState__Client_ = Parms.OverlayState__Client_;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Get_EssentialValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Acceleration_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MovementInput                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMoving_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasMovementInput_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MovementInputAmount_0                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         AimingRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  AimYawRate_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Acceleration_0, struct FVector* MovementInput, bool* IsMoving_0, bool* HasMovementInput_0, double* Speed_0, double* MovementInputAmount_0, struct FRotator* AimingRotation, double* AimYawRate_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Get_EssentialValues");

	Params::ALS_Base_CharacterBP_C_BPI_Get_EssentialValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (Acceleration_0 != nullptr)
		*Acceleration_0 = std::move(Parms.Acceleration_0);

	if (MovementInput != nullptr)
		*MovementInput = std::move(Parms.MovementInput);

	if (IsMoving_0 != nullptr)
		*IsMoving_0 = Parms.IsMoving_0;

	if (HasMovementInput_0 != nullptr)
		*HasMovementInput_0 = Parms.HasMovementInput_0;

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (MovementInputAmount_0 != nullptr)
		*MovementInputAmount_0 = Parms.MovementInputAmount_0;

	if (AimingRotation != nullptr)
		*AimingRotation = std::move(Parms.AimingRotation);

	if (AimYawRate_0 != nullptr)
		*AimYawRate_0 = Parms.AimYawRate_0;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Get_FP_CameraTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AALS_Base_CharacterBP_C::BPI_Get_FP_CameraTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Get_FP_CameraTarget");

	Params::ALS_Base_CharacterBP_C_BPI_Get_FP_CameraTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Set_Gait
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               NewGait                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Set_Gait(EALS_Gait NewGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Set_Gait");

	Params::ALS_Base_CharacterBP_C_BPI_Set_Gait Parms{};

	Parms.NewGait = NewGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Set_MovementAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementAction                     NewMovementAction                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Set_MovementAction(EALS_MovementAction NewMovementAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Set_MovementAction");

	Params::ALS_Base_CharacterBP_C_BPI_Set_MovementAction Parms{};

	Parms.NewMovementAction = NewMovementAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Set_MovementState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementState                      NewMovementState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Set_MovementState(EALS_MovementState NewMovementState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Set_MovementState");

	Params::ALS_Base_CharacterBP_C_BPI_Set_MovementState Parms{};

	Parms.NewMovementState = NewMovementState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Set_OverlayState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       NewOverlayState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Set_OverlayState(EALS_OverlayState NewOverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Set_OverlayState");

	Params::ALS_Base_CharacterBP_C_BPI_Set_OverlayState Parms{};

	Parms.NewOverlayState = NewOverlayState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Set_RotationMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_RotationMode                       NewRotationMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Set_RotationMode(EALS_RotationMode NewRotationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Set_RotationMode");

	Params::ALS_Base_CharacterBP_C_BPI_Set_RotationMode Parms{};

	Parms.NewRotationMode = NewRotationMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Set_ViewMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_ViewMode                           NewViewMode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Set_ViewMode(EALS_ViewMode NewViewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Set_ViewMode");

	Params::ALS_Base_CharacterBP_C_BPI_Set_ViewMode Parms{};

	Parms.NewViewMode = NewViewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Breakfall Event
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Breakfall_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Breakfall Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.CacheValues
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::CacheValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "CacheValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.CalculateAcceleration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AALS_Base_CharacterBP_C::CalculateAcceleration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "CalculateAcceleration");

	Params::ALS_Base_CharacterBP_C_CalculateAcceleration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.CalculateGroundedRotationRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AALS_Base_CharacterBP_C::CalculateGroundedRotationRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "CalculateGroundedRotationRate");

	Params::ALS_Base_CharacterBP_C_CalculateGroundedRotationRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.CanSprint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CanSprint_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::CanSprint(bool* CanSprint_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "CanSprint");

	Params::ALS_Base_CharacterBP_C_CanSprint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanSprint_0 != nullptr)
		*CanSprint_0 = Parms.CanSprint_0;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.CanUpdateMovingRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AALS_Base_CharacterBP_C::CanUpdateMovingRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "CanUpdateMovingRotation");

	Params::ALS_Base_CharacterBP_C_CanUpdateMovingRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.CapsuleHasRoomCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCapsuleComponent*                Capsule                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  HeightOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RadiusOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDrawDebugTrace                         DebugType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasRoom                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::CapsuleHasRoomCheck(class UCapsuleComponent* Capsule, const struct FVector& TargetLocation, double HeightOffset, double RadiusOffset, EDrawDebugTrace DebugType, bool* HasRoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "CapsuleHasRoomCheck");

	Params::ALS_Base_CharacterBP_C_CapsuleHasRoomCheck Parms{};

	Parms.Capsule = Capsule;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.HeightOffset = HeightOffset;
	Parms.RadiusOffset = RadiusOffset;
	Parms.DebugType = DebugType;

	UObject::ProcessEvent(Func, &Parms);

	if (HasRoom != nullptr)
		*HasRoom = Parms.HasRoom;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Client Breakfall
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Client_Breakfall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Client Breakfall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Client On Jumped
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Client_On_Jumped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Client On Jumped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Client Roll
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Client_Roll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Client Roll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.DrawDebugShapes
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::DrawDebugShapes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "DrawDebugShapes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.ExecuteUbergraph_ALS_Base_CharacterBP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::ExecuteUbergraph_ALS_Base_CharacterBP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "ExecuteUbergraph_ALS_Base_CharacterBP");

	Params::ALS_Base_CharacterBP_C_ExecuteUbergraph_ALS_Base_CharacterBP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.FixDiagonalGamepadValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Y_in                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  X_in                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Y_Out                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  X_Out                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::FixDiagonalGamepadValues(double Y_in, double X_in, double* Y_Out, double* X_Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "FixDiagonalGamepadValues");

	Params::ALS_Base_CharacterBP_C_FixDiagonalGamepadValues Parms{};

	Parms.Y_in = Y_in;
	Parms.X_in = X_in;

	UObject::ProcessEvent(Func, &Parms);

	if (Y_Out != nullptr)
		*Y_Out = Parms.Y_Out;

	if (X_Out != nullptr)
		*X_Out = Parms.X_Out;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C. Right Vector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ForwardVector                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          RightVector                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::_Right_Vector(struct FVector* ForwardVector, struct FVector* RightVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", " Right Vector");

	Params::ALS_Base_CharacterBP_C__Right_Vector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ForwardVector != nullptr)
		*ForwardVector = std::move(Parms.ForwardVector);

	if (RightVector != nullptr)
		*RightVector = std::move(Parms.RightVector);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Get Player Movement Input
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AALS_Base_CharacterBP_C::Get_Player_Movement_Input()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Get Player Movement Input");

	Params::ALS_Base_CharacterBP_C_Get_Player_Movement_Input Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetActorComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSubclassOf<class UActorComponent>      ComponentClass                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UActorComponent*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UActorComponent* AALS_Base_CharacterBP_C::GetActorComponent(TSubclassOf<class UActorComponent> ComponentClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetActorComponent");

	Params::ALS_Base_CharacterBP_C_GetActorComponent Parms{};

	Parms.ComponentClass = ComponentClass;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetActorComponents
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSubclassOf<class UActorComponent>      ComponentClass                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// TArray<class UActorComponent*>          ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference)

TArray<class UActorComponent*> AALS_Base_CharacterBP_C::GetActorComponents(TSubclassOf<class UActorComponent> ComponentClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetActorComponents");

	Params::ALS_Base_CharacterBP_C_GetActorComponents Parms{};

	Parms.ComponentClass = ComponentClass;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetActualGait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EALS_Gait                               AllowedGait                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Gait                               ActualGait                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::GetActualGait(EALS_Gait AllowedGait, EALS_Gait* ActualGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetActualGait");

	Params::ALS_Base_CharacterBP_C_GetActualGait Parms{};

	Parms.AllowedGait = AllowedGait;

	UObject::ProcessEvent(Func, &Parms);

	if (ActualGait != nullptr)
		*ActualGait = Parms.ActualGait;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetAllowedGait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EALS_Gait                               AllowedGait                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::GetAllowedGait(EALS_Gait* AllowedGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetAllowedGait");

	Params::ALS_Base_CharacterBP_C_GetAllowedGait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllowedGait != nullptr)
		*AllowedGait = Parms.AllowedGait;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetAnimCurveValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             CurveName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AALS_Base_CharacterBP_C::GetAnimCurveValue(class FName CurveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetAnimCurveValue");

	Params::ALS_Base_CharacterBP_C_GetAnimCurveValue Parms{};

	Parms.CurveName = CurveName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetCalpsuleBaseLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ZOffset                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AALS_Base_CharacterBP_C::GetCalpsuleBaseLocation(double ZOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetCalpsuleBaseLocation");

	Params::ALS_Base_CharacterBP_C_GetCalpsuleBaseLocation Parms{};

	Parms.ZOffset = ZOffset;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetCapsuleLocationFromBase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          BaseLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZOffset                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AALS_Base_CharacterBP_C::GetCapsuleLocationFromBase(const struct FVector& BaseLocation, double ZOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetCapsuleLocationFromBase");

	Params::ALS_Base_CharacterBP_C_GetCapsuleLocationFromBase Parms{};

	Parms.BaseLocation = std::move(BaseLocation);
	Parms.ZOffset = ZOffset;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetGetUpAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RagdollFaceUp_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UAnimMontage* AALS_Base_CharacterBP_C::GetGetUpAnimation(bool RagdollFaceUp_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetGetUpAnimation");

	Params::ALS_Base_CharacterBP_C_GetGetUpAnimation Parms{};

	Parms.RagdollFaceUp_0 = RagdollFaceUp_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetLastMovementInputRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator AALS_Base_CharacterBP_C::GetLastMovementInputRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetLastMovementInputRotation");

	Params::ALS_Base_CharacterBP_C_GetLastMovementInputRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetLastVelocityRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator AALS_Base_CharacterBP_C::GetLastVelocityRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetLastVelocityRotation");

	Params::ALS_Base_CharacterBP_C_GetLastVelocityRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetMantleAsset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EMantleType                             MantleType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMantle_Asset                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

struct FMantle_Asset AALS_Base_CharacterBP_C::GetMantleAsset(EMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetMantleAsset");

	Params::ALS_Base_CharacterBP_C_GetMantleAsset Parms{};

	Parms.MantleType = MantleType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetMappedSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AALS_Base_CharacterBP_C::GetMappedSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetMappedSpeed");

	Params::ALS_Base_CharacterBP_C_GetMappedSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetMovementInputAmount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AALS_Base_CharacterBP_C::GetMovementInputAmount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetMovementInputAmount");

	Params::ALS_Base_CharacterBP_C_GetMovementInputAmount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetRollAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UAnimMontage* AALS_Base_CharacterBP_C::GetRollAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetRollAnimation");

	Params::ALS_Base_CharacterBP_C_GetRollAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AALS_Base_CharacterBP_C::GetSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetSpeed");

	Params::ALS_Base_CharacterBP_C_GetSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetTargetMovementSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FMovementSettings                MovementSettings                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::GetTargetMovementSettings(struct FMovementSettings* MovementSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetTargetMovementSettings");

	Params::ALS_Base_CharacterBP_C_GetTargetMovementSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MovementSettings != nullptr)
		*MovementSettings = std::move(Parms.MovementSettings);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetTraceDebugType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EDrawDebugTrace                         ShowTraceType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDrawDebugTrace                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EDrawDebugTrace AALS_Base_CharacterBP_C::GetTraceDebugType(EDrawDebugTrace ShowTraceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetTraceDebugType");

	Params::ALS_Base_CharacterBP_C_GetTraceDebugType Parms{};

	Parms.ShowTraceType = ShowTraceType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.HasMovementInput?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AALS_Base_CharacterBP_C::HasMovementInput_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "HasMovementInput?");

	Params::ALS_Base_CharacterBP_C_HasMovementInput_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_8
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_8");

	Params::ALS_Base_CharacterBP_C_InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_8 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_0");

	Params::ALS_Base_CharacterBP_C_InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_0 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_1");

	Params::ALS_Base_CharacterBP_C_InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_1 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_IA_Jog_K2Node_EnhancedInputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_IA_Jog_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_IA_Jog_K2Node_EnhancedInputActionEvent_2");

	Params::ALS_Base_CharacterBP_C_InpActEvt_IA_Jog_K2Node_EnhancedInputActionEvent_2 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_IA_Jog_K2Node_EnhancedInputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_IA_Jog_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_IA_Jog_K2Node_EnhancedInputActionEvent_3");

	Params::ALS_Base_CharacterBP_C_InpActEvt_IA_Jog_K2Node_EnhancedInputActionEvent_3 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_6");

	Params::ALS_Base_CharacterBP_C_InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_6 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_7
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_7");

	Params::ALS_Base_CharacterBP_C_InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_7 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_9
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_9(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_9");

	Params::ALS_Base_CharacterBP_C_InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_9 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_4");

	Params::ALS_Base_CharacterBP_C_InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_4 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_5");

	Params::ALS_Base_CharacterBP_C_InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_5 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.IsMoving?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AALS_Base_CharacterBP_C::IsMoving_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "IsMoving?");

	Params::ALS_Base_CharacterBP_C_IsMoving_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.K2_OnEndCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "K2_OnEndCrouch");

	Params::ALS_Base_CharacterBP_C_K2_OnEndCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.K2_OnMovementModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "K2_OnMovementModeChanged");

	Params::ALS_Base_CharacterBP_C_K2_OnMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.K2_OnStartCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "K2_OnStartCrouch");

	Params::ALS_Base_CharacterBP_C_K2_OnStartCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.LimitRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AimYawMin                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AimYawMax                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::LimitRotation(double AimYawMin, double AimYawMax, double InterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "LimitRotation");

	Params::ALS_Base_CharacterBP_C_LimitRotation Parms{};

	Parms.AimYawMin = AimYawMin;
	Parms.AimYawMax = AimYawMax;
	Parms.InterpSpeed = InterpSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.MantleCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMantle_TraceSettings            Trace_Settings                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDrawDebugTrace                         DebugType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Vault                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::MantleCheck(const struct FMantle_TraceSettings& Trace_Settings, EDrawDebugTrace DebugType, bool* Vault)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "MantleCheck");

	Params::ALS_Base_CharacterBP_C_MantleCheck Parms{};

	Parms.Trace_Settings = std::move(Trace_Settings);
	Parms.DebugType = DebugType;

	UObject::ProcessEvent(Func, &Parms);

	if (Vault != nullptr)
		*Vault = Parms.Vault;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.MantleEnd
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::MantleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "MantleEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.MantleStart
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MantleHeight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FALS_ComponentAndTransform       MantleLedgeWS                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// EMantleType                             MantleType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::MantleStart(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "MantleStart");

	Params::ALS_Base_CharacterBP_C_MantleStart Parms{};

	Parms.MantleHeight = MantleHeight;
	Parms.MantleLedgeWS = std::move(MantleLedgeWS);
	Parms.MantleType = MantleType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.MantleTimeline__FinishedFunc
// (BlueprintEvent)

void AALS_Base_CharacterBP_C::MantleTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "MantleTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.MantleTimeline__UpdateFunc
// (BlueprintEvent)

void AALS_Base_CharacterBP_C::MantleTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "MantleTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.MantleUpdate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BlendIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::MantleUpdate(double BlendIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "MantleUpdate");

	Params::ALS_Base_CharacterBP_C_MantleUpdate Parms{};

	Parms.BlendIn = BlendIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Multicast Breakfall
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Multicast_Breakfall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Multicast Breakfall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Multicast Mantle
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MantleHeight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FALS_ComponentAndTransform       MantleLedgeWS                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// EMantleType                             MantleType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Multicast_Mantle(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Multicast Mantle");

	Params::ALS_Base_CharacterBP_C_Multicast_Mantle Parms{};

	Parms.MantleHeight = MantleHeight;
	Parms.MantleLedgeWS = std::move(MantleLedgeWS);
	Parms.MantleType = MantleType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Multicast On Jumped
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Multicast_On_Jumped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Multicast On Jumped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Multicast Ragdoll End
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Multicast_Ragdoll_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Multicast Ragdoll End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Multicast Ragdoll Start
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Multicast_Ragdoll_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Multicast Ragdoll Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Multicast Roll Event
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Multicast_Roll_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Multicast Roll Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.On Begin Play
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::On_Begin_Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "On Begin Play");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.On Character Movement Mode Changed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::On_Character_Movement_Mode_Changed(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "On Character Movement Mode Changed");

	Params::ALS_Base_CharacterBP_C_On_Character_Movement_Mode_Changed Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnGaitChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               NewActualGait                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnGaitChanged(EALS_Gait NewActualGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnGaitChanged");

	Params::ALS_Base_CharacterBP_C_OnGaitChanged Parms{};

	Parms.NewActualGait = NewActualGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnJumped
// (Event, Public, BlueprintEvent)

void AALS_Base_CharacterBP_C::OnJumped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnJumped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnLanded
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AALS_Base_CharacterBP_C::OnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnLanded");

	Params::ALS_Base_CharacterBP_C_OnLanded Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnMovementActionChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementAction                     NewMovementAction                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnMovementActionChanged(EALS_MovementAction NewMovementAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnMovementActionChanged");

	Params::ALS_Base_CharacterBP_C_OnMovementActionChanged Parms{};

	Parms.NewMovementAction = NewMovementAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnMovementStateChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementState                      NewMovementState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnMovementStateChanged(EALS_MovementState NewMovementState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnMovementStateChanged");

	Params::ALS_Base_CharacterBP_C_OnMovementStateChanged Parms{};

	Parms.NewMovementState = NewMovementState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnOverlayStateChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       NewOverlayState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnOverlayStateChanged(EALS_OverlayState NewOverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnOverlayStateChanged");

	Params::ALS_Base_CharacterBP_C_OnOverlayStateChanged Parms{};

	Parms.NewOverlayState = NewOverlayState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnRep_MovementAction
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::OnRep_MovementAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnRep_MovementAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnRep_MovementState
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::OnRep_MovementState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnRep_MovementState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnRep_OverlayState
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::OnRep_OverlayState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnRep_OverlayState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnRep_RotationMode
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::OnRep_RotationMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnRep_RotationMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnRep_ViewMode
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::OnRep_ViewMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnRep_ViewMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnRotationModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_RotationMode                       NewRotationMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnRotationModeChanged(EALS_RotationMode NewRotationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnRotationModeChanged");

	Params::ALS_Base_CharacterBP_C_OnRotationModeChanged Parms{};

	Parms.NewRotationMode = NewRotationMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnStanceChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Stance                             NewStance                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnStanceChanged(EALS_Stance NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnStanceChanged");

	Params::ALS_Base_CharacterBP_C_OnStanceChanged Parms{};

	Parms.NewStance = NewStance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnViewModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_ViewMode                           NewViewMode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnViewModeChanged(EALS_ViewMode NewViewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnViewModeChanged");

	Params::ALS_Base_CharacterBP_C_OnViewModeChanged Parms{};

	Parms.NewViewMode = NewViewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.PlayerMovementInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsForwardAxis                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Mouvement                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::PlayerMovementInput(bool IsForwardAxis, const struct FVector2D& Mouvement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "PlayerMovementInput");

	Params::ALS_Base_CharacterBP_C_PlayerMovementInput Parms{};

	Parms.IsForwardAxis = IsForwardAxis;
	Parms.Mouvement = std::move(Mouvement);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Ragdoll End (Replicated)
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Ragdoll_End__Replicated_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Ragdoll End (Replicated)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Ragdoll Start (Replicated)
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Ragdoll_Start__Replicated_(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Ragdoll Start (Replicated)");

	Params::ALS_Base_CharacterBP_C_Ragdoll_Start__Replicated_ Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.RagdollEnd
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::RagdollEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "RagdollEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.RagdollStart
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::RagdollStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "RagdollStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.RagdollUpdate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::RagdollUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "RagdollUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AALS_Base_CharacterBP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "ReceiveTick");

	Params::ALS_Base_CharacterBP_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Reset Death
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Reset_Death()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Reset Death");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Rinterp Control Rotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator AALS_Base_CharacterBP_C::Rinterp_Control_Rotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Rinterp Control Rotation");

	Params::ALS_Base_CharacterBP_C_Rinterp_Control_Rotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Roll Event
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Roll_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Roll Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Server Breakfall
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Server_Breakfall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Server Breakfall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Server Mantle
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MantleHeight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FALS_ComponentAndTransform       MantleLedgeWS                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// EMantleType                             MantleType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Server_Mantle(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Server Mantle");

	Params::ALS_Base_CharacterBP_C_Server_Mantle Parms{};

	Parms.MantleHeight = MantleHeight;
	Parms.MantleLedgeWS = std::move(MantleLedgeWS);
	Parms.MantleType = MantleType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Server Ragdoll End
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Server_Ragdoll_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Server Ragdoll End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Server Ragdoll Start
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Server_Ragdoll_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Server Ragdoll Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Server Roll Event
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Server_Roll_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Server Roll Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Server Set Desired Gait
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               DesiredGait_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Server_Set_Desired_Gait(EALS_Gait DesiredGait_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Server Set Desired Gait");

	Params::ALS_Base_CharacterBP_C_Server_Set_Desired_Gait Parms{};

	Parms.DesiredGait_0 = DesiredGait_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Server Set Gait
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               Gait_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Server_Set_Gait(EALS_Gait Gait_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Server Set Gait");

	Params::ALS_Base_CharacterBP_C_Server_Set_Gait Parms{};

	Parms.Gait_0 = Gait_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Server Set Movement Action
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementAction                     MovementAction_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Server_Set_Movement_Action(EALS_MovementAction MovementAction_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Server Set Movement Action");

	Params::ALS_Base_CharacterBP_C_Server_Set_Movement_Action Parms{};

	Parms.MovementAction_0 = MovementAction_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Server Set Movement State
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementState                      MovementState_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Server_Set_Movement_State(EALS_MovementState MovementState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Server Set Movement State");

	Params::ALS_Base_CharacterBP_C_Server_Set_Movement_State Parms{};

	Parms.MovementState_0 = MovementState_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Server Set Overlay State
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       OverlayState_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Server_Set_Overlay_State(EALS_OverlayState OverlayState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Server Set Overlay State");

	Params::ALS_Base_CharacterBP_C_Server_Set_Overlay_State Parms{};

	Parms.OverlayState_0 = OverlayState_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Server Set Rotation Mode
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_RotationMode                       RotationMode_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Server_Set_Rotation_Mode(EALS_RotationMode RotationMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Server Set Rotation Mode");

	Params::ALS_Base_CharacterBP_C_Server_Set_Rotation_Mode Parms{};

	Parms.RotationMode_0 = RotationMode_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Server Set View Mode
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_ViewMode                           ViewMode_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Server_Set_View_Mode(EALS_ViewMode ViewMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Server Set View Mode");

	Params::ALS_Base_CharacterBP_C_Server_Set_View_Mode Parms{};

	Parms.ViewMode_0 = ViewMode_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.ServerSetRagdollLocation
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          RagdollLocation_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::ServerSetRagdollLocation(const struct FVector& RagdollLocation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "ServerSetRagdollLocation");

	Params::ALS_Base_CharacterBP_C_ServerSetRagdollLocation Parms{};

	Parms.RagdollLocation_0 = std::move(RagdollLocation_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Set Overlay State (Client)
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       OverlayState_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Set_Overlay_State__Client_(EALS_OverlayState OverlayState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Set Overlay State (Client)");

	Params::ALS_Base_CharacterBP_C_Set_Overlay_State__Client_ Parms{};

	Parms.OverlayState_0 = OverlayState_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.SetActorLocationAndRotation(UpdateTarget)
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         NewRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSweep                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bTeleport                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepHitResult                                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AALS_Base_CharacterBP_C::SetActorLocationAndRotation_UpdateTarget_(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "SetActorLocationAndRotation(UpdateTarget)");

	Params::ALS_Base_CharacterBP_C_SetActorLocationAndRotation_UpdateTarget_ Parms{};

	Parms.NewLocation = std::move(NewLocation);
	Parms.NewRotation = std::move(NewRotation);
	Parms.bSweep = bSweep;
	Parms.bTeleport = bTeleport;

	UObject::ProcessEvent(Func, &Parms);

	if (SweepHitResult != nullptr)
		*SweepHitResult = std::move(Parms.SweepHitResult);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.SetActorLocationDuringRagdoll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::SetActorLocationDuringRagdoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "SetActorLocationDuringRagdoll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.SetEssentialValues
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::SetEssentialValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "SetEssentialValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.SetMovementModel
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::SetMovementModel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "SetMovementModel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.SmoothCharacterRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  TargetInterpSpeed_Const_                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ActorInterpSpeed_Smooth_                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::SmoothCharacterRotation(const struct FRotator& Target, double TargetInterpSpeed_Const_, double ActorInterpSpeed_Smooth_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "SmoothCharacterRotation");

	Params::ALS_Base_CharacterBP_C_SmoothCharacterRotation Parms{};

	Parms.Target = std::move(Target);
	Parms.TargetInterpSpeed_Const_ = TargetInterpSpeed_Const_;
	Parms.ActorInterpSpeed_Smooth_ = ActorInterpSpeed_Smooth_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.SpawnActor (Server)
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::SpawnActor__Server_(class UClass* Class_0, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "SpawnActor (Server)");

	Params::ALS_Base_CharacterBP_C_SpawnActor__Server_ Parms{};

	Parms.Class_0 = Class_0;
	Parms.SpawnTransform = std::move(SpawnTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Update Team (server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PC                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Update_Team__server_(class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Update Team (server)");

	Params::ALS_Base_CharacterBP_C_Update_Team__server_ Parms{};

	Parms.PC = PC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.UpdateCharacterMovement
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::UpdateCharacterMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "UpdateCharacterMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.UpdateDynamicMovementSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               AllowedGait                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::UpdateDynamicMovementSettings(EALS_Gait AllowedGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "UpdateDynamicMovementSettings");

	Params::ALS_Base_CharacterBP_C_UpdateDynamicMovementSettings Parms{};

	Parms.AllowedGait = AllowedGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.UpdateGroudedRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::UpdateGroudedRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "UpdateGroudedRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.UpdateInAirRotation
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::UpdateInAirRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "UpdateInAirRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

