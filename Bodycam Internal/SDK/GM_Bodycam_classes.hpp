#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GM_Bodycam

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GM_Statue_structs.hpp"
#include "GameMode_structs.hpp"
#include "STR_PCInfo_structs.hpp"
#include "E_Team_structs.hpp"
#include "E_Emote_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GM_Bodycam.GM_Bodycam_C
// 0x00A8 (0x03D8 - 0x0330)
class AGM_Bodycam_C final : public AGameModeBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0330(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_MenuSystemGameModeComponent_C*      BP_MenuSystemGameModeComponent;                    // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Match_End;                                         // 0x0348(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APC_Bodycam_C*                          As_PC_Bodycam;                                     // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AGT_Bodycam_C*                          As_GT_Bodycam;                                     // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ACharacter*>                     DeadBodies;                                        // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         MaxDeadBodies;                                     // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGM_Statue                                    GM_Statue;                                         // 0x0374(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTR_PCInfo>                    WinningTeam;                                       // 0x0378(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FSTR_PCInfo>                    LoosingTeam;                                       // 0x0388(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<class AController*>                    ConnectedPlayers;                                  // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         UniquePlayerID;                                    // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Kick_Reason;                                       // 0x03B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          PartyEnd;                                          // 0x03C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            Exiting_Controller;                                // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BreakTimer();
	void CalcTeamKillTotal(int32* MilitaryKill_Return, int32* TerroristKill_Return, E_Team* Team_Win);
	void CanCreateKickVote(bool* CanCreateKickVote_);
	void CanKickThisPlayer_(const class FString& PlayerID, bool* True_);
	void Choose_Team(E_Team* Postion);
	void ClearMap();
	void EndGame(E_Team Team_Win);
	void EndRound(bool ForceEndGame);
	void Event_Ragdoll_End();
	void EventRagdollStart();
	void ExecuteUbergraph_GM_Bodycam(int32 EntryPoint);
	void FindPlayerSpawn(const class FString& Name_0, const struct FTransform* SpawnTransform);
	void Get_BP_Menu_Controller_Component(class UBP_MenuControllerComponent_C** BP_Menu_Controller_Component);
	void Get_Stamina(double* Stamina);
	void GetBlured(double* Blured);
	void GetBurnedRef(class USceneComponent** BurnedMesh);
	void GetFlashBangEffect(double* FlashEffect);
	void GetGameMode(struct FSTR_GamemodeWinInfo* GameMode);
	void GetHealth(double* Health);
	void GetKickedPlayerVoted(TArray<class FString>* KickplayerAlreadyVote);
	void GetMenuSettings(class UBP_MenuControllerComponent_C** Bp_MenuController);
	void GetMutePlayer(TArray<class FString>* MutePlayer);
	void GetPlayerConnected(TArray<struct FSTR_PCInfo>* PlayerConnected);
	void GetPlayerKickVote(TArray<struct FSTR_KickVote>* KickVotePlayer);
	void GetPlayerSkin(struct FSTR_TEST* Player_Skin, bool* Valid_);
	void GetRagdollSystem(class UWW_RagdollSystem_C** Ragdoll_System);
	void GetReady_(bool* IsReady_);
	void GetServerSteamID(class FString* SteamID);
	void GetStarterWeapons(TArray<struct FSTR_Actor>* Weapons);
	void GetSteamID(class FString* SteamID);
	void GetSurvivorStatuts(class UWW_SurvivorStatus_C** SurvivorComponant);
	void GetTeam(E_Team* Team);
	void GetTeamList(E_Team Team, TArray<struct FSTR_PCInfo>* Info);
	void GetTopScore(TArray<struct FSTR_PCInfo>* TopScore);
	void HandleStartingNewPlayer(class APlayerController* NewPlayer);
	void InitScoreBoard();
	void IsDead(bool* Dead_);
	void IsDestroyabe_(bool* Destroyable_);
	void IsMatchEnd(bool* MatchEnd_);
	void IsReady_(bool IsReady__0);
	void IsStress(bool* Yes_);
	void IsTalking_(bool* IsTalking__0);
	void K2_OnLogout(class AController* ExitingController);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void Kick_(const struct FSTR_PCInfo& Target);
	void KickPlayer(const struct FSTR_KickVote& PlayerInfo);
	void LogoutEvent(class AController* ExitingController);
	void MSG_ChatGetConnectedPlayers(TArray<class AController*>* Players);
	void MSG_ChatGetPlayerID(int32* PlayerID);
	void MSG_ChatGetTeamID(int32* TeamID);
	void MSG_ChatGetUsername(bool* Success_, class FText* Username);
	void MSG_ChatPlayEmote(E_Emote EmoteToPlay);
	void MSG_ChatRequestPlayerID(int32* PlayerID, bool* Success_);
	void MuteID(const class FString& SteamID);
	void NewKickVote(const struct FSTR_PCInfo& Target);
	void OnPlayerDeath(class APlayerController* PC);
	void OnTrySelectTeam(E_Team Team);
	void ReceiveBeginPlay();
	void SendsSystemMessageToPlayers(const class FText& Message);
	void ServerTravel(double Delay);
	void Slomo(double Slomo_0);
	void Talk(bool IsTalking);
	void TryDeathMatchEnd();
	void UpdateGamemode(EGameMode GameMode);
	void UpdateKickVote(const struct FSTR_PCInfo& Target, bool Yes_);
	void UpdateMapSelection(class FName Selected_Level_Name, int32 Index_0);
	void UpdateModeInfo();
	void UpdateScore(const struct FSTR_Score& Score);
	void UpdateTeamIndex__PlayerKilled_(E_Team Team_PlayerKilled_, int32 MilitaryIndex, int32 TerroristIndex, E_Team WiiningTeam);
	void UpdateTeamXP(bool Win_);
	void UpdateTimer(double TimeCount, const class FText& NewParam);
	void UpdateTransitionMap();
	void UpdateWarning(const class FString& String);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GM_Bodycam_C">();
	}
	static class AGM_Bodycam_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGM_Bodycam_C>();
	}
};
static_assert(alignof(AGM_Bodycam_C) == 0x000008, "Wrong alignment on AGM_Bodycam_C");
static_assert(sizeof(AGM_Bodycam_C) == 0x0003D8, "Wrong size on AGM_Bodycam_C");
static_assert(offsetof(AGM_Bodycam_C, UberGraphFrame) == 0x000330, "Member 'AGM_Bodycam_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, BP_MenuSystemGameModeComponent) == 0x000338, "Member 'AGM_Bodycam_C::BP_MenuSystemGameModeComponent' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, DefaultSceneRoot) == 0x000340, "Member 'AGM_Bodycam_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, Match_End) == 0x000348, "Member 'AGM_Bodycam_C::Match_End' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, As_PC_Bodycam) == 0x000350, "Member 'AGM_Bodycam_C::As_PC_Bodycam' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, As_GT_Bodycam) == 0x000358, "Member 'AGM_Bodycam_C::As_GT_Bodycam' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, DeadBodies) == 0x000360, "Member 'AGM_Bodycam_C::DeadBodies' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, MaxDeadBodies) == 0x000370, "Member 'AGM_Bodycam_C::MaxDeadBodies' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, GM_Statue) == 0x000374, "Member 'AGM_Bodycam_C::GM_Statue' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, WinningTeam) == 0x000378, "Member 'AGM_Bodycam_C::WinningTeam' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, LoosingTeam) == 0x000388, "Member 'AGM_Bodycam_C::LoosingTeam' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, ConnectedPlayers) == 0x000398, "Member 'AGM_Bodycam_C::ConnectedPlayers' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, UniquePlayerID) == 0x0003A8, "Member 'AGM_Bodycam_C::UniquePlayerID' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, Kick_Reason) == 0x0003B0, "Member 'AGM_Bodycam_C::Kick_Reason' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, PartyEnd) == 0x0003C8, "Member 'AGM_Bodycam_C::PartyEnd' has a wrong offset!");
static_assert(offsetof(AGM_Bodycam_C, Exiting_Controller) == 0x0003D0, "Member 'AGM_Bodycam_C::Exiting_Controller' has a wrong offset!");

}

