#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_CommonComboBox

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_CommonComboBox.UI_CommonComboBox_C
// 0x0108 (0x0388 - 0x0280)
class UUI_CommonComboBox_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UComboBoxString*                        ComboBox;                                          // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             CountText;                                         // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                ExpandButton;                                      // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEditableTextBox*                       FilterEditableTextBox;                             // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_1;                                   // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_171;                                         // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                SearchButton;                                      // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SearchIcon;                                        // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_0;                                         // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_48;                                        // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TitleText;                                         // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class FName>                           Options;                                           // 0x02E0(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	int32                                         InitialSelectedIndex;                              // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSelectionChanged;                                // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FText                                   Title;                                             // 0x0308(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          ShowCountValue;                                    // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PreCount;                                          // 0x0328(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   PostCount;                                         // 0x0340(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<class FString>                         AddedOptions;                                      // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UUI_ComboBoxOptions_C*                  ComboBoxOptions;                                   // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CanFilter;                                         // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManualWidthSize;                                   // 0x0371(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_372[0x6];                                      // 0x0372(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WidthSize;                                         // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OptionsHeight;                                     // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void AddOption(const class FString& Option);
	void BndEvt__Button_225_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__Button_353_K2Node_ComponentBoundEvent_7_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__ComboBox_K2Node_ComponentBoundEvent_0_OnSelectionChangedEvent__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
	void BndEvt__EditableTextBox_412_K2Node_ComponentBoundEvent_6_OnEditableTextBoxChangedEvent__DelegateSignature(const class FText& Text);
	void BndEvt__FilterEditableTextBox_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod);
	void ClearOptions();
	void CreateSearchableComboBoxOptions();
	void ExecuteUbergraph_UI_CommonComboBox(int32 EntryPoint);
	class FText Get_Combo_Box_Count();
	void GetLastIndex(int32* LastIndex);
	void GetSelectedOption(int32* Index_0, class FString* Option);
	void IsValidOption(int32 Index_0, const class FString& Option, bool UseIndex, bool* IsValid);
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnSelectionChanged__DelegateSignature(const class FString& ItemSelected, int32 Index_0);
	void PreConstruct(bool IsDesignTime);
	void TextBoxFocus();
	void UpdateEditableBoxText(const class FText& InText);
	void UpdateOptions(const TArray<class FName>& OptionsArray);
	void UpdateSelectedIndex(const int32 Index_0);
	void UpdateSelectedOption(const class FString& Option);
	void UpdateSelectedSearchable();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_CommonComboBox_C">();
	}
	static class UUI_CommonComboBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_CommonComboBox_C>();
	}
};
static_assert(alignof(UUI_CommonComboBox_C) == 0x000008, "Wrong alignment on UUI_CommonComboBox_C");
static_assert(sizeof(UUI_CommonComboBox_C) == 0x000388, "Wrong size on UUI_CommonComboBox_C");
static_assert(offsetof(UUI_CommonComboBox_C, UberGraphFrame) == 0x000280, "Member 'UUI_CommonComboBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, ComboBox) == 0x000288, "Member 'UUI_CommonComboBox_C::ComboBox' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, CountText) == 0x000290, "Member 'UUI_CommonComboBox_C::CountText' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, ExpandButton) == 0x000298, "Member 'UUI_CommonComboBox_C::ExpandButton' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, FilterEditableTextBox) == 0x0002A0, "Member 'UUI_CommonComboBox_C::FilterEditableTextBox' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, HorizontalBox_1) == 0x0002A8, "Member 'UUI_CommonComboBox_C::HorizontalBox_1' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, Image_171) == 0x0002B0, "Member 'UUI_CommonComboBox_C::Image_171' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, SearchButton) == 0x0002B8, "Member 'UUI_CommonComboBox_C::SearchButton' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, SearchIcon) == 0x0002C0, "Member 'UUI_CommonComboBox_C::SearchIcon' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, SizeBox_0) == 0x0002C8, "Member 'UUI_CommonComboBox_C::SizeBox_0' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, SizeBox_48) == 0x0002D0, "Member 'UUI_CommonComboBox_C::SizeBox_48' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, TitleText) == 0x0002D8, "Member 'UUI_CommonComboBox_C::TitleText' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, Options) == 0x0002E0, "Member 'UUI_CommonComboBox_C::Options' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, InitialSelectedIndex) == 0x0002F0, "Member 'UUI_CommonComboBox_C::InitialSelectedIndex' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, OnSelectionChanged) == 0x0002F8, "Member 'UUI_CommonComboBox_C::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, Title) == 0x000308, "Member 'UUI_CommonComboBox_C::Title' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, ShowCountValue) == 0x000320, "Member 'UUI_CommonComboBox_C::ShowCountValue' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, PreCount) == 0x000328, "Member 'UUI_CommonComboBox_C::PreCount' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, PostCount) == 0x000340, "Member 'UUI_CommonComboBox_C::PostCount' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, AddedOptions) == 0x000358, "Member 'UUI_CommonComboBox_C::AddedOptions' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, ComboBoxOptions) == 0x000368, "Member 'UUI_CommonComboBox_C::ComboBoxOptions' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, CanFilter) == 0x000370, "Member 'UUI_CommonComboBox_C::CanFilter' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, ManualWidthSize) == 0x000371, "Member 'UUI_CommonComboBox_C::ManualWidthSize' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, WidthSize) == 0x000378, "Member 'UUI_CommonComboBox_C::WidthSize' has a wrong offset!");
static_assert(offsetof(UUI_CommonComboBox_C, OptionsHeight) == 0x000380, "Member 'UUI_CommonComboBox_C::OptionsHeight' has a wrong offset!");

}

