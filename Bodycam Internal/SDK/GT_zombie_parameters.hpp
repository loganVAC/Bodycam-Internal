#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GT_zombie

#include "Basic.hpp"

#include "E_Team_structs.hpp"
#include "GameMode_structs.hpp"
#include "STR_TEST_structs.hpp"
#include "STR_PCInfo_structs.hpp"
#include "STR_Actor_structs.hpp"
#include "STR_Score_structs.hpp"
#include "STR_GamemodeWinInfo_structs.hpp"
#include "STR_KickVote_structs.hpp"
#include "EN_WaveClass_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GT_zombie.GT_zombie_C.CanCreateKickVote
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_CanCreateKickVote final
{
public:
	bool                                          CanCreateKickVote_;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_CanCreateKickVote) == 0x000001, "Wrong alignment on GT_zombie_C_CanCreateKickVote");
static_assert(sizeof(GT_zombie_C_CanCreateKickVote) == 0x000001, "Wrong size on GT_zombie_C_CanCreateKickVote");
static_assert(offsetof(GT_zombie_C_CanCreateKickVote, CanCreateKickVote_) == 0x000000, "Member 'GT_zombie_C_CanCreateKickVote::CanCreateKickVote_' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.CanKickThisPlayer?
// 0x0018 (0x0018 - 0x0000)
struct GT_zombie_C_CanKickThisPlayer_ final
{
public:
	class FString                                 PlayerID;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          True_;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_CanKickThisPlayer_) == 0x000008, "Wrong alignment on GT_zombie_C_CanKickThisPlayer_");
static_assert(sizeof(GT_zombie_C_CanKickThisPlayer_) == 0x000018, "Wrong size on GT_zombie_C_CanKickThisPlayer_");
static_assert(offsetof(GT_zombie_C_CanKickThisPlayer_, PlayerID) == 0x000000, "Member 'GT_zombie_C_CanKickThisPlayer_::PlayerID' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_CanKickThisPlayer_, True_) == 0x000010, "Member 'GT_zombie_C_CanKickThisPlayer_::True_' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.ExecuteUbergraph_GT_zombie
// 0x0720 (0x0720 - 0x0000)
struct GT_zombie_C_ExecuteUbergraph_GT_zombie final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_String;                               // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        K2Node_Event_TimeCount;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_NewParam;                             // 0x0070(0x0018)()
	E_Team                                        K2Node_Event_Team;                                 // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_Selected_Level_Name;                  // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Index;                                // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Team                                        K2Node_Event_Team_PlayerKilled_;                   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_MilitaryIndex;                        // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_TerroristIndex;                       // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Team                                        K2Node_Event_WiiningTeam;                          // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_Score                             K2Node_Event_Score;                                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Win_;                                 // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Slomo;                                // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_SteamID;                              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTR_PCInfo                            K2Node_Event_Target_2;                             // 0x00D0(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	EGameMode                                     K2Node_Event_Gamemode;                             // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsReady_;                             // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsTalking;                            // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_113[0x5];                                      // 0x0113(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_Event_PC;                                   // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_KickVote                          K2Node_Event_PlayerInfo;                           // 0x0130(0x0048)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTR_KickVote                          K2Node_CustomEvent_NewItem;                        // 0x0178(0x0048)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_KickVote                          CallFunc_Array_Get_Item;                           // 0x01C8(0x0048)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTR_KickVote                          CallFunc_Array_Get_Item_1;                         // 0x0210(0x0048)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EN_WaveClass                                  Temp_byte_Variable;                                // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0260(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTR_KickVote                          CallFunc_Array_Get_Item_2;                         // 0x02C0(0x0048)(ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0308(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AKickTicket_C*                          CallFunc_FinishSpawningActor_ReturnValue;          // 0x0318(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTR_KickVote                          K2Node_MakeStruct_STR_KickVote;                    // 0x0320(0x0048)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTR_KickVote                          CallFunc_Array_Get_Item_3;                         // 0x0368(0x0048)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_KickVote                          K2Node_MakeStruct_STR_KickVote_1;                  // 0x03B8(0x0048)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTR_PCInfo                            K2Node_CustomEvent_PlayerInfo;                     // 0x0400(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_KickVote                          CallFunc_Array_Get_Item_4;                         // 0x0448(0x0048)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0494(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0495(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0496(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_497[0x1];                                      // 0x0497(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0498(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A9[0x3];                                      // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x04B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B5[0x3];                                      // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_PCInfo                            K2Node_Event_Target_1;                             // 0x04B8(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Yes_;                                 // 0x04F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x04F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FA[0x6];                                      // 0x04FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_PCInfo                            K2Node_Event_Target;                               // 0x0500(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTR_PCInfo                            K2Node_CustomEvent_Player_info;                    // 0x0540(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Yes_;                           // 0x0580(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_1;          // 0x0581(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_582[0x2];                                      // 0x0582(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x0584(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Delay;                                // 0x0588(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTR_PCInfo                            CallFunc_Array_Get_Item_5;                         // 0x0590(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x05D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_2;          // 0x05D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x05D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_KickPlayer_ReturnValue;                   // 0x05D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D7[0x1];                                      // 0x05D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Duration;                       // 0x05D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5DC[0x4];                                      // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x05E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class AALS_AnimMan_CharacterBP_C*>     CallFunc_GetAllActorsOfClass_OutActors;            // 0x05F0(0x0010)(ReferenceParm)
	EN_WaveClass                                  K2Node_CustomEvent_EN_WaveClass_3;                 // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AALS_AnimMan_CharacterBP_C*             CallFunc_Array_Get_Item_6;                         // 0x0608(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0610(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBodycam_Interface_C>  CallFunc_ServerTravel_self_CastInput;              // 0x0618(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0628(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EN_WaveClass                                  K2Node_CustomEvent_EN_WaveClass_2;                 // 0x062C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x062D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62E[0x2];                                      // 0x062E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Wave;                           // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Chrono;                         // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x0640(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_644[0x4];                                      // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_PCInfo                            CallFunc_Array_Get_Item_7;                         // 0x0648(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTR_PCInfo                            CallFunc_Array_Get_Item_8;                         // 0x0688(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	class APC_Zombie_C*                           K2Node_DynamicCast_AsPC_Zombie;                    // 0x06C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x06D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D1[0x7];                                      // 0x06D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBodycam_Interface_C>  K2Node_DynamicCast_AsBodycam_Interface;            // 0x06D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x06E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E9[0x3];                                      // 0x06E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x06EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EN_WaveClass                                  K2Node_CustomEvent_EN_WaveClass_1;                 // 0x06F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x06F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F2[0x6];                                      // 0x06F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_Select_Default;                             // 0x06F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0700(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_701[0x7];                                      // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue;                 // 0x0708(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EN_WaveClass                                  K2Node_CustomEvent_EN_WaveClass;                   // 0x0710(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711[0x3];                                      // 0x0711(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_ServerTravel__server__Duration_ImplicitCast; // 0x0714(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_ExecuteUbergraph_GT_zombie) == 0x000010, "Wrong alignment on GT_zombie_C_ExecuteUbergraph_GT_zombie");
static_assert(sizeof(GT_zombie_C_ExecuteUbergraph_GT_zombie) == 0x000720, "Wrong size on GT_zombie_C_ExecuteUbergraph_GT_zombie");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, EntryPoint) == 0x000000, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::EntryPoint' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_bool_True_if_break_was_hit_Variable) == 0x000004, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_int_Array_Index_Variable) == 0x000008, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_HasAuthority_ReturnValue) == 0x00000D, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_int_Loop_Counter_Variable_1) == 0x000018, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Add_IntInt_ReturnValue_1) == 0x00001C, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_int_Array_Index_Variable_1) == 0x000020, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_object_Variable) == 0x000028, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_int_Array_Index_Variable_2) == 0x000030, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_int_Loop_Counter_Variable_2) == 0x000034, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Add_IntInt_ReturnValue_2) == 0x000038, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_int_Array_Index_Variable_3) == 0x00003C, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000040, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Not_PreBool_ReturnValue_1) == 0x000041, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_int_Loop_Counter_Variable_3) == 0x000044, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Add_IntInt_ReturnValue_3) == 0x000048, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_int_Array_Index_Variable_4) == 0x00004C, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_object_Variable_1) == 0x000050, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_String) == 0x000058, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_String' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_TimeCount) == 0x000068, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_TimeCount' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_NewParam) == 0x000070, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_NewParam' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_Team) == 0x000088, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_Team' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_Selected_Level_Name) == 0x00008C, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_Selected_Level_Name' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_Index) == 0x000094, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_Index' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_Team_PlayerKilled_) == 0x000098, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_Team_PlayerKilled_' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_MilitaryIndex) == 0x00009C, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_MilitaryIndex' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_TerroristIndex) == 0x0000A0, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_TerroristIndex' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_WiiningTeam) == 0x0000A4, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_WiiningTeam' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_Score) == 0x0000A8, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_Score' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_Win_) == 0x0000B0, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_Win_' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_Slomo) == 0x0000B8, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_Slomo' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_SteamID) == 0x0000C0, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_SteamID' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_Target_2) == 0x0000D0, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_Target_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_Gamemode) == 0x000110, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_Gamemode' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_IsReady_) == 0x000111, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_IsReady_' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_IsTalking) == 0x000112, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_IsTalking' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_PC) == 0x000118, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_PC' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_int_Loop_Counter_Variable_4) == 0x000120, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Add_IntInt_ReturnValue_4) == 0x000124, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Length_ReturnValue) == 0x000128, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Less_IntInt_ReturnValue) == 0x00012C, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_PlayerInfo) == 0x000130, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_PlayerInfo' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_CustomEvent_NewItem) == 0x000178, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_CustomEvent_NewItem' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_AddUnique_ReturnValue) == 0x0001C0, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Get_Item) == 0x0001C8, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Get_Item_1) == 0x000210, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Length_ReturnValue_1) == 0x000258, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_byte_Variable) == 0x00025C, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_MakeTransform_ReturnValue) == 0x000260, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Get_Item_2) == 0x0002C0, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000308, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Add_IntInt_ReturnValue_5) == 0x000310, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_FinishSpawningActor_ReturnValue) == 0x000318, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_MakeStruct_STR_KickVote) == 0x000320, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_MakeStruct_STR_KickVote' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Get_Item_3) == 0x000368, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Add_IntInt_ReturnValue_6) == 0x0003B0, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_MakeStruct_STR_KickVote_1) == 0x0003B8, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_MakeStruct_STR_KickVote_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_CustomEvent_PlayerInfo) == 0x000400, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_CustomEvent_PlayerInfo' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_int_Loop_Counter_Variable_5) == 0x000440, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Get_Item_4) == 0x000448, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Add_IntInt_ReturnValue_7) == 0x000490, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Greater_IntInt_ReturnValue) == 0x000494, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000495, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Less_IntInt_ReturnValue_1) == 0x000496, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Concat_StrStr_ReturnValue) == 0x000498, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_BooleanAND_ReturnValue) == 0x0004A8, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Add_IntInt_ReturnValue_8) == 0x0004AC, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Length_ReturnValue_2) == 0x0004B0, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Less_IntInt_ReturnValue_2) == 0x0004B4, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_Target_1) == 0x0004B8, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_Target_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_Yes_) == 0x0004F8, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_Yes_' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_BooleanAND_ReturnValue_1) == 0x0004F9, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_Target) == 0x000500, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_Target' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_CustomEvent_Player_info) == 0x000540, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_CustomEvent_Player_info' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_CustomEvent_Yes_) == 0x000580, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_CustomEvent_Yes_' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_EqualEqual_StrStr_ReturnValue_1) == 0x000581, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_EqualEqual_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_AddUnique_ReturnValue_1) == 0x000584, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Event_Delay) == 0x000588, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Get_Item_5) == 0x000590, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Length_ReturnValue_3) == 0x0005D0, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_EqualEqual_StrStr_ReturnValue_2) == 0x0005D4, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_EqualEqual_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Less_IntInt_ReturnValue_3) == 0x0005D5, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_KickPlayer_ReturnValue) == 0x0005D6, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_KickPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_CustomEvent_Duration) == 0x0005D8, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_CustomEvent_Duration' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0005E0, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_GetAllActorsOfClass_OutActors) == 0x0005F0, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_CustomEvent_EN_WaveClass_3) == 0x000600, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_CustomEvent_EN_WaveClass_3' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Get_Item_6) == 0x000608, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_SwitchEnum_CmpSuccess) == 0x000610, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_ServerTravel_self_CastInput) == 0x000618, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_ServerTravel_self_CastInput' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Length_ReturnValue_4) == 0x000628, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_CustomEvent_EN_WaveClass_2) == 0x00062C, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_CustomEvent_EN_WaveClass_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Less_IntInt_ReturnValue_4) == 0x00062D, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_CustomEvent_Wave) == 0x000630, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_CustomEvent_Wave' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_CustomEvent_Chrono) == 0x000638, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_CustomEvent_Chrono' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, Temp_int_Array_Index_Variable_5) == 0x000640, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Get_Item_7) == 0x000648, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Get_Item_8) == 0x000688, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_DynamicCast_AsPC_Zombie) == 0x0006C8, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_DynamicCast_AsPC_Zombie' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_DynamicCast_bSuccess) == 0x0006D0, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_DynamicCast_AsBodycam_Interface) == 0x0006D8, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_DynamicCast_AsBodycam_Interface' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_DynamicCast_bSuccess_1) == 0x0006E8, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Array_Length_ReturnValue_5) == 0x0006EC, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_CustomEvent_EN_WaveClass_1) == 0x0006F0, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_CustomEvent_EN_WaveClass_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_Less_IntInt_ReturnValue_5) == 0x0006F1, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_Select_Default) == 0x0006F8, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_SwitchEnum_CmpSuccess_1) == 0x000700, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_SpawnSound2D_ReturnValue) == 0x000708, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, K2Node_CustomEvent_EN_WaveClass) == 0x000710, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::K2Node_CustomEvent_EN_WaveClass' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_ExecuteUbergraph_GT_zombie, CallFunc_ServerTravel__server__Duration_ImplicitCast) == 0x000714, "Member 'GT_zombie_C_ExecuteUbergraph_GT_zombie::CallFunc_ServerTravel__server__Duration_ImplicitCast' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.Get BP Menu Controller Component
// 0x0008 (0x0008 - 0x0000)
struct GT_zombie_C_Get_BP_Menu_Controller_Component final
{
public:
	class UBP_MenuControllerComponent_C*          BP_Menu_Controller_Component;                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_Get_BP_Menu_Controller_Component) == 0x000008, "Wrong alignment on GT_zombie_C_Get_BP_Menu_Controller_Component");
static_assert(sizeof(GT_zombie_C_Get_BP_Menu_Controller_Component) == 0x000008, "Wrong size on GT_zombie_C_Get_BP_Menu_Controller_Component");
static_assert(offsetof(GT_zombie_C_Get_BP_Menu_Controller_Component, BP_Menu_Controller_Component) == 0x000000, "Member 'GT_zombie_C_Get_BP_Menu_Controller_Component::BP_Menu_Controller_Component' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.Get Stamina
// 0x0008 (0x0008 - 0x0000)
struct GT_zombie_C_Get_Stamina final
{
public:
	double                                        Stamina;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_Get_Stamina) == 0x000008, "Wrong alignment on GT_zombie_C_Get_Stamina");
static_assert(sizeof(GT_zombie_C_Get_Stamina) == 0x000008, "Wrong size on GT_zombie_C_Get_Stamina");
static_assert(offsetof(GT_zombie_C_Get_Stamina, Stamina) == 0x000000, "Member 'GT_zombie_C_Get_Stamina::Stamina' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetBlured
// 0x0008 (0x0008 - 0x0000)
struct GT_zombie_C_GetBlured final
{
public:
	double                                        Blured;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetBlured) == 0x000008, "Wrong alignment on GT_zombie_C_GetBlured");
static_assert(sizeof(GT_zombie_C_GetBlured) == 0x000008, "Wrong size on GT_zombie_C_GetBlured");
static_assert(offsetof(GT_zombie_C_GetBlured, Blured) == 0x000000, "Member 'GT_zombie_C_GetBlured::Blured' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetBurnedRef
// 0x0008 (0x0008 - 0x0000)
struct GT_zombie_C_GetBurnedRef final
{
public:
	class USceneComponent*                        BurnedMesh;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetBurnedRef) == 0x000008, "Wrong alignment on GT_zombie_C_GetBurnedRef");
static_assert(sizeof(GT_zombie_C_GetBurnedRef) == 0x000008, "Wrong size on GT_zombie_C_GetBurnedRef");
static_assert(offsetof(GT_zombie_C_GetBurnedRef, BurnedMesh) == 0x000000, "Member 'GT_zombie_C_GetBurnedRef::BurnedMesh' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetFlashBangEffect
// 0x0008 (0x0008 - 0x0000)
struct GT_zombie_C_GetFlashBangEffect final
{
public:
	double                                        FlashEffect;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetFlashBangEffect) == 0x000008, "Wrong alignment on GT_zombie_C_GetFlashBangEffect");
static_assert(sizeof(GT_zombie_C_GetFlashBangEffect) == 0x000008, "Wrong size on GT_zombie_C_GetFlashBangEffect");
static_assert(offsetof(GT_zombie_C_GetFlashBangEffect, FlashEffect) == 0x000000, "Member 'GT_zombie_C_GetFlashBangEffect::FlashEffect' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetGameMode
// 0x0080 (0x0080 - 0x0000)
struct GT_zombie_C_GetGameMode final
{
public:
	struct FSTR_GamemodeWinInfo                   GameMode;                                          // 0x0000(0x0040)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTR_GamemodeWinInfo                   CallFunc_GetGamemodeInfo_GamemodeInfo;             // 0x0040(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetGameMode) == 0x000008, "Wrong alignment on GT_zombie_C_GetGameMode");
static_assert(sizeof(GT_zombie_C_GetGameMode) == 0x000080, "Wrong size on GT_zombie_C_GetGameMode");
static_assert(offsetof(GT_zombie_C_GetGameMode, GameMode) == 0x000000, "Member 'GT_zombie_C_GetGameMode::GameMode' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetGameMode, CallFunc_GetGamemodeInfo_GamemodeInfo) == 0x000040, "Member 'GT_zombie_C_GetGameMode::CallFunc_GetGamemodeInfo_GamemodeInfo' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetGamemodeInfo
// 0x0088 (0x0088 - 0x0000)
struct GT_zombie_C_GetGamemodeInfo final
{
public:
	struct FSTR_GamemodeWinInfo                   GamemodeInfo;                                      // 0x0000(0x0040)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTR_GamemodeWinInfo                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x0040(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetGamemodeInfo) == 0x000008, "Wrong alignment on GT_zombie_C_GetGamemodeInfo");
static_assert(sizeof(GT_zombie_C_GetGamemodeInfo) == 0x000088, "Wrong size on GT_zombie_C_GetGamemodeInfo");
static_assert(offsetof(GT_zombie_C_GetGamemodeInfo, GamemodeInfo) == 0x000000, "Member 'GT_zombie_C_GetGamemodeInfo::GamemodeInfo' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetGamemodeInfo, CallFunc_GetDataTableRowFromName_OutRow) == 0x000040, "Member 'GT_zombie_C_GetGamemodeInfo::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetGamemodeInfo, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000080, "Member 'GT_zombie_C_GetGamemodeInfo::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetHealth
// 0x0008 (0x0008 - 0x0000)
struct GT_zombie_C_GetHealth final
{
public:
	double                                        Health;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetHealth) == 0x000008, "Wrong alignment on GT_zombie_C_GetHealth");
static_assert(sizeof(GT_zombie_C_GetHealth) == 0x000008, "Wrong size on GT_zombie_C_GetHealth");
static_assert(offsetof(GT_zombie_C_GetHealth, Health) == 0x000000, "Member 'GT_zombie_C_GetHealth::Health' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetKickedPlayerVoted
// 0x0010 (0x0010 - 0x0000)
struct GT_zombie_C_GetKickedPlayerVoted final
{
public:
	TArray<class FString>                         KickplayerAlreadyVote;                             // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(GT_zombie_C_GetKickedPlayerVoted) == 0x000008, "Wrong alignment on GT_zombie_C_GetKickedPlayerVoted");
static_assert(sizeof(GT_zombie_C_GetKickedPlayerVoted) == 0x000010, "Wrong size on GT_zombie_C_GetKickedPlayerVoted");
static_assert(offsetof(GT_zombie_C_GetKickedPlayerVoted, KickplayerAlreadyVote) == 0x000000, "Member 'GT_zombie_C_GetKickedPlayerVoted::KickplayerAlreadyVote' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetMenuSettings
// 0x0008 (0x0008 - 0x0000)
struct GT_zombie_C_GetMenuSettings final
{
public:
	class UBP_MenuControllerComponent_C*          Bp_MenuController;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetMenuSettings) == 0x000008, "Wrong alignment on GT_zombie_C_GetMenuSettings");
static_assert(sizeof(GT_zombie_C_GetMenuSettings) == 0x000008, "Wrong size on GT_zombie_C_GetMenuSettings");
static_assert(offsetof(GT_zombie_C_GetMenuSettings, Bp_MenuController) == 0x000000, "Member 'GT_zombie_C_GetMenuSettings::Bp_MenuController' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetMutePlayer
// 0x0010 (0x0010 - 0x0000)
struct GT_zombie_C_GetMutePlayer final
{
public:
	TArray<class FString>                         MutePlayer;                                        // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(GT_zombie_C_GetMutePlayer) == 0x000008, "Wrong alignment on GT_zombie_C_GetMutePlayer");
static_assert(sizeof(GT_zombie_C_GetMutePlayer) == 0x000010, "Wrong size on GT_zombie_C_GetMutePlayer");
static_assert(offsetof(GT_zombie_C_GetMutePlayer, MutePlayer) == 0x000000, "Member 'GT_zombie_C_GetMutePlayer::MutePlayer' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetPlayerConnected
// 0x0010 (0x0010 - 0x0000)
struct GT_zombie_C_GetPlayerConnected final
{
public:
	TArray<struct FSTR_PCInfo>                    PlayerConnected;                                   // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(GT_zombie_C_GetPlayerConnected) == 0x000008, "Wrong alignment on GT_zombie_C_GetPlayerConnected");
static_assert(sizeof(GT_zombie_C_GetPlayerConnected) == 0x000010, "Wrong size on GT_zombie_C_GetPlayerConnected");
static_assert(offsetof(GT_zombie_C_GetPlayerConnected, PlayerConnected) == 0x000000, "Member 'GT_zombie_C_GetPlayerConnected::PlayerConnected' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetPlayerKickVote
// 0x0010 (0x0010 - 0x0000)
struct GT_zombie_C_GetPlayerKickVote final
{
public:
	TArray<struct FSTR_KickVote>                  KickVotePlayer;                                    // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(GT_zombie_C_GetPlayerKickVote) == 0x000008, "Wrong alignment on GT_zombie_C_GetPlayerKickVote");
static_assert(sizeof(GT_zombie_C_GetPlayerKickVote) == 0x000010, "Wrong size on GT_zombie_C_GetPlayerKickVote");
static_assert(offsetof(GT_zombie_C_GetPlayerKickVote, KickVotePlayer) == 0x000000, "Member 'GT_zombie_C_GetPlayerKickVote::KickVotePlayer' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetPlayerSkin
// 0x02E8 (0x02E8 - 0x0000)
struct GT_zombie_C_GetPlayerSkin final
{
public:
	struct FSTR_TEST                              Player_Skin;                                       // 0x0000(0x02E0)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          Valid_;                                            // 0x02E0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetPlayerSkin) == 0x000008, "Wrong alignment on GT_zombie_C_GetPlayerSkin");
static_assert(sizeof(GT_zombie_C_GetPlayerSkin) == 0x0002E8, "Wrong size on GT_zombie_C_GetPlayerSkin");
static_assert(offsetof(GT_zombie_C_GetPlayerSkin, Player_Skin) == 0x000000, "Member 'GT_zombie_C_GetPlayerSkin::Player_Skin' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetPlayerSkin, Valid_) == 0x0002E0, "Member 'GT_zombie_C_GetPlayerSkin::Valid_' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetRagdollSystem
// 0x0008 (0x0008 - 0x0000)
struct GT_zombie_C_GetRagdollSystem final
{
public:
	class UWW_RagdollSystem_C*                    Ragdoll_System;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetRagdollSystem) == 0x000008, "Wrong alignment on GT_zombie_C_GetRagdollSystem");
static_assert(sizeof(GT_zombie_C_GetRagdollSystem) == 0x000008, "Wrong size on GT_zombie_C_GetRagdollSystem");
static_assert(offsetof(GT_zombie_C_GetRagdollSystem, Ragdoll_System) == 0x000000, "Member 'GT_zombie_C_GetRagdollSystem::Ragdoll_System' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetReady?
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_GetReady_ final
{
public:
	bool                                          IsReady_;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetReady_) == 0x000001, "Wrong alignment on GT_zombie_C_GetReady_");
static_assert(sizeof(GT_zombie_C_GetReady_) == 0x000001, "Wrong size on GT_zombie_C_GetReady_");
static_assert(offsetof(GT_zombie_C_GetReady_, IsReady_) == 0x000000, "Member 'GT_zombie_C_GetReady_::IsReady_' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetServerSteamID
// 0x0010 (0x0010 - 0x0000)
struct GT_zombie_C_GetServerSteamID final
{
public:
	class FString                                 SteamID;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetServerSteamID) == 0x000008, "Wrong alignment on GT_zombie_C_GetServerSteamID");
static_assert(sizeof(GT_zombie_C_GetServerSteamID) == 0x000010, "Wrong size on GT_zombie_C_GetServerSteamID");
static_assert(offsetof(GT_zombie_C_GetServerSteamID, SteamID) == 0x000000, "Member 'GT_zombie_C_GetServerSteamID::SteamID' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetStarterWeapons
// 0x0010 (0x0010 - 0x0000)
struct GT_zombie_C_GetStarterWeapons final
{
public:
	TArray<struct FSTR_Actor>                     Weapons;                                           // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(GT_zombie_C_GetStarterWeapons) == 0x000008, "Wrong alignment on GT_zombie_C_GetStarterWeapons");
static_assert(sizeof(GT_zombie_C_GetStarterWeapons) == 0x000010, "Wrong size on GT_zombie_C_GetStarterWeapons");
static_assert(offsetof(GT_zombie_C_GetStarterWeapons, Weapons) == 0x000000, "Member 'GT_zombie_C_GetStarterWeapons::Weapons' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetSteamID
// 0x0010 (0x0010 - 0x0000)
struct GT_zombie_C_GetSteamID final
{
public:
	class FString                                 SteamID;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetSteamID) == 0x000008, "Wrong alignment on GT_zombie_C_GetSteamID");
static_assert(sizeof(GT_zombie_C_GetSteamID) == 0x000010, "Wrong size on GT_zombie_C_GetSteamID");
static_assert(offsetof(GT_zombie_C_GetSteamID, SteamID) == 0x000000, "Member 'GT_zombie_C_GetSteamID::SteamID' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetSurvivorStatuts
// 0x0008 (0x0008 - 0x0000)
struct GT_zombie_C_GetSurvivorStatuts final
{
public:
	class UWW_SurvivorStatus_C*                   SurvivorComponant;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetSurvivorStatuts) == 0x000008, "Wrong alignment on GT_zombie_C_GetSurvivorStatuts");
static_assert(sizeof(GT_zombie_C_GetSurvivorStatuts) == 0x000008, "Wrong size on GT_zombie_C_GetSurvivorStatuts");
static_assert(offsetof(GT_zombie_C_GetSurvivorStatuts, SurvivorComponant) == 0x000000, "Member 'GT_zombie_C_GetSurvivorStatuts::SurvivorComponant' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_GetTeam final
{
public:
	E_Team                                        Team;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetTeam) == 0x000001, "Wrong alignment on GT_zombie_C_GetTeam");
static_assert(sizeof(GT_zombie_C_GetTeam) == 0x000001, "Wrong size on GT_zombie_C_GetTeam");
static_assert(offsetof(GT_zombie_C_GetTeam, Team) == 0x000000, "Member 'GT_zombie_C_GetTeam::Team' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetTeamList
// 0x0018 (0x0018 - 0x0000)
struct GT_zombie_C_GetTeamList final
{
public:
	E_Team                                        Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTR_PCInfo>                    Info;                                              // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(GT_zombie_C_GetTeamList) == 0x000008, "Wrong alignment on GT_zombie_C_GetTeamList");
static_assert(sizeof(GT_zombie_C_GetTeamList) == 0x000018, "Wrong size on GT_zombie_C_GetTeamList");
static_assert(offsetof(GT_zombie_C_GetTeamList, Team) == 0x000000, "Member 'GT_zombie_C_GetTeamList::Team' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTeamList, Info) == 0x000008, "Member 'GT_zombie_C_GetTeamList::Info' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.GetTopScore
// 0x01C8 (0x01C8 - 0x0000)
struct GT_zombie_C_GetTopScore final
{
public:
	TArray<struct FSTR_PCInfo>                    TopScore;                                          // 0x0000(0x0010)(Parm, OutParm)
	bool                                          NewLocalVar;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTR_PCInfo>                    TopScorePcArray;                                   // 0x0018(0x0010)(Edit, BlueprintVisible)
	TArray<double>                                RatioFloat;                                        // 0x0028(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_PCInfo                            CallFunc_Array_Get_Item;                           // 0x0050(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTR_PCInfo                            CallFunc_Array_Get_Item_1;                         // 0x0090(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_PCInfo                            CallFunc_Array_Get_Item_2;                         // 0x00E8(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0140(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MaxOfFloatArray_IndexOfMaxValue;          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MaxOfFloatArray_MaxValue;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_PCInfo                            CallFunc_Array_Get_Item_3;                         // 0x0158(0x0040)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CallFunc_MaxOfFloatArray_FloatArray_ImplicitCast;  // 0x01B0(0x0010)(ConstParm, ReferenceParm)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_GetTopScore) == 0x000008, "Wrong alignment on GT_zombie_C_GetTopScore");
static_assert(sizeof(GT_zombie_C_GetTopScore) == 0x0001C8, "Wrong size on GT_zombie_C_GetTopScore");
static_assert(offsetof(GT_zombie_C_GetTopScore, TopScore) == 0x000000, "Member 'GT_zombie_C_GetTopScore::TopScore' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, NewLocalVar) == 0x000010, "Member 'GT_zombie_C_GetTopScore::NewLocalVar' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, TopScorePcArray) == 0x000018, "Member 'GT_zombie_C_GetTopScore::TopScorePcArray' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, RatioFloat) == 0x000028, "Member 'GT_zombie_C_GetTopScore::RatioFloat' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, Temp_int_Array_Index_Variable) == 0x000038, "Member 'GT_zombie_C_GetTopScore::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, Temp_int_Array_Index_Variable_1) == 0x00003C, "Member 'GT_zombie_C_GetTopScore::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'GT_zombie_C_GetTopScore::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'GT_zombie_C_GetTopScore::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, Temp_int_Array_Index_Variable_2) == 0x000048, "Member 'GT_zombie_C_GetTopScore::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Array_Get_Item) == 0x000050, "Member 'GT_zombie_C_GetTopScore::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Array_Get_Item_1) == 0x000090, "Member 'GT_zombie_C_GetTopScore::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Array_Length_ReturnValue) == 0x0000D0, "Member 'GT_zombie_C_GetTopScore::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Less_IntInt_ReturnValue) == 0x0000D4, "Member 'GT_zombie_C_GetTopScore::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000D8, "Member 'GT_zombie_C_GetTopScore::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Array_Length_ReturnValue_1) == 0x0000E0, "Member 'GT_zombie_C_GetTopScore::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Array_Get_Item_2) == 0x0000E8, "Member 'GT_zombie_C_GetTopScore::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Array_Length_ReturnValue_2) == 0x000128, "Member 'GT_zombie_C_GetTopScore::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x00012C, "Member 'GT_zombie_C_GetTopScore::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Array_Add_ReturnValue) == 0x000130, "Member 'GT_zombie_C_GetTopScore::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, Temp_int_Loop_Counter_Variable_1) == 0x000134, "Member 'GT_zombie_C_GetTopScore::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Less_IntInt_ReturnValue_1) == 0x000138, "Member 'GT_zombie_C_GetTopScore::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Add_IntInt_ReturnValue_1) == 0x00013C, "Member 'GT_zombie_C_GetTopScore::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, Temp_real_Variable) == 0x000140, "Member 'GT_zombie_C_GetTopScore::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_MaxOfFloatArray_IndexOfMaxValue) == 0x000148, "Member 'GT_zombie_C_GetTopScore::CallFunc_MaxOfFloatArray_IndexOfMaxValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_MaxOfFloatArray_MaxValue) == 0x00014C, "Member 'GT_zombie_C_GetTopScore::CallFunc_MaxOfFloatArray_MaxValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Array_Add_ReturnValue_1) == 0x000150, "Member 'GT_zombie_C_GetTopScore::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000154, "Member 'GT_zombie_C_GetTopScore::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Array_Get_Item_3) == 0x000158, "Member 'GT_zombie_C_GetTopScore::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Array_Add_ReturnValue_2) == 0x000198, "Member 'GT_zombie_C_GetTopScore::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Array_IsEmpty_ReturnValue) == 0x00019C, "Member 'GT_zombie_C_GetTopScore::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, Temp_int_Loop_Counter_Variable_2) == 0x0001A0, "Member 'GT_zombie_C_GetTopScore::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Less_IntInt_ReturnValue_2) == 0x0001A4, "Member 'GT_zombie_C_GetTopScore::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_Add_IntInt_ReturnValue_2) == 0x0001A8, "Member 'GT_zombie_C_GetTopScore::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_MaxOfFloatArray_FloatArray_ImplicitCast) == 0x0001B0, "Member 'GT_zombie_C_GetTopScore::CallFunc_MaxOfFloatArray_FloatArray_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_GetTopScore, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x0001C0, "Member 'GT_zombie_C_GetTopScore::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.IsDead
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_IsDead final
{
public:
	bool                                          Dead_;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_IsDead) == 0x000001, "Wrong alignment on GT_zombie_C_IsDead");
static_assert(sizeof(GT_zombie_C_IsDead) == 0x000001, "Wrong size on GT_zombie_C_IsDead");
static_assert(offsetof(GT_zombie_C_IsDead, Dead_) == 0x000000, "Member 'GT_zombie_C_IsDead::Dead_' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.IsDestroyabe?
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_IsDestroyabe_ final
{
public:
	bool                                          Destroyable_;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_IsDestroyabe_) == 0x000001, "Wrong alignment on GT_zombie_C_IsDestroyabe_");
static_assert(sizeof(GT_zombie_C_IsDestroyabe_) == 0x000001, "Wrong size on GT_zombie_C_IsDestroyabe_");
static_assert(offsetof(GT_zombie_C_IsDestroyabe_, Destroyable_) == 0x000000, "Member 'GT_zombie_C_IsDestroyabe_::Destroyable_' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.IsReady?
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_IsReady_ final
{
public:
	bool                                          IsReady__0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_IsReady_) == 0x000001, "Wrong alignment on GT_zombie_C_IsReady_");
static_assert(sizeof(GT_zombie_C_IsReady_) == 0x000001, "Wrong size on GT_zombie_C_IsReady_");
static_assert(offsetof(GT_zombie_C_IsReady_, IsReady__0) == 0x000000, "Member 'GT_zombie_C_IsReady_::IsReady__0' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.IsStress
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_IsStress final
{
public:
	bool                                          Yes_;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_IsStress) == 0x000001, "Wrong alignment on GT_zombie_C_IsStress");
static_assert(sizeof(GT_zombie_C_IsStress) == 0x000001, "Wrong size on GT_zombie_C_IsStress");
static_assert(offsetof(GT_zombie_C_IsStress, Yes_) == 0x000000, "Member 'GT_zombie_C_IsStress::Yes_' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.IsTalking?
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_IsTalking_ final
{
public:
	bool                                          IsTalking__0;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_IsTalking_) == 0x000001, "Wrong alignment on GT_zombie_C_IsTalking_");
static_assert(sizeof(GT_zombie_C_IsTalking_) == 0x000001, "Wrong size on GT_zombie_C_IsTalking_");
static_assert(offsetof(GT_zombie_C_IsTalking_, IsTalking__0) == 0x000000, "Member 'GT_zombie_C_IsTalking_::IsTalking__0' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.Kick?
// 0x0040 (0x0040 - 0x0000)
struct GT_zombie_C_Kick_ final
{
public:
	struct FSTR_PCInfo                            Target;                                            // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_Kick_) == 0x000008, "Wrong alignment on GT_zombie_C_Kick_");
static_assert(sizeof(GT_zombie_C_Kick_) == 0x000040, "Wrong size on GT_zombie_C_Kick_");
static_assert(offsetof(GT_zombie_C_Kick_, Target) == 0x000000, "Member 'GT_zombie_C_Kick_::Target' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.Kick? (Server)
// 0x0040 (0x0040 - 0x0000)
struct GT_zombie_C_Kick___Server_ final
{
public:
	struct FSTR_PCInfo                            PlayerInfo;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_Kick___Server_) == 0x000008, "Wrong alignment on GT_zombie_C_Kick___Server_");
static_assert(sizeof(GT_zombie_C_Kick___Server_) == 0x000040, "Wrong size on GT_zombie_C_Kick___Server_");
static_assert(offsetof(GT_zombie_C_Kick___Server_, PlayerInfo) == 0x000000, "Member 'GT_zombie_C_Kick___Server_::PlayerInfo' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.KickPlayer
// 0x0048 (0x0048 - 0x0000)
struct GT_zombie_C_KickPlayer final
{
public:
	struct FSTR_KickVote                          PlayerInfo;                                        // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_KickPlayer) == 0x000008, "Wrong alignment on GT_zombie_C_KickPlayer");
static_assert(sizeof(GT_zombie_C_KickPlayer) == 0x000048, "Wrong size on GT_zombie_C_KickPlayer");
static_assert(offsetof(GT_zombie_C_KickPlayer, PlayerInfo) == 0x000000, "Member 'GT_zombie_C_KickPlayer::PlayerInfo' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.KickPlayer (Server)
// 0x0048 (0x0048 - 0x0000)
struct GT_zombie_C_KickPlayer__Server_ final
{
public:
	struct FSTR_KickVote                          NewItem;                                           // 0x0000(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_KickPlayer__Server_) == 0x000008, "Wrong alignment on GT_zombie_C_KickPlayer__Server_");
static_assert(sizeof(GT_zombie_C_KickPlayer__Server_) == 0x000048, "Wrong size on GT_zombie_C_KickPlayer__Server_");
static_assert(offsetof(GT_zombie_C_KickPlayer__Server_, NewItem) == 0x000000, "Member 'GT_zombie_C_KickPlayer__Server_::NewItem' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.MuteID
// 0x0010 (0x0010 - 0x0000)
struct GT_zombie_C_MuteID final
{
public:
	class FString                                 SteamID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_MuteID) == 0x000008, "Wrong alignment on GT_zombie_C_MuteID");
static_assert(sizeof(GT_zombie_C_MuteID) == 0x000010, "Wrong size on GT_zombie_C_MuteID");
static_assert(offsetof(GT_zombie_C_MuteID, SteamID) == 0x000000, "Member 'GT_zombie_C_MuteID::SteamID' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.NewKickVote
// 0x0040 (0x0040 - 0x0000)
struct GT_zombie_C_NewKickVote final
{
public:
	struct FSTR_PCInfo                            Target;                                            // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_NewKickVote) == 0x000008, "Wrong alignment on GT_zombie_C_NewKickVote");
static_assert(sizeof(GT_zombie_C_NewKickVote) == 0x000040, "Wrong size on GT_zombie_C_NewKickVote");
static_assert(offsetof(GT_zombie_C_NewKickVote, Target) == 0x000000, "Member 'GT_zombie_C_NewKickVote::Target' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.OnPlayerDeath
// 0x0008 (0x0008 - 0x0000)
struct GT_zombie_C_OnPlayerDeath final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_OnPlayerDeath) == 0x000008, "Wrong alignment on GT_zombie_C_OnPlayerDeath");
static_assert(sizeof(GT_zombie_C_OnPlayerDeath) == 0x000008, "Wrong size on GT_zombie_C_OnPlayerDeath");
static_assert(offsetof(GT_zombie_C_OnPlayerDeath, PC) == 0x000000, "Member 'GT_zombie_C_OnPlayerDeath::PC' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.OnTrySelectTeam
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_OnTrySelectTeam final
{
public:
	E_Team                                        Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_OnTrySelectTeam) == 0x000001, "Wrong alignment on GT_zombie_C_OnTrySelectTeam");
static_assert(sizeof(GT_zombie_C_OnTrySelectTeam) == 0x000001, "Wrong size on GT_zombie_C_OnTrySelectTeam");
static_assert(offsetof(GT_zombie_C_OnTrySelectTeam, Team) == 0x000000, "Member 'GT_zombie_C_OnTrySelectTeam::Team' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.PlayEndWaveSound (Multicast)
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_PlayEndWaveSound__Multicast_ final
{
public:
	EN_WaveClass                                  EN_WaveClass;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_PlayEndWaveSound__Multicast_) == 0x000001, "Wrong alignment on GT_zombie_C_PlayEndWaveSound__Multicast_");
static_assert(sizeof(GT_zombie_C_PlayEndWaveSound__Multicast_) == 0x000001, "Wrong size on GT_zombie_C_PlayEndWaveSound__Multicast_");
static_assert(offsetof(GT_zombie_C_PlayEndWaveSound__Multicast_, EN_WaveClass) == 0x000000, "Member 'GT_zombie_C_PlayEndWaveSound__Multicast_::EN_WaveClass' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.PlayEndWaveSound (server)
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_PlayEndWaveSound__server_ final
{
public:
	EN_WaveClass                                  EN_WaveClass;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_PlayEndWaveSound__server_) == 0x000001, "Wrong alignment on GT_zombie_C_PlayEndWaveSound__server_");
static_assert(sizeof(GT_zombie_C_PlayEndWaveSound__server_) == 0x000001, "Wrong size on GT_zombie_C_PlayEndWaveSound__server_");
static_assert(offsetof(GT_zombie_C_PlayEndWaveSound__server_, EN_WaveClass) == 0x000000, "Member 'GT_zombie_C_PlayEndWaveSound__server_::EN_WaveClass' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.PlayStartWaveSound (Multicast)
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_PlayStartWaveSound__Multicast_ final
{
public:
	EN_WaveClass                                  EN_WaveClass;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_PlayStartWaveSound__Multicast_) == 0x000001, "Wrong alignment on GT_zombie_C_PlayStartWaveSound__Multicast_");
static_assert(sizeof(GT_zombie_C_PlayStartWaveSound__Multicast_) == 0x000001, "Wrong size on GT_zombie_C_PlayStartWaveSound__Multicast_");
static_assert(offsetof(GT_zombie_C_PlayStartWaveSound__Multicast_, EN_WaveClass) == 0x000000, "Member 'GT_zombie_C_PlayStartWaveSound__Multicast_::EN_WaveClass' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.PlayStartWaveSound (server)
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_PlayStartWaveSound__server_ final
{
public:
	EN_WaveClass                                  EN_WaveClass;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_PlayStartWaveSound__server_) == 0x000001, "Wrong alignment on GT_zombie_C_PlayStartWaveSound__server_");
static_assert(sizeof(GT_zombie_C_PlayStartWaveSound__server_) == 0x000001, "Wrong size on GT_zombie_C_PlayStartWaveSound__server_");
static_assert(offsetof(GT_zombie_C_PlayStartWaveSound__server_, EN_WaveClass) == 0x000000, "Member 'GT_zombie_C_PlayStartWaveSound__server_::EN_WaveClass' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.ServerTravel
// 0x0008 (0x0008 - 0x0000)
struct GT_zombie_C_ServerTravel final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_ServerTravel) == 0x000008, "Wrong alignment on GT_zombie_C_ServerTravel");
static_assert(sizeof(GT_zombie_C_ServerTravel) == 0x000008, "Wrong size on GT_zombie_C_ServerTravel");
static_assert(offsetof(GT_zombie_C_ServerTravel, Delay) == 0x000000, "Member 'GT_zombie_C_ServerTravel::Delay' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.ServerTravel (server)
// 0x0004 (0x0004 - 0x0000)
struct GT_zombie_C_ServerTravel__server_ final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_ServerTravel__server_) == 0x000004, "Wrong alignment on GT_zombie_C_ServerTravel__server_");
static_assert(sizeof(GT_zombie_C_ServerTravel__server_) == 0x000004, "Wrong size on GT_zombie_C_ServerTravel__server_");
static_assert(offsetof(GT_zombie_C_ServerTravel__server_, Duration) == 0x000000, "Member 'GT_zombie_C_ServerTravel__server_::Duration' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.Slomo
// 0x0008 (0x0008 - 0x0000)
struct GT_zombie_C_Slomo final
{
public:
	double                                        Slomo_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_Slomo) == 0x000008, "Wrong alignment on GT_zombie_C_Slomo");
static_assert(sizeof(GT_zombie_C_Slomo) == 0x000008, "Wrong size on GT_zombie_C_Slomo");
static_assert(offsetof(GT_zombie_C_Slomo, Slomo_0) == 0x000000, "Member 'GT_zombie_C_Slomo::Slomo_0' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.SpawnWinHud (server)
// 0x0010 (0x0010 - 0x0000)
struct GT_zombie_C_SpawnWinHud__server_ final
{
public:
	int32                                         Wave;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Chrono;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_SpawnWinHud__server_) == 0x000008, "Wrong alignment on GT_zombie_C_SpawnWinHud__server_");
static_assert(sizeof(GT_zombie_C_SpawnWinHud__server_) == 0x000010, "Wrong size on GT_zombie_C_SpawnWinHud__server_");
static_assert(offsetof(GT_zombie_C_SpawnWinHud__server_, Wave) == 0x000000, "Member 'GT_zombie_C_SpawnWinHud__server_::Wave' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_SpawnWinHud__server_, Chrono) == 0x000008, "Member 'GT_zombie_C_SpawnWinHud__server_::Chrono' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.Talk
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_Talk final
{
public:
	bool                                          IsTalking;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_Talk) == 0x000001, "Wrong alignment on GT_zombie_C_Talk");
static_assert(sizeof(GT_zombie_C_Talk) == 0x000001, "Wrong size on GT_zombie_C_Talk");
static_assert(offsetof(GT_zombie_C_Talk, IsTalking) == 0x000000, "Member 'GT_zombie_C_Talk::IsTalking' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.UpdateGamemode
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_UpdateGamemode final
{
public:
	EGameMode                                     GameMode;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_UpdateGamemode) == 0x000001, "Wrong alignment on GT_zombie_C_UpdateGamemode");
static_assert(sizeof(GT_zombie_C_UpdateGamemode) == 0x000001, "Wrong size on GT_zombie_C_UpdateGamemode");
static_assert(offsetof(GT_zombie_C_UpdateGamemode, GameMode) == 0x000000, "Member 'GT_zombie_C_UpdateGamemode::GameMode' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.UpdateKickVote
// 0x0048 (0x0048 - 0x0000)
struct GT_zombie_C_UpdateKickVote final
{
public:
	struct FSTR_PCInfo                            Target;                                            // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Yes_;                                              // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_UpdateKickVote) == 0x000008, "Wrong alignment on GT_zombie_C_UpdateKickVote");
static_assert(sizeof(GT_zombie_C_UpdateKickVote) == 0x000048, "Wrong size on GT_zombie_C_UpdateKickVote");
static_assert(offsetof(GT_zombie_C_UpdateKickVote, Target) == 0x000000, "Member 'GT_zombie_C_UpdateKickVote::Target' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_UpdateKickVote, Yes_) == 0x000040, "Member 'GT_zombie_C_UpdateKickVote::Yes_' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.UpdateMapSelection
// 0x000C (0x000C - 0x0000)
struct GT_zombie_C_UpdateMapSelection final
{
public:
	class FName                                   Selected_Level_Name;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_UpdateMapSelection) == 0x000004, "Wrong alignment on GT_zombie_C_UpdateMapSelection");
static_assert(sizeof(GT_zombie_C_UpdateMapSelection) == 0x00000C, "Wrong size on GT_zombie_C_UpdateMapSelection");
static_assert(offsetof(GT_zombie_C_UpdateMapSelection, Selected_Level_Name) == 0x000000, "Member 'GT_zombie_C_UpdateMapSelection::Selected_Level_Name' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_UpdateMapSelection, Index_0) == 0x000008, "Member 'GT_zombie_C_UpdateMapSelection::Index_0' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.UpdateScore
// 0x0008 (0x0008 - 0x0000)
struct GT_zombie_C_UpdateScore final
{
public:
	struct FSTR_Score                             Score;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_UpdateScore) == 0x000004, "Wrong alignment on GT_zombie_C_UpdateScore");
static_assert(sizeof(GT_zombie_C_UpdateScore) == 0x000008, "Wrong size on GT_zombie_C_UpdateScore");
static_assert(offsetof(GT_zombie_C_UpdateScore, Score) == 0x000000, "Member 'GT_zombie_C_UpdateScore::Score' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.UpdateTeamIndex (PlayerKilled)
// 0x0010 (0x0010 - 0x0000)
struct GT_zombie_C_UpdateTeamIndex__PlayerKilled_ final
{
public:
	E_Team                                        Team_PlayerKilled_;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MilitaryIndex;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TerroristIndex;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Team                                        WiiningTeam;                                       // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_UpdateTeamIndex__PlayerKilled_) == 0x000004, "Wrong alignment on GT_zombie_C_UpdateTeamIndex__PlayerKilled_");
static_assert(sizeof(GT_zombie_C_UpdateTeamIndex__PlayerKilled_) == 0x000010, "Wrong size on GT_zombie_C_UpdateTeamIndex__PlayerKilled_");
static_assert(offsetof(GT_zombie_C_UpdateTeamIndex__PlayerKilled_, Team_PlayerKilled_) == 0x000000, "Member 'GT_zombie_C_UpdateTeamIndex__PlayerKilled_::Team_PlayerKilled_' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_UpdateTeamIndex__PlayerKilled_, MilitaryIndex) == 0x000004, "Member 'GT_zombie_C_UpdateTeamIndex__PlayerKilled_::MilitaryIndex' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_UpdateTeamIndex__PlayerKilled_, TerroristIndex) == 0x000008, "Member 'GT_zombie_C_UpdateTeamIndex__PlayerKilled_::TerroristIndex' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_UpdateTeamIndex__PlayerKilled_, WiiningTeam) == 0x00000C, "Member 'GT_zombie_C_UpdateTeamIndex__PlayerKilled_::WiiningTeam' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.UpdateTeamXP
// 0x0001 (0x0001 - 0x0000)
struct GT_zombie_C_UpdateTeamXP final
{
public:
	bool                                          Win_;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_UpdateTeamXP) == 0x000001, "Wrong alignment on GT_zombie_C_UpdateTeamXP");
static_assert(sizeof(GT_zombie_C_UpdateTeamXP) == 0x000001, "Wrong size on GT_zombie_C_UpdateTeamXP");
static_assert(offsetof(GT_zombie_C_UpdateTeamXP, Win_) == 0x000000, "Member 'GT_zombie_C_UpdateTeamXP::Win_' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.UpdateTimer
// 0x0020 (0x0020 - 0x0000)
struct GT_zombie_C_UpdateTimer final
{
public:
	double                                        TimeCount;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   NewParam;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GT_zombie_C_UpdateTimer) == 0x000008, "Wrong alignment on GT_zombie_C_UpdateTimer");
static_assert(sizeof(GT_zombie_C_UpdateTimer) == 0x000020, "Wrong size on GT_zombie_C_UpdateTimer");
static_assert(offsetof(GT_zombie_C_UpdateTimer, TimeCount) == 0x000000, "Member 'GT_zombie_C_UpdateTimer::TimeCount' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_UpdateTimer, NewParam) == 0x000008, "Member 'GT_zombie_C_UpdateTimer::NewParam' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.UpdateVote (Server)
// 0x0048 (0x0048 - 0x0000)
struct GT_zombie_C_UpdateVote__Server_ final
{
public:
	struct FSTR_PCInfo                            Player_info;                                       // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Yes_;                                              // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_UpdateVote__Server_) == 0x000008, "Wrong alignment on GT_zombie_C_UpdateVote__Server_");
static_assert(sizeof(GT_zombie_C_UpdateVote__Server_) == 0x000048, "Wrong size on GT_zombie_C_UpdateVote__Server_");
static_assert(offsetof(GT_zombie_C_UpdateVote__Server_, Player_info) == 0x000000, "Member 'GT_zombie_C_UpdateVote__Server_::Player_info' has a wrong offset!");
static_assert(offsetof(GT_zombie_C_UpdateVote__Server_, Yes_) == 0x000040, "Member 'GT_zombie_C_UpdateVote__Server_::Yes_' has a wrong offset!");

// Function GT_zombie.GT_zombie_C.UpdateWarning
// 0x0010 (0x0010 - 0x0000)
struct GT_zombie_C_UpdateWarning final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GT_zombie_C_UpdateWarning) == 0x000008, "Wrong alignment on GT_zombie_C_UpdateWarning");
static_assert(sizeof(GT_zombie_C_UpdateWarning) == 0x000010, "Wrong size on GT_zombie_C_UpdateWarning");
static_assert(offsetof(GT_zombie_C_UpdateWarning, String) == 0x000000, "Member 'GT_zombie_C_UpdateWarning::String' has a wrong offset!");

}

