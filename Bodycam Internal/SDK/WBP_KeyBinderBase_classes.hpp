#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_KeyBinderBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "WBP_InteractableUserWidget_classes.hpp"
#include "InputCore_structs.hpp"
#include "FKeyBinderButtonData_structs.hpp"
#include "Slate_structs.hpp"
#include "FEnhanchedActionKeyMappingWithContext_structs.hpp"
#include "EWidgetStyleState_structs.hpp"
#include "FFontStyle_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_KeyBinderBase.WBP_KeyBinderBase_C
// 0x0280 (0x06B8 - 0x0438)
class UWBP_KeyBinderBase_C final : public UWBP_InteractableUserWidget_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WBP_KeyBinderBase_C;                // 0x0438(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FFKeyBinderButtonData>          InputBinderDataList;                               // 0x0440(0x0010)(Edit, BlueprintVisible)
	TArray<struct FKey>                           BlacklistedKeys;                                   // 0x0450(0x0010)(Edit, BlueprintVisible)
	struct FInputChord                            SelectedKey;                                       // 0x0460(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FInputChord                            LastSelectedKey;                                   // 0x0480(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bAllowKeyChangeInput;                              // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnKeyChanged;                                      // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FLinearColor                           LeftBackgroundColor;                               // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LeftHighlightColor;                                // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LeftActiveColor;                                   // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LeftDisabledColor;                                 // 0x04E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TextColor;                                         // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInEditMode;                                     // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_509[0x3];                                      // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentSelectionIndex;                             // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UButton*                                ActionButtonRef;                                   // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             DisplayNameTextRef;                                // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBox*                         KeyBinderButtonHBoxRef;                            // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                LeftBorderRef;                                     // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USizeBox*                               SizeBoxRef;                                        // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 KeyBinderButtonClass;                              // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TextHighlightColor;                                // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TextActiveColor;                                   // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TextDisabledColor;                                 // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWBP_KeyBinderButtonBase_C*>     KeyBinderButtons;                                  // 0x0570(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UWBP_KeyBinderButtonBase_C*             CurrentKeyBinderButton;                            // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFFontStyle                            TextFontStyle;                                     // 0x0588(0x0080)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         DuplicateFoundIndex;                               // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFEnhanchedActionKeyMappingWithContext DuplicateEnhancedActionKeyMapping;                 // 0x0610(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	class UPDA_KeybinderStyle_C*                  StyleData;                                         // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyWidgetStyleActive();
	void ApplyWidgetStyleDisabled();
	void ApplyWidgetStyleHighlighted();
	void ApplyWidgetStyleNormal();
	void BroadcastCurrentIndexToAllKeyBinders();
	void ChangeHighlightedKeyBinderButton(int32 IndexToHighlight, bool bIsRightNavigation);
	void ChangeInputBinding(const struct FInputChord& InInputChord);
	void ClearInputBinding();
	void Construct();
	void CreateKeyBinderButtonEvents();
	void CreateKeyBinderButtons();
	void ExecuteUbergraph_WBP_KeyBinderBase(int32 EntryPoint);
	void GetSelectedKeyBinderButton(class UWBP_KeyBinderButtonBase_C** KeyBinderButton);
	void IsBlacklistedKey(const struct FKey& InKey, bool* bIsBlacklisted);
	void IsKeyChangeAllowed(class UWBP_KeyBinderButtonBase_C* KeyBinderButton, bool* bIsKeyChangeAllowed);
	void OnAcceptRemoveDuplicate();
	void OnAutoRevertDuplicate();
	void OnButtonClicked();
	void OnCancelKeyChange();
	void OnCancelRemoveDuplicate();
	void OnDeclineRemoveDuplicate();
	void OnEndKeyChange(const struct FInputChord& NewKey);
	void OnKeyBinderButtonHighlight(class UWBP_KeyBinderButtonBase_C* KeyBinderButton);
	void OnKeyBinderButtonSelect(class UWBP_KeyBinderButtonBase_C* KeyBinderButton);
	void OnKeyBinderButtonUnhighlight(class UWBP_KeyBinderButtonBase_C* Key_Binder_Button);
	void OnKeyBinderHighlighted();
	void OnKeyBinderUnhighlighted();
	void OnKeyChanged__DelegateSignature(const struct FInputChord& NewKey, class UWBP_KeyBinderBase_C* KeyBinder);
	void OnKeyPressed(const struct FKey& Key);
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void OnLeaveEditMode();
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnParentMenuSetupComplete();
	void OnPressedBack(const struct FKeyEvent& KeyEvent);
	void OnPressedDown(const struct FKeyEvent& KeyEvent);
	void OnPressedLeft(const struct FKeyEvent& KeyEvent);
	void OnPressedRight(const struct FKeyEvent& KeyEvent);
	void OnPressedSelect(const struct FKeyEvent& KeyEvent);
	void OnPressedUp(const struct FKeyEvent& KeyEvent);
	struct FEventReply OnPreviewMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnQueryRemoveDuplicateBinding();
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnSetHighlightEffect(EWidgetStyleState HighlightState_0, bool bPlaySound);
	void OnSetupKeyBinder();
	void OnStartKeyChange(class UWBP_KeyBinderButtonBase_C* KeyBinderButton);
	void OverrideWidgetStyleFromConfig();
	void PreConstruct(bool IsDesignTime);
	void RefreshKeyBinderButtons();
	void RefreshWidget();
	void RemoveDuplicateBindingInSameContext(bool* bForceCancelKeyChange, bool* bDuplicateFound);
	void ReplaceBindingAtIndex(int32 Index_0);
	void SetKeyBinderButtonPadding(class UHorizontalBoxSlot* HBox);
	void SetStyleOnKeyBinderButtonAtIndex(EWidgetStyleState Style, int32 Index_0);
	void SetupDisplayNameText();
	void SetWidgetState(EWidgetStyleState WidgetState_0);
	void UnhighlightAllKeyBinderButtons();
	void UnhighlightCurrentKeyBinderButton();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_KeyBinderBase_C">();
	}
	static class UWBP_KeyBinderBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_KeyBinderBase_C>();
	}
};
static_assert(alignof(UWBP_KeyBinderBase_C) == 0x000008, "Wrong alignment on UWBP_KeyBinderBase_C");
static_assert(sizeof(UWBP_KeyBinderBase_C) == 0x0006B8, "Wrong size on UWBP_KeyBinderBase_C");
static_assert(offsetof(UWBP_KeyBinderBase_C, UberGraphFrame_WBP_KeyBinderBase_C) == 0x000438, "Member 'UWBP_KeyBinderBase_C::UberGraphFrame_WBP_KeyBinderBase_C' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, InputBinderDataList) == 0x000440, "Member 'UWBP_KeyBinderBase_C::InputBinderDataList' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, BlacklistedKeys) == 0x000450, "Member 'UWBP_KeyBinderBase_C::BlacklistedKeys' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, SelectedKey) == 0x000460, "Member 'UWBP_KeyBinderBase_C::SelectedKey' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, LastSelectedKey) == 0x000480, "Member 'UWBP_KeyBinderBase_C::LastSelectedKey' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, bAllowKeyChangeInput) == 0x0004A0, "Member 'UWBP_KeyBinderBase_C::bAllowKeyChangeInput' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, OnKeyChanged) == 0x0004A8, "Member 'UWBP_KeyBinderBase_C::OnKeyChanged' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, LeftBackgroundColor) == 0x0004B8, "Member 'UWBP_KeyBinderBase_C::LeftBackgroundColor' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, LeftHighlightColor) == 0x0004C8, "Member 'UWBP_KeyBinderBase_C::LeftHighlightColor' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, LeftActiveColor) == 0x0004D8, "Member 'UWBP_KeyBinderBase_C::LeftActiveColor' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, LeftDisabledColor) == 0x0004E8, "Member 'UWBP_KeyBinderBase_C::LeftDisabledColor' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, TextColor) == 0x0004F8, "Member 'UWBP_KeyBinderBase_C::TextColor' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, bIsInEditMode) == 0x000508, "Member 'UWBP_KeyBinderBase_C::bIsInEditMode' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, CurrentSelectionIndex) == 0x00050C, "Member 'UWBP_KeyBinderBase_C::CurrentSelectionIndex' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, ActionButtonRef) == 0x000510, "Member 'UWBP_KeyBinderBase_C::ActionButtonRef' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, DisplayNameTextRef) == 0x000518, "Member 'UWBP_KeyBinderBase_C::DisplayNameTextRef' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, KeyBinderButtonHBoxRef) == 0x000520, "Member 'UWBP_KeyBinderBase_C::KeyBinderButtonHBoxRef' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, LeftBorderRef) == 0x000528, "Member 'UWBP_KeyBinderBase_C::LeftBorderRef' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, SizeBoxRef) == 0x000530, "Member 'UWBP_KeyBinderBase_C::SizeBoxRef' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, KeyBinderButtonClass) == 0x000538, "Member 'UWBP_KeyBinderBase_C::KeyBinderButtonClass' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, TextHighlightColor) == 0x000540, "Member 'UWBP_KeyBinderBase_C::TextHighlightColor' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, TextActiveColor) == 0x000550, "Member 'UWBP_KeyBinderBase_C::TextActiveColor' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, TextDisabledColor) == 0x000560, "Member 'UWBP_KeyBinderBase_C::TextDisabledColor' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, KeyBinderButtons) == 0x000570, "Member 'UWBP_KeyBinderBase_C::KeyBinderButtons' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, CurrentKeyBinderButton) == 0x000580, "Member 'UWBP_KeyBinderBase_C::CurrentKeyBinderButton' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, TextFontStyle) == 0x000588, "Member 'UWBP_KeyBinderBase_C::TextFontStyle' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, DuplicateFoundIndex) == 0x000608, "Member 'UWBP_KeyBinderBase_C::DuplicateFoundIndex' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, DuplicateEnhancedActionKeyMapping) == 0x000610, "Member 'UWBP_KeyBinderBase_C::DuplicateEnhancedActionKeyMapping' has a wrong offset!");
static_assert(offsetof(UWBP_KeyBinderBase_C, StyleData) == 0x0006B0, "Member 'UWBP_KeyBinderBase_C::StyleData' has a wrong offset!");

}

