#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CameraControlTable

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ALS_OverlayState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CameraControlTable.CameraControlTable_C
// 0x0060 (0x02F0 - 0x0290)
class ACameraControlTable_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetComponent*                       WidgetFocus;                                       // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         CameraIndexMax;                                    // 0x02B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CameraIndex;                                       // 0x02B4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            Controller;                                        // 0x02B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AALS_AnimMan_CharacterBP_C*             BaseCharacter;                                     // 0x02C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCameraTransititon_C*                   CameraTransition__HUD_;                            // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ACamera_C*                              Camera;                                            // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AALS_AnimMan_CharacterBP_C*>     Out_Actors;                                        // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         ActualCamIndex;                                    // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CanInterract(bool* Interract_);
	void CanPickup(class AALS_AnimMan_CharacterBP_C* Player, bool* Pickup_);
	void CanSwap_(bool* IsItemSwap_);
	void Drop(double Delay);
	void ExecuteUbergraph_CameraControlTable(int32 EntryPoint);
	void Exit();
	void GetItemPriority(int32* Priority);
	void GetListOfPlayer(TArray<class AALS_AnimMan_CharacterBP_C*>* PlayersReturn);
	void GetOffset(struct FTransform* Offset);
	void GetOverlay(EALS_OverlayState* Overlay);
	void GetSocketToAttach(class FName* SocketToAttach);
	void Interract(class APawn* Owner_0);
	void InterractDoor(double Z_Angle, bool ResetDoor);
	void Interreact__Server_(class APawn* Target);
	void IsDefaultHandle(bool* IsDefaultHandle_);
	void Item_Focus();
	void LeftClickEvent();
	void LeftClickReleaseEvent();
	void Pickup(class AALS_AnimMan_CharacterBP_C* Owner_0);
	void ReceiveBeginPlay();
	void SwitchAnimation(class UAnimMontage** In, class UAnimMontage** Out, class USoundCue** InSound, class USoundCue** OutSound);
	void SwitchCamera(int32 Index_0);
	void Update_Nearest_Camera_to_Player(class APawn* Player, class ACamera_C** Camera_0);
	void UpdateTranistion__HUD_();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CameraControlTable_C">();
	}
	static class ACameraControlTable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraControlTable_C>();
	}
};
static_assert(alignof(ACameraControlTable_C) == 0x000008, "Wrong alignment on ACameraControlTable_C");
static_assert(sizeof(ACameraControlTable_C) == 0x0002F0, "Wrong size on ACameraControlTable_C");
static_assert(offsetof(ACameraControlTable_C, UberGraphFrame) == 0x000290, "Member 'ACameraControlTable_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACameraControlTable_C, WidgetFocus) == 0x000298, "Member 'ACameraControlTable_C::WidgetFocus' has a wrong offset!");
static_assert(offsetof(ACameraControlTable_C, Box) == 0x0002A0, "Member 'ACameraControlTable_C::Box' has a wrong offset!");
static_assert(offsetof(ACameraControlTable_C, DefaultSceneRoot) == 0x0002A8, "Member 'ACameraControlTable_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ACameraControlTable_C, CameraIndexMax) == 0x0002B0, "Member 'ACameraControlTable_C::CameraIndexMax' has a wrong offset!");
static_assert(offsetof(ACameraControlTable_C, CameraIndex) == 0x0002B4, "Member 'ACameraControlTable_C::CameraIndex' has a wrong offset!");
static_assert(offsetof(ACameraControlTable_C, Controller) == 0x0002B8, "Member 'ACameraControlTable_C::Controller' has a wrong offset!");
static_assert(offsetof(ACameraControlTable_C, BaseCharacter) == 0x0002C0, "Member 'ACameraControlTable_C::BaseCharacter' has a wrong offset!");
static_assert(offsetof(ACameraControlTable_C, CameraTransition__HUD_) == 0x0002C8, "Member 'ACameraControlTable_C::CameraTransition__HUD_' has a wrong offset!");
static_assert(offsetof(ACameraControlTable_C, Camera) == 0x0002D0, "Member 'ACameraControlTable_C::Camera' has a wrong offset!");
static_assert(offsetof(ACameraControlTable_C, Out_Actors) == 0x0002D8, "Member 'ACameraControlTable_C::Out_Actors' has a wrong offset!");
static_assert(offsetof(ACameraControlTable_C, ActualCamIndex) == 0x0002E8, "Member 'ACameraControlTable_C::ActualCamIndex' has a wrong offset!");

}

